#!/usr/bin/python

""" 
dimsbuild

DimsBuild wrapper
"""

import imp
import os
import sys

from optparse import OptionParser, OptionGroup, SUPPRESS_HELP
from StringIO import StringIO

from dims import pps
from dims import xmllib

from dims.CleanHelpFormatter import CleanHelpFormatter

P = pps.Path

def main():
  parser = OptionParser("usage: %prog [OPTIONS] DISTROFILE",
                        formatter=CleanHelpFormatter(),
                        description="build the distribution defined in the "
                                    "distro file located at DISTROFILE"
                        )

  parser.add_option('--clear-cache',
    dest='clear_cache',
    action='store_true',
    default=False,
    help="clear cache of downloaded files before executing")

  config_group = OptionGroup(parser, "config options")
  config_group.add_option('-c', '--config', metavar='PATH',
    default='/etc/dimsbuild.conf',
    dest='mainconfigpath',
    help="specify path to the config file")
  config_group.add_option('--no-validate',
    dest='no_validate',
    action='store_true',
    default=False,
    help="do not validate config/definition files")
  config_group.add_option('--validate-only',
    dest='validate_only',
    default=False,
    action='store_true',
    help="validate config/definition files and exit")
  parser.add_option_group(config_group)

  log_group = OptionGroup(parser, "logging options")
  log_group.add_option('-l', '--log-level', metavar='N',
    dest='logthresh',
    type='int',
    default=3,
    help="specify the level of verbosity of the output log")
  log_group.add_option('--log-file', metavar='PATH',
    dest='logfile',
    default='/var/log/dimsbuild.log',
    help="specify a file in which to log output")
  parser.add_option_group(log_group)

  module_group = OptionGroup(parser, "module and library options")
  module_group.add_option('--lib-path', metavar='PATH',
    action='append',
    dest='libpath',
    default=[],
    help="specify directory containing dimsbuild library files")
  module_group.add_option('--share-path', metavar='PATH',
    action='append',
    dest='sharepath',
    default=[],
    help="specify directory containing dimsbuild shared files")
  module_group.add_option('--enable-module', metavar='MODULE',
    action='append',
    dest='enabled_modules',
    default=[],
    help="load the specified module") # included for config file parity
  module_group.add_option('--disable-module', metavar='MODULE',
    action='append',
    dest='disabled_modules',
    default=[],
    help="do not load the specified module")
  parser.add_option_group(module_group)

  event_group = OptionGroup(parser, "event control options")
  event_group.add_option('--force', metavar='MODULE',
    action='append',
    dest='force_modules',
    default=[],
    help="force a module's events to execute")
  event_group.add_option('--skip', metavar='MODULE',
    action='append',
    dest='skip_modules',
    default=[],
    help="skip execution of a module's events")
  event_group.add_option('--force-event', metavar='EVENT',
    action='append',
    dest='force_events',
    default=[],
    help=SUPPRESS_HELP)
  event_group.add_option('--skip-event', metavar='EVENT',
    action='append',
    dest='skip_events',
    default=[],
    help=SUPPRESS_HELP)
  event_group.add_option('--list-events',
    action='store_true',
    default=False,
    dest='list_events',
    help="print out a list of all events and exit")
  parser.add_option_group(event_group)

  opts,args = parser.parse_args(args=sys.argv[1:])

  if len(args) != 1:
    print "Invalid number of arguments (expecting 1, got %d)" % len(args)
    parser.print_help()
    sys.exit(1)

  # import dimsbuild from some path in sys.path
  try:
    import dimsbuild.main
  except ImportError, e:
    print "Unable to load core dimsbuild files"
    raise #!
    sys.exit(1)

  # initialize our software builder with opts and make it go!
  sbuilder = dimsbuild.main.Build(opts, args, parser)
  sbuilder.main()
  sys.exit()


if __name__ == '__main__': main()
