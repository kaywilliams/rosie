#!/usr/bin/python

""" 
dimsbuild

DimsBuild wrapper
"""

import imp
import os
import sys

from os.path import join, exists, isdir, expandvars
from optparse import OptionParser, SUPPRESS_HELP
from StringIO import StringIO

from dims import configlib
from dims import listfmt

from dims.CleanHelpFormatter import CleanHelpFormatter, OptionGroupId

def main():
  parser = OptionParser("usage: %prog [OPTIONS]", formatter=CleanHelpFormatter())
  parser.add_option('-c', '--distro-conf',
                    dest='userdistroconfigpath',
                    help="specify path to distro.conf file")
  parser.add_option('-v', '--verbose',
                    default=False,
                    action='store_true',
                    help="enable verbose output (deprecated)")
  parser.add_option('-l', '--log-level',
                    dest='logthresh',
                    default=3,
                    help="specify the level of verbosity of the output log")
  parser.add_option('-e', '--errlog-level',
                    dest='errthresh',
                    default=1,
                    help="specify the level of verbosity of the error log")
  parser.add_option('--no-plugins',
                    default=True,
                    action='store_false',
                    dest='plugins',
                    help="disable plugins")
  parser.add_option('--dimsbuild-conf', 
                    default='/etc/dimsbuild.conf',
                    dest='mainconfigpath',
                    help="specify path dimsbuild.conf")
  parser.add_option('--lib-path', 
                    dest='libpath',
                    help="specify directory containing dimsbuild library files")
  parser.add_option('--share-path',
                    dest='sharepath',
                    help="specify directory containing dimsbuild shared files")
  parser.add_option('--clear-cache',
                    dest='clear_cache',
                    action='store_true',
                    default=False,
                    help="clear cache of downloaded files before executing")
  parser.add_option('--clean',
                    action='callback',
                    dest='clean_events',
                    metavar='EVENT1 [EVENT2 ...]',
                    default=[],
                    callback=append_events_callback,
                    help="specify a list of events that are forced to execute, " + \
                         "even if normal program execution would ordinarily skip " + \
                         "them.  See above for the list of accepted events")
  parser.add_option('--skip',
                    action='callback',
                    dest='skip_events',
                    metavar='EVENT1 [EVENT2 ...]',
                    default=[],
                    callback=append_events_callback,
                    help="specify a list of events that are prevented from " + \
                         "being executed, even if normal program execution " + \
                         "would ordinarily run them.  See above for the list " + \
                         "of accepted events")

  args = sys.argv[1:]

  try:
    preargs = __filter_cmd_args(args,
                                ['--no-plugins', '-h', '--help'],
                                ['-c', '--distro-conf', '-l', '-e', '--dimsbuild-conf',
                                 '--lib-path', '--share-path'])
  except ValueError:
    parser.print_help()
    sys.exit(1)
  
  opts,_ = parser.parse_args(args=preargs)

  mainconfig, distroconfig = __get_conf(opts.mainconfigpath, opts.userdistroconfigpath, 
                                          opts.logthresh)

  # set up IMPORT_DIRS  
  import_dirs = mainconfig.xpath('//librarypaths/path/text()', [])
  if opts.libpath: 
    import_dirs.insert(0, opts.libpath)
  for dir in sys.path:
    if dir not in import_dirs: import_dirs.append(dir)
  sys.path = import_dirs
  import_dirs = [ join(i, 'dimsbuild') for i in import_dirs ]

  # import dimsbuild from some path in import_dirs
  fp, path, desc = imp.find_module('main', import_dirs)
  build = imp.load_module('main', fp, path, desc)
  fp.close()
  
  # initialize our software builder with opts, the result of parsing preargs
  # we can't apply all options now, because plugins may modify the behavior
  # of the parser
  sbuilder = build.Build(opts, parser, mainconfig, distroconfig)
  
  # calculate the events available to --clean and --skip, and format nicely
  events = sbuilder.get_mdlr_events()
  parser.set_description("Valid events for EVENT, below, are: %s." % \
    listfmt.format(events, pre="'", post="'", last="and ", sep=", "))
  
  # now apply the real option set to the software builder, and run the main function
  options, args = parser.parse_args()
  sbuilder.apply_options(options)
  sbuilder.main()
  sys.exit()


def append_events_callback(option, opt, value, parser):
  events = []
  while parser.rargs:
    arg = parser.rargs[0]
    if ((arg[:2] == '--' and len(arg) > 2) or
        (arg[:1] == '-'  and len(arg) > 1 and arg[1] != '-')):
      break
    else:
      events.append(arg)
      del parser.rargs[0]
  if not hasattr(parser.values, option.dest):
    setattr(parser.values, option.dest, events)
  else:
    values = getattr(parser.values, option.dest)
    for event in events:
      if event not in values: values.append(event)


def __get_conf(mainconfigpath, distroconfigpath=None, loglevel=1):
  """Computes the location and reads main and distro configuration files"""

  if exists(mainconfigpath):
    if loglevel >= 4: print "Reading reading main config file '%s'" % mainconfigpath
    mainconfig = configlib.read(mainconfigpath)
  else:
    if loglevel >= 4: print "No main config file found at '%s'. Using default settings..." % mainconfigpath
    mainconfig = configlib.read(StringIO('<dimsbuild></dimsbuild>'))

  if distroconfigpath is None: distroconfigpath = 'distro.conf'
  distroconfigpath = join(os.getcwd(), expandvars(distroconfigpath))
  if not exists(distroconfigpath):
    raise OSError, "No config file found at '%s'" % distroconfigpath
  
  if loglevel >= 3: print "Reading distro config file '%s'" % distroconfigpath
  distroconfig = configlib.read(distroconfigpath)
  
  return mainconfig, distroconfig
  

def __filter_cmd_args(args, noargopts, argopts):
  """Filter args by removing items that are not in noargopts and argopts.
  noargopts is a list of arguments that take no arguments; argopts are
  arguments that do take arguments

  Looks awfully similar to a function that does the same thing in yum"""

  ret = []
  args = list(args) # copy args, this function is destructive

  while len(args) > 0:
    a = args.pop(0)
    if '=' in a:         # 'arg=value' style
      opt,_ = a.split('=', 1)
      if opt in argopts:
        ret.append(a)
    elif a in noargopts: # 'arg' style
      ret.append(a)
    elif a in argopts:   # 'arg value' style
      if len(args) < 1:
        raise ValueError
      next = args.pop(0)
      if next.startswith('-'):
        raise ValueError
      ret.extend([a,next])
    else:                # 'argvalue' style
      for opt in argopts:
        if len(opt) == 2 and a.startswith(opt):
          ret.append(a)
  return ret


if __name__ == "__main__": main()
