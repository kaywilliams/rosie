#!/usr/bin/python
import os
import tempfile

from ConfigParser import ConfigParser
from optparse     import OptionParser

from centosstudio.util import CleanHelpFormatter
from centosstudio.util import shlib
from centosstudio.util import mkrpm
from centosstudio.util import pps
from centosstudio.util import rxml

WORKING_DIR = pps.path('/tmp/buildrepos')
WORKING_DIR.mkdirs()

"""
EXAMPLE CONFIG FILE:
<?xml version="1.0" encoding="utf-8"?>
<build-repos>
  <path>/root/testing/build</path>
  <repo id="repo1">
      <package>
        <name>package1</name>
        <version>1.0</version>
        <release>1</release>
        <provides>package1-provide1 package1-provide2 package1-provide3</provides>
        <requires>package1-require1 package1-require2 package1-require3</requires>
        <obsoletes>package1-obsolete1 package1-obsolete2</obsoletes>
        <conflicts>package1-conflict1 package1-conflict2</conflicts>
        <force-arch>noarch</force-arch>
      </package>
      <package>
        <name>package2</name>
        <version>1.0</version>
        <release>1</release>
        <provides>package2-provide1 package2-provide2 package2-provide3</provides>
        <requires>package2-require1 package2-require2 package2-require3</requires>
        <obsoletes>package2-obsolete1 package2-obsolete2</obsoletes>
        <force-arch>noarch</force-arch>
      </package>
  </repo>
  <repo id="repo2">
      <package>
        <name>package3</name>
        <version>1.0</version>
        <release>1</release>
        <provides>package3-provide1 package3-provide2 package3-provide3</provides>
        <requires>package3-require1 package3-require2 package3-require3</requires>
        <obsoletes>package3-obsolete1 package3-obsolete2</obsoletes>
        <force-arch>noarch</force-arch>
      </package>
  </repo>
</build-repos>
"""

class RpmPackage(object):
  def __init__(self, name, version, release,
               provides='', requires='', obsoletes='', conflicts='',
               force_arch='noarch'):
    self.name = name
    self.version = version
    self.release = release
    self.provides = provides
    self.requires = requires
    self.obsoletes = obsoletes
    self.conflicts = conflicts
    self.force_arch = force_arch

    self.build_folder = pps.path(tempfile.mkdtemp(dir=WORKING_DIR))

  def build(self, output, quiet=True):
    self.build_folder.mkdirs()
    (self.build_folder / 'README').write_text('DESCRIPTION')
    self._write_spec()
    mkrpm.build(self.build_folder, output, createrepo=False,
                bdist_base=pps.path('/usr/src/redhat'), rpm_base=pps.path('/usr/src/redhat'),
                dist_dir=self.build_folder/'dist', keep_source=False,
                quiet=True)

  def _write_spec(self):
    setupcfg = self.build_folder / 'setup.cfg'
    spec = ConfigParser()
    spec.add_section('metadata')
    spec.add_section('bdist_rpm')
    spec.add_section('distribution')

    spec.set('metadata', 'name', self.name)
    spec.set('metadata', 'long_description', 'DESCRIPTION')
    spec.set('metadata', 'description', 'SUMMARY')
    spec.set('metadata', 'author', 'buildrepos')
    spec.set('metadata', 'version', self.version)

    spec.set('distribution', 'data_files', '/usr/share/doc/%s: README' % self.name)

    spec.set('bdist_rpm', 'force_arch', self.force_arch)
    spec.set('bdist_rpm', 'release', self.release)

    if self.provides:
      spec.set('bdist_rpm', 'provides', self.provides)
    if self.requires:
      spec.set('bdist_rpm', 'requires', self.requires)
    if self.obsoletes:
      spec.set('bdist_rpm', 'obsoletes', self.obsoletes)
    if self.conflicts:
      spec.set('bdist_rpm', 'conflicts', self.conflicts)

    f = open(setupcfg, 'w')
    spec.write(f)
    f.close()

class RepoBuilder(object):
  def __init__(self):
    self.repos = {}

  def setup(self, config, relative_path):
    root_path = pps.path(config.getxpath('path/text()', './'))
    for repo in config.xpath('/build-repos/repo', []):
      id = repo.getxpath('@id')
      self.repos[id] = dict(path = root_path / id,
                            packages = [])
      if repo.getxpath('groupfile/text()', ''):
        self.repos[id]['groupfile'] = (relative_path //
                                       repo.getxpath('groupfile/text()'))
      for package in repo.xpath('package', []):
        self.repos[id]['packages'].append(RpmPackage(
                          package.getxpath('name/text()'),
                          package.getxpath('version/text()'),
                          package.getxpath('release/text()'),
                          provides=package.getxpath('provides/text()', ''),
                          requires=package.getxpath('requires/text()', ''),
                          obsoletes=package.getxpath('obsoletes/text()', ''),
                          conflicts=package.getxpath('conflicts/text()', ''),
                          force_arch=package.getxpath('force-arch/text()', '')))

  def build(self, repo_file, quiet=True):
    output_file = ConfigParser()
    for repoid in self.repos:
      path = self.repos[repoid]['path']
      path.mkdirs()

      # build all the packages
      for package in self.repos[repoid]['packages']:
        package.build(path, quiet)

      # run createrepo
      cwd = os.getcwd()
      os.chdir(path)
      if 'groupfile' in self.repos[repoid]: 
        cmd = 'createrepo -g %s .' %self.repos[repoid]['groupfile']
      else:
        cmd = 'createrepo .'
      shlib.execute(cmd)
      os.chdir(cwd)

      # add a section in the .repo file
      output_file.add_section(repoid)
      output_file.set(repoid, 'name', repoid)
      output_file.set(repoid, 'baseurl', 'file://%s' % path.abspath())

    # write the .repo file
    f = open(repo_file, 'w')
    output_file.write(f)
    f.close()

def main():
  parser = OptionParser("usage: %prog [OPTIONS]",
                        formatter=CleanHelpFormatter.CleanHelpFormatter())
  parser.add_option('-c', '--config-file',
                    dest='config_file',
                    default=None,
                    help="the path to the config file to use")
  parser.add_option('-r', '--repo-file',
                    dest='repo_file',
                    default='test.repo',
                    help="the repo file to create")
  parser.add_option('-v', '--verbose',
                    dest='quiet',
                    default=True,
                    action='store_false',
                    help="run in verbose mode")
  opts,_ = parser.parse_args()
  if opts.config_file is None:
    raise RuntimeError("no config file specified at command line")
  config_dir = pps.path(opts.config_file).abspath().dirname
  builder = RepoBuilder()
  builder.setup(rxml.tree.parse(opts.config_file).getroot(), 
                relative_path=config_dir)
  builder.build(opts.repo_file, quiet=opts.quiet)

if __name__ == '__main__':
  main()
