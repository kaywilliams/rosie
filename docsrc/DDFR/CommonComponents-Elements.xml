<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<section id="CommonComponents-Elements">

  <section id="boot-args"
           xreflabel="boot-args">
    <title>
    Element: boot-args
    </title>

    <section>
      <title>
      Definition
      </title>

      <para>
      Modifies the behavior of the various boot media 
      (<emphasis role="strong">bootiso</emphasis>,
      <emphasis role="strong">diskboot-image</emphasis>, and
      <emphasis role="strong">iso</emphasis>) by supplying supplemental or
      alternate kernel boot arguments.
      </para>

      <para>
      The <emphasis>boot-args</emphasis> element's text value should be a
      space-separated list of kernel arguments to append to each
      "append" line in the syslinux configuration file. If
      <emphasis>boot-args/@use-defaults</emphasis> is
      <constant>TRUE</constant>, the default set of kernel arguments, 
      defined by the parent bootiso, diskboot-image or iso element,
      are appended as well.
      </para>

    </section>

    <section id="boot-args-macros"
             xreflabel="Using boot-args Macros">
      <title>
      boot-args macros
      </title>

      <para>
      The <emphasis>boot-args</emphasis> element has support for two macros,
      described below. These macros can be used in combination with each 
      other and any other boot arguments.
      </para>

      <variablelist>
      <varlistentry>
        <term>
        <constant>%{ks}</constant>
        </term>

        <listitem>
        <para>
        If the <emphasis role="strong">kickstart</emphasis> top-level element
        is present in this definition file, this macro will be replaced by
        the string <constant>ks=$path</constant>, where
        <varname>$path</varname> is the path to the kickstart file on the
        installation image. If the <emphasis role="strong">kickstart</emphasis>
        top-level element is not present, this macro is ignored.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
        <constant>%{method}</constant>
        </term>

        <listitem>
        <para>
        This macro will be replaced by the string
        <constant>method=$path</constant>, where <varname>$path</varname>
        is the remote URL to the distribution's published output directory,
        as determined by the
        <emphasis role="strong"><xref linkend="publish"/></emphasis>
        module.
        </para>
        </listitem>
      </varlistentry>

      </variablelist>
    </section>

    <section>
      <title>
      Syntax
      </title>

      <programlisting>
[&lt;boot-args [use-defaults=BOOLEAN]&gt;TEXT&lt;/boot-args&gt;]
      </programlisting>
    </section>

    <section>
      <title>
      Attributes
      </title>

      <variablelist>
      <varlistentry id="boot-args-use-defaults"
                    xreflabel="boot-args/@use-defaults">
        <term>
        use-defaults
        </term>

        <listitem>
        <para>
        <varname>BOOLEAN</varname> value indicating whether the
        top-level element's default set of kernel arguments should
        be appended to the syslinux configuration file. Each top-level
        element defines its own set of default kernel arguments. The
        default value for this attribute is <constant>TRUE</constant>.
        </para>
        </listitem>
      </varlistentry>
      </variablelist>
    </section>

    <section>
      <title>
      Examples
      </title>

      <para>
      In the following examples, the default set of kernel arguments
      is <constant>method=http://server/distributions/mydistribution/os</constant> 
      and <constant>ks=ks.cfg</constant>.
      </para>

      <section>
        <title>
        Example 1 - default set plus append-args
        </title>

        <para>
        In this example, the default set of kernel arguments is included
        along with arguments defined in
        <emphasis>boot-args</emphasis>.

        <informalexample>
        <programlisting>     
&lt;boot-args&gt;noipv6&lt;/boot-args&gt;
        </programlisting>
        </informalexample>

        The final set of kernel append arguments is

        <literallayout>method=http://server/distributions/mydistribution/os ks=ks.cfg noipv6</literallayout>
        </para>
      </section>

      <section>
        <title>
        Example 2 - only append-args
        </title>

        <para>
        In this example, the default set of kernel arguments are not
        appended and a macro is used to include a 
        <constant>method</constant> parameter. No <constant>ks</constant> 
        parameter is included.

        <informalexample>
        <programlisting>
&lt;boot-args use-defaults="false"&gt;%{method} noipv6&lt;/boot-args&gt;
        </programlisting>
        </informalexample>

      The final set of kernel append arguments is

        <literallayout>method=http://server/distributions/mydistribution/os noipv6</literallayout>
        </para>
      </section>

    </section>

    <section>
      <title>
      See Also
      </title>

      <para>
      <varname><xref linkend="content-boolean" /></varname>,
      <varname><xref linkend="content-text" /></varname>,
      <varname><xref linkend="content-path" /></varname>
      </para>
    </section>
  </section>

  <section id="obsoletes"
           xreflabel="obsoletes">
    <title>
    Element: obsoletes
    </title>

    <section>
      <title>
      Definition
      </title>
      <para>
      A <varname>CAPABILITY</varname> to add to a top-level element RPM's
      obsoletes list. Each RPM SystemBuilder builds has a pre-determined set of
      capabilities it uses if the top-level element's
      <emphasis>@use-default-obsoletes</emphasis> attribute
      is <constant>TRUE</constant>. The default set of obsoletes can be 
      overridden by setting <emphasis>@use-default-obsoletes</emphasis> to
      <constant>FALSE</constant>. See the individual top-level element sections
      for the list of default capabilities each RPM obsoletes.
      </para>
    </section>

    <section>
      <title>
      Examples
      </title>

      <informalexample>
      <programlisting>     
&lt;obsoletes&gt;kernel &amp;lt; 2.4.1&lt;/obsoletes&gt; &lt;!-- kernel &lt; 2.4.1 --&gt;
&lt;obsoletes&gt;X11R6-contrib&lt;/obsoletes&gt;
&lt;obsoletes&gt;entrance gdm kdm wdm xdm&lt;/obsoletes&gt;
      </programlisting>
      </informalexample>

      <note>
      <para>When specifying <varname>CAPABILITY</varname> strings, remember
      to escape <constant>&lt;</constant> and <constant>&gt;</constant>
      with <constant>&amp;lt;</constant> and <constant>&amp;gt;</constant>,
      respectively.
      </para>
      </note>
    </section>

    <section>
      <title>
      See Also
      </title>

      <para>
      <varname><xref linkend="content-capability" /></varname>,
      <emphasis><xref linkend="requires" /></emphasis>,
      <emphasis role="strong"><xref linkend="config" /></emphasis>,
      </para>
    </section>
  </section>


  <section id="path-like-element"
           xreflabel="PATH-like Element">
    <title>
    Element: <varname>PATH</varname>-like Element
    </title>

    <section>
      <title>
      Definition
      </title>

      <para>
      <varname>PATH</varname>-like elements generally are used to copy an
      input file to some other location, such as within a disk image,
      into a RPM in order to be installed to a specific location on client
      systems, or into a folder within the distribution tree itself.
      A <varname>PATH</varname>-like element's text value is the
      <varname>PATH</varname> to some file <varname>$input</varname> to use,
      while the <emphasis>@destdir</emphasis>,
      <emphasis>@destname</emphasis>, and <emphasis>@mode</emphasis>
      attributes control the location, filename, and mode of the destination
      file.
      </para>

      <para>
      <application class="software">SystemBuilder</application> supports reading
      from <varname>$input</varname>s for file, http, and https locations,
      and writing to file locations. Unless otherwise specified,
      <varname>$input</varname> may refer to both file and folder locations.
      If the <varname>$input</varname> does not exist or is otherwise
      unreadable, <application class="software">SystemBuilder</application> typically
      will raise an error and exit.
      </para>
      
    </section>

    <section>
      <title>
      Specifying the destination
      </title>

      <para>
      <varname>PATH</varname>-like element have two important properties
      when determining the final destination of the
      <varname>$input</varname>. The first, <varname>$root</varname>
      may be an absolute path on the build system or a specific disk image.
      The second, <varname>$default</varname>, is the default location
      to which the <varname>$input</varname> is copied if no
      <emphasis>@destdir</emphasis> is specified. These values are combined
      in the following manner in the simplest case:
      </para>

      <programlisting>
# $basename is the basename of $input
$root/$default/$basename
      </programlisting>

      <para>
      Allows overriding the value of <varname>$basename</varname> by specifying
      a different value using the <emphasis>@destname</emphasis> attribute:
      </para>

      <programlisting>
# destname=outfile.txt
$root/$default/outfile.txt
      </programlisting>

      <para>
      Allows customizing the final location of the path by specifying a value in
      the <emphasis>@destdir</emphasis> attribute. The resulting path depends
      on whether <emphasis>@destdir</emphasis> is an absolute or relative
      path; if it is absolute, then <varname>$default</varname> is ignored;
      otherwise, <emphasis>@destdir</emphasis> is joined onto
      <varname>$default</varname> to form the final path.
      </para>

      <programlisting>
# destdir=var/www/html  (relative)
$root/$default/var/www/html/$basename
# destdir=/var/www/html (absolute)
$root/var/www/html/$basename
      </programlisting>

      <para>
      The above two concepts can be combined to allow complete control
      over the final destination of <varname>$input</varname>.
      </para>

      <programlisting>
# destdir=var/www/html,  basename=outfile.txt
$root/$default/var/www/html/outfile.txt
# destdir=/var/www/html, basename=outfile.txt
$root/var/www/html/outfile.txt
      </programlisting>

    </section>

    <section>
      <title>
      Syntax
      </title>

      <programlisting>
&lt;ELEMENTNAME [destdir=DESTDIR]
             [destname=BASENAME]
             [mode=MODE]&gt;
  <varname>$input</varname>
&lt;/ELEMENTNAME&gt;
      </programlisting>

    </section>

    <section>
      <title>
      See Also
      </title>

      <para>
      <emphasis><xref linkend="destdir" /></emphasis>,
      <emphasis><xref linkend="destname" /></emphasis>,
      <emphasis><xref linkend="mode" /></emphasis>,
      <varname><xref linkend="content-path" /></varname>,
      <varname><xref linkend="content-basename" /></varname>,
      <varname><xref linkend="content-dirname" /></varname>
      </para>
    </section>
  </section>

  <section id="requires"
           xreflabel="requires">
    <title>
    Element: requires
    </title>

    <section>
      <title>
      Definition
      </title>

      <para>
      A <varname>CAPABILITY</varname> to add to the top-level element RPM's
      requires list.
      </para>
    </section>

    <section>
      <title>
      Examples
      </title>

      <informalexample>
      <programlisting>
&lt;requires&gt;samba&lt;/requires&gt;
&lt;requires&gt;bash = 3.2.33&lt;/requires&gt;
&lt;requires&gt;rpmlib(CompressedFileNames) &amp;lt;= 3.0.4-1
          rpmlib(PayloadFilesHavePrefix) &amp;lt;= 4.0-1 
          rpmlib(VersionedDependencies) &amp;lt;= 3.0.3-1&lt;/requires&gt;
      </programlisting>
      </informalexample>

      <note>
      <para>When specifying <varname>CAPABILITY</varname> strings, remember
      to escape <constant>&lt;</constant> and <constant>&gt;</constant>
      with <constant>&amp;lt;</constant> and <constant>&amp;gt;</constant>,
      respectively.
      </para>
      </note>
    </section>

    <section>
      <title>
      See Also
      </title>

      <para>
      <varname><xref linkend="content-capability" /></varname>,
      <emphasis><xref linkend="obsoletes" /></emphasis>,
      <emphasis role="strong"><xref linkend="config" /></emphasis>,
      </para>
    </section>
  </section>
</section>
