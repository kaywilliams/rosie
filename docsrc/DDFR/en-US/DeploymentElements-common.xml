<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<section id="deployment-elements-common-model">
  <title>
  Common Model 
  </title>

  <section>
    <title>
    Definition
    </title>

    <para>
    Deployment elements - <emphasis>test-install</emphasis>,
    <emphasis>test-update</emphasis> and <emphasis>publish</emphasis> - provide
    settings to complete the following tasks:
    </para>

    <itemizedlist>
    <listitem>
    <para>
    Publish a repository to a file system location on the build machine.
    </para>
    </listitem>

    <listitem>
    <para>
    Assemble files and information related to installing and updating client
    machines using that repository.
    </para>
    </listitem>

    <listitem>
    <para>
    Optionally, execute user-provided scripts to perform
    testing, installation, updates, notification and other deployment-related
    tasks.
    </para>
    </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>
    Syntax
    </title>

    <programlisting>
[&lt;ELEMENT>
  [&lt;build-host [fqdn=BOOLEAN] [interface=TEXT]&gt;[TEXT]&lt;/build-host&gt;]
  [&lt;deploy-host&gt;TEXT&lt;/deploy-host&gt;]
  [&lt;local-dir&gt;PATH&lt;/local-dir&gt;]
  [&lt;remote-url&gt;[TEXT]&lt;/remote-url&gt;]
  [&lt;os-url&gt;[TEXT]&lt;/os-url&gt;]

  [&lt;hostname&gt;TEXT&lt;/hostname&gt;]
  [&lt;domain&gt;TEXT&lt;/domain&gt;]
  [&lt;password&gt;TEXT&lt;/password&gt;]
  
  [&lt;boot-options&gt;TEXT&lt;/boot-options&gt;]
  [&lt;kickstart&gt;TEXT&lt;/kickstart&gt;]
  [&lt;config-rpm&gt;...&lt;/config-rpm&gt;]*

  [&lt;release-rpm>
    [&lt;updates [sync=boolean] [gpgcheck=boolean] /&gt;]
  &lt;/release-rpm&gt;]

  [&lt;triggers [activate=BOOLEAN] [connect=BOOLEAN]&gt;[TEXT]&lt;/triggers&gt;]

  [&lt;script 
    id=TEXT 
    type=[pre|activate|test-triggers|delete|pre-install|install|post-install|save-triggers|update|post]
    [hostname=TEXT]
    [verbose=BOOLEAN]
    [comes-before=TEXT]
    [comes-after=TEXT]
    &gt;TEXT
  &lt;/script&gt;]*

  [&lt;input-script&gt;TEXT&lt;/input-script&gt;]*

&lt;ELEMENT/&gt;]</programlisting>
  </section>

  <section id="deployment-macros">
    <title>
    Macros
    </title>

    <para>
    Deployment elements provide the following <emphasis>module
    macros</emphasis>. 
    </para>

    <para>
    Install Macros - typically used within installation-related elements such
    as <xref linkend='kickstart'/>, and <xref linkend='install'/> and <xref
    linkend='delete'/>-type <link linkend='deployment-script'>scripts</link>.
    </para>

    <informaltable>
    <tgroup cols='2'>
    <colspec colwidth='1.5in'/>
    <tbody valign='top'>
    <row>
    <entry id='build-host-macro'>
    %{build-host}
    </entry>

    <entry>
    A hostname or IP Address for the build host machine. Described under the
    <xref linkend='build-host'/> element.
    </entry>
    </row>

    <row>
    <entry id='deploy-host-macro'>
    %{deploy-host}
    </entry>

    <entry>
    A hostname or IP Address for the deployment host machine. Described under
    the <xref linkend='deploy-host'/> element.
    </entry>
    </row>

    <row>
    <entry id='url-macro'>
    %{url}
    </entry>

    <entry>
    A full URL to the repository on the repository download server. Described
    under the <xref linkend='remote-url'/> element.
    </entry>
    </row>

    <row>
    <entry id='os-url-macro'>
    %{os-url}
    </entry>

    <entry>
    Same as %{url} described above, unless otherwise defined using the <xref
    linkend='os-url'/> element.
    </entry>
    </row>
    <row>
    <entry>
    %{hostname}
    </entry>

    <entry>
    The host name for a client machine. Takes its value from the <xref
    linkend='hostname'/> element.
    </entry>
    </row>

    <row>
    <entry>
    %{domain}
    </entry>

    <entry>
    The domain name for a client machine. Taken from the <xref
    linkend='domain'/> element. Resolves to an empty string if no domain
    is provided.
    </entry>
    </row>

    <row>
    <entry>
    %{fqdn}
    </entry>

    <entry>
    <para>
    The Fully Qualified Domain Name (FQDN) for a client machine. Determined by
    concatenating the values of the <xref linkend='hostname'/> and <xref
    linkend='domain'/> macros.
    </para>

    <para>
    Used for establishing an SSH connection to a client machine prior to
    executing scripts where the <emphasis>@ssh</emphasis> attribute is set to
    <constant>TRUE</constant>, i.e. <emphasis>post-install</emphasis>,
    <emphasis>save-trigger</emphasis>, and <emphasis>post</emphasis>-type
    scripts.
    </para>

    </entry>
    </row>

    <row>
    <entry id='password-macro'>
    %{password}
    </entry>

    <entry>
    A password for the root user of a client machine, described under the
    <xref linkend='password'/> element.
    </entry>
    </row>

    <row>
    <entry id='crypt-password-macro'>
    %{crypt-password}
    </entry>

    <entry>
    A Deploy-generated encrypted version of the %{password} macro. See
    the <xref linkend='password'/> element for additional information.
    </entry>
    </row>

    <row>
    <entry id='boot-options-macro'>
    %{boot-options}
    </entry>

    <entry>
    Options to be provided to the installer during system boot. Corresponds to
    the value of the <xref linkend='boot-options'/> element.
    </entry>
    </row>

    <row>
    <entry id='custom-pkgs-macro'>
    %{custom-pkgs}
    </entry>

    <entry>
    A space separated list of names for packages created during the build
    process using <xref linkend='config-rpm'/> or <xref linkend='srpmbuild'/>
    elements.  Typically used for performing package testing. See the
    <filename>test-remove-custom-pkgs.xml</filename> template for an example.
    </entry>
    </row>
    </tbody>
    </tgroup>
    </informaltable>

    <para>
    Trigger Macros - typically used within <xref linkend='save-triggers'/> and
    <xref linkend='test-triggers'/>-type scripts. See also the <xref
    linkend='triggers'/> element.
    </para>

    <informaltable>
    <tgroup cols='2'>
    <colspec colwidth='1.5in'/>
    <tbody valign='top'>
    <row>
    <entry>
    %{trigger-file}
    </entry>

    <entry>
    PATH to a file on client machines where trigger
    values are stored.
    </entry>
    </row>

    <row>
    <entry>
    %{triggers}
    </entry>

    <entry>
    List of triggers to be evaluated in determining whether Deploy
    should execute installation-related deployment scripts.  Takes its value
    from the <xref linkend='triggers'/> element.
    </entry>
    </row>

    <row>
    <entry>%{release_pkg_csum}</entry>
    <entry>MD5 hash of release number for release-rpm. See <xref
    linkend='release-rpm'/> for information on the release-rpm.</entry>
    </row>

    <row>
    <entry>%{custom_pkgs_csum}</entry>
    <entry>MD5 hash of release numbers for all custom rpms including <xref
    linkend='config-rpms'/> and <xref linkend='srpmbuild'/> rpms.
    </entry>
    </row>

    <row>
    <entry>%{kickstart_csum}</entry>
    <entry>MD5 hash of current kickstart file.</entry>
    </row>

    <row>
    <entry>%{treeinfo_csum}</entry>
    <entry>MD5 hash of the treeinfo file for the base operating system
    repository.</entry>
    </row>

    <row>
    <entry>%{install_scripts_csum}</entry>
    <entry>
    MD5 hash of all current <constant>install</constant>-type scripts.
    </entry>
    </row>

    <row>
    <entry>%{post_install_scripts_csum}</entry>
    <entry>
    MD5 hash of all current <constant>post-install</constant>-type scripts.
    </entry>
    </row>
    </tbody>
    </tgroup>
    </informaltable>

    <para>
    See <xref linkend='macros'/> for more information on macros.
    </para>
  </section>

  <section>
    <title>
    Elements
    </title>

    <variablelist>
    <varlistentry id='build-host'>
      <term>
      build-host
      </term>

      <listitem>
      <para>
      Hostname or ipaddress of the build machine. Used in calculating a
      <xref linkend='remote-url'/> for accessing repository content.
      </para>

      <para>
      This element is optional. The default value is computed using the values
      of the <emphasis>@interface</emphasis> and <emphasis>@fqdn</emphasis>
      attributes.
      </para>

      <para>
      This element accepts two attributes:
      <emphasis>@interface</emphasis> and
      <emphasis>@fqdn</emphasis>.
      </para>

      <para>
      <emphasis>@interface</emphasis>: TEXT value specifying the network
      interface name, e.g. "eth1", from which to obtain the
      <varname>%{build-host}</varname> of the repository.  This attribute only
      has an effect if <emphasis>remote-url/@fqdn</emphasis> is
      <constant>FALSE</constant>.
      </para>
      
      <para>
      This attribute is optional. By default, Deploy uses the first
      active, non-loopback network interface.
      </para>

      <para>
      <emphasis>@fqdn</emphasis>: BOOLEAN value that determines whether
      <application class="software">Deploy</application> uses the build
      machine's fully qualified domain name or IP address in the
      automatically-computed remote-url.
      </para>
      
      <para>This attribute is optional. The default value is
      <constant>FALSE</constant>.
      </para>

      <para>
      See <xref linkend="content-boolean"/> for information on BOOLEAN values.
      </para>

      <para>
      <emphasis role='bold'>Examples</emphasis>
      </para>

      <para>
      In the following examples, the build machine's fully qualified domain
      name is <filename>buildserver.company.com</filename> and the IP addresses
      of "eth0" and "eth1" are 10.10.1.105 and 192.168.0.10, respectively.
      </para>
      
      <para>
      <emphasis role='bold'>Example 1</emphasis> - no build-host element
      specified. If no build-host element is specified, the value is
      automatically computed using the IP address of the first active network
      interface ("eth0"). The resulting value is -
      </para>
      
      <para>
      <filename>10.10.1.105</filename>
      </para>

      <para>
      <emphasis role='bold'>Example 2</emphasis> - automatic build-host 
      computation using FQDN.  In this example, the build-host is automatically
      computed using the FQDN of the build machine.
      </para>

      <informalexample>
      <programlisting>
&lt;build-host fqdn="true" /&gt;</programlisting>
      </informalexample>

      <para>
      The resulting value is -
      </para>
 
      <para>
      <filename>buildserver.company.com</filename>
      </para>

      <para>
      <emphasis role='bold'>Example 3</emphasis> - automatic build-host 
      computation using a specific interface.  In this example, the build-host
      is automatically computed using the IP address of the specified
      interface, "eth1". 
      </para>

      <informalexample>
      <programlisting>
&lt;build-host interface="eth1"/&gt;</programlisting>
      </informalexample>

      <para>
      The resulting value is -
      </para>
 
      <para>
      <filename>192.168.0.10</filename>
      </para>

      <para>
      <emphasis role='bold'>Example 4</emphasis> - manual configuration of
      build-host.  In some cases, it is desirable to specify build-host
      information manually. For example, the build host may be accessible on
      both local and public networks, but under different names. To use the
      public network name, you must specify it manually.
      </para>
     
      <para>
      As another example, the repository may be created on the build machine,
      but later moved to a web server, or web server farm, for final
      publication. In this case, the remote-url must be  manually specified.
      </para>

      <informalexample>
      <programlisting>
&lt;build-host&gt;repos.company.com&lt;/build-host&gt;</programlisting>
      </informalexample>
      </listitem>
    </varlistentry>

    <varlistentry id='deploy-host'>
      <term>
      deploy-host
      </term>

      <listitem>
      <para>
      TEXT value specifying the hostname or ipaddress of the deployment host.
      This host is used by Deploy for running some deployment scripts.
      See the <xref linkend='script-hostname'/> attribute of the <xref
      linkend='deployment-script'/> element for additional information.
      </para>

      <para>
      This element is optional. The default value is the hostname or ipaddress
      of the build host as described under <xref linkend='build-host'/>.
      </para>

      <para>
      <emphasis role='bold'>Example</emphasis>
      </para>

      <para>
      The section below shows several valid values for the deploy-host element.
      </para>
      
      <informalexample>
      <programlisting>
&lt;deploy-host>10.10.1.106&lt;/deploy-host&gt;
&lt;deploy-host>deploy-host&lt;/deploy-host&gt;
&lt;deploy-host>deploy-host.company.com&lt;/deploy-host&gt;</programlisting>
      </informalexample>

      </listitem>
    </varlistentry>

    <varlistentry id="local-dir">
      <term>
      local-dir
      </term>

      <listitem>
      <para>
      PATH to a folder where Deploy will publish content. For content to be
      accessible on the web, the directory must be in the build machine’s local
      webroot, e.g. the Apache <varname>DocumentRoot</varname>.
      </para>

      <para>
      To prevent tampering with repository content, you should ensure that only
      trusted users and groups have <emphasis>write</emphasis> access to the
      <emphasis>local-dir</emphasis> folder.
      </para>

      <para>
      This element is optional. The default values are as follows, where
      %{type} is the value of the <xref linkend='main-type'/> element:
      </para>

      <informaltable>
      <tgroup cols='2'>
      <colspec colwidth='1in'/>
      <tbody valign='top'>
      <row>
      <entry><emphasis role='strong'>Module</emphasis></entry>
      <entry><emphasis role='strong'>Default Value</emphasis></entry>
      </row>
      <row>
      <entry>publish</entry>
      <entry>
      <filename>/var/www/html/deploy/%{type}s</filename>
      </entry>
      </row>
      <row>
      <entry>test-install</entry>
      <entry>
      <filename>/var/www/html/deploy/%{type}s/test-install</filename>
      </entry>
      </row>
      <row>
      <entry>test-update</entry>
      <entry>
      <filename>/var/www/html/deploy/%{type}s/test-update</filename>
      </entry>
      </row>
      </tbody>
      </tgroup>
      </informaltable>

      <para>
      See <xref linkend='content-path'/> for information on the PATH element.
      </para>

      <para>
      <emphasis role='bold'>Example</emphasis>
      </para>

      <informalexample>
      <programlisting>
&lt;local-dir&gt;/my/web/root/deploy/systems/&lt;/local-dir&gt;</programlisting>
      </informalexample>

      </listitem>
    </varlistentry>

    <varlistentry id='remote-url'>
      <term>
      remote-url
      </term>

      <listitem>
      <para>
      URL to a directory from which client machines can access repository
      content.
      </para>

      <para>
      This element is optional. The default values are listed in the following
      table, where <varname>%{build-host}</varname> is taken from the value of
      the <xref linkend='build-host'/> element and  %{type} is the value of
      <xref linkend='main-type'/>. 
      </para>

      <para>
      See <xref linkend='content-url'/> for information on URL values.
      </para>

      <informaltable>
      <tgroup cols='2'>
      <colspec colwidth='1in'/>
      <tbody valign='top'>
      <row>
      <entry><emphasis role='strong'>Module</emphasis></entry>
      <entry><emphasis role='strong'>Default Value</emphasis></entry>
      </row>
      <row>
      <entry>publish</entry>
      <entry>
      <filename>http://%{build-host}/deploy/%{type}s</filename>
      </entry>
      </row>
      <row>
      <entry>test-install</entry>
      <entry>
      <filename>http://%{build-host}/deploy/%{type}s/test-install</filename>
      </entry>
      </row>
      <row>
      <entry>test-update</entry>
      <entry>
      <filename>http://%{build-host}/deploy/%{type}s/test-update</filename>
      </entry>
      </row>
      </tbody>
      </tgroup>
      </informaltable>
      <para>
      The value of the remote-url is also used in determining the
      <varname>%{url}</varname> module macro value. The url macro provides the
      complete web path to the repository. The value of the url macro is as
      follows, where <varname>$remote-url</varname> is the value from the table
      above:
      </para>

      <informalexample>
      <programlisting>
$remote-url/%{id}</programlisting>
      </informalexample>

      <para>
      The %{url} macro is commonly used in <xref linkend='deployment-script'/>
      elements for <emphasis>install</emphasis>-type scripts. See the script
      element for an example.
      </para>

      <para>
      As a security measure, to prevent man-in-the-middle style web server
      attacks, you may wish to configure the <emphasis>remote-url</emphasis>
      for SSL-only access.  See your web server documentation for information on
      configuring SSL. See also Example 5 below for information on specifying
      an https remote-url. 
      </para>

      <para>
      This element is optional.
      </para>

      <para>
      <emphasis role='bold'>Example</emphasis> - manual configuration using
      the <link linkend='deployment-macros'>%{build-host}</link> module macro.
      In this example, the repository is created on the build machine, but will
      be accessed over 'https' rather than the default http protocol. 
      </para>

      <informalexample>
      <programlisting>
&lt;remote-url fqdn="true"&gt;https://%{build-host}/deploy/systems/&lt;/remote-url&gt;</programlisting>
      </informalexample>

      <para>
      Given a <link linkend='deployment-macros'>%{build-host}</link> value of
      "repos.company.com" and a repository <varname>%{id}</varname> of
      "samba-server-6-i386",
      the resulting %{url} macro value is -
      </para>
 
      <para>
      <filename>https://repos.company.com/deploy/systems/samba-server-6-i386</filename>
      </para>
      </listitem>
    </varlistentry>

    <varlistentry id='os-url'>
    <term>os-url</term>

    <listitem>
    <para>
    Text value specifing a location for accessing an operating system
    installation tree. 
    </para>

    <para>
    This element is optional. The default value is %{url} as described
    under <xref linkend='remote-url'/>.
    </para>
    </listitem>

    </varlistentry>

    <varlistentry id='hostname'>
    <term>hostname</term>

    <listitem>
    <para>
    TEXT value providing the name of a host, e.g.
    <emphasis>samba-server</emphasis>. Allowed characters include a-z, 0-9 and
    '-'. This value is provided as the module macro <link
    linkend='deployment-macros'>%{hostname}</link>.
    </para>

    <para>
    This element is optional. The default values are shown in the table below,
    where ID is the value of the %{id} macro, with underscores ('_')
    automatically converted to hyphens ('_') and uppercase characters converted
    to lowercase, e.g. 'MyServer-centos-6-x86_64' is converted to
    'myserver-centos-6-x86-64':
    </para>
    
    <informaltable>
    <tgroup cols='2'>
    <colspec colwidth='10%'/>
    <tbody valign='top'>
    <row>
    <entry><emphasis role='strong'>Module</emphasis></entry>
    <entry><emphasis role='strong'>Default Value</emphasis></entry>
    </row>
    <row>
    <entry>publish</entry>
    <entry><varname>ID</varname></entry>
    </row>
    <row>
    <entry>test-install</entry>
    <entry><varname>ID</varname>-test-install</entry>
    </row>
    <row>
    <entry>test-update</entry>
    <entry><varname>ID</varname>-test-update</entry>
    </row>
    </tbody>
    </tgroup>
    </informaltable>

    </listitem>
    </varlistentry>

    <varlistentry id='domain'>
    <term>domain</term>

    <listitem>
    <para>
    TEXT value providing the domain for a client
    machine, e.g. <emphasis>local</emphasis> or
    <emphasis>company.com</emphasis>.  This value is provided as the module
    macro <link linkend='deployment-macros'>%{domain}</link>.
    </para>

    <para>
    This element is optional. The default value is an empty string. A period
    character "." is prefixed to the provided text if it does not exist, e.g.
    <emphasis>local</emphasis> is converted to <emphasis>.local</emphasis>.
    </para>
    
    </listitem>
    </varlistentry>

    <varlistentry id='password'>
    <term>password</term>

    <listitem>
    <para>
    TEXT value to be used as the root user password for the client machine.
    This value is provided as a module macro <link
    linkend='deployment-macros'>%{password}</link>.
    </para>
    
    <para>
    This element is optional. If not provided, a random password is
    automatically generated. The generated password is between 8 and 14 
    characters and contains at least one each of a lowercase character, an
    uppercase character and a digit. The generated password is stored in the
    data file. See <xref linkend="datfile"/> for information on the
    data file. 
    </para>

    <para>
    Deploy also generates an encrypted version of the password and makes
    it available as the module macro <link
    linkend='deployment-macros'>%{crypt-password}</link>. The encrypted
    password is recommended for use in the <emphasis>kickstart</emphasis>
    element. See the <xref linkend='kickstart'/> element below for an example.
    The encrypted password is also stored in the data file.
    </para>

    </listitem>
    </varlistentry>
  
    <varlistentry id="boot-options">
      <term>
      boot-options
      </term>

      <listitem>
      <para>
      TEXT value specifying install boot environment
      variables, also known as kernel boot arguments, for use during client
      machine installation. Ignored if the <xref linkend="main-type"/> element
      is set to <constant>package</constant>.
      </para>
     
      <para>
      Boot options are typically used in combination with a kickstart file to
      automate client machine installations. See the <xref
      linkend='kickstart'/> element below for more information.
      </para>

      <para>
      The <emphasis>boot-options</emphasis> element's text value should be a
      space-separated list of kernel arguments.  For more information on
      available boot options, see the chapter on <emphasis>Boot
      Options</emphasis> in the <emphasis>Red Hat Enterprise Linux Installation
      Guide</emphasis>
      </para>
      
      <para>
      Provided as a module macro, <link
      linkend="deployment-macros">%{boot-options}</link>, for use within
      deployment element content, primarily <constant>install</constant>-type
      scripts. See the <xref linkend="deployment-script"/> element below for
      more information.
      </para>

      <para>
      Also used by Deploy during the creation of installation images including
      boot.iso and images created by the ISO module. See <xref linkend="iso"/>
      for more information on the ISO module.
      </para>

      <para>
      Boot-options is an optional element. The default value is
      <constant>"lang=en_US keymap=us"</constant>.
      </para>

      <informalexample>
      <programlisting>     
&lt;boot-options&gt;lang=el_GR keymap=gr ksdevice=eth0&lt;/boot-options&gt;</programlisting>
      </informalexample>

      </listitem>
    </varlistentry>

    <varlistentry id="kickstart">
    <term>
    kickstart
    </term>
  
    <listitem>
    <para>
    Specifies the TEXT of a kickstart file. Ignored
    if the <xref linkend="main-type"/> element is set to
    <constant>package</constant>.
    </para>
    
    <para>
    A kickstart file allows automating system installation by providing answers
    to install-time questions such as selection of language, network
    configuration, keyboard, file system configuration, mouse, timezone and
    root password.
    </para>

    <para>
    Deploy makes the kickstart available as a file
    named <filename>ks.cfg</filename> in the repository publish folder, e.g.
    <filename>http://server.company.com/deploy/systems/samba-server-6-i386/ks.cfg</filename>.
    It also includes the kickstart in all ISO images including boot.iso. 
    </para>
  
    <para>
    Complete information on creating kickstart files is available from the
    <emphasis>Red Hat Enterprise Linux Installation Guide</emphasis>, available
    from the Red Hat website. See the chapter on <emphasis>Kickstart
    Installations</emphasis>.  Several items of relevance when using kickstart
    files with Deploy are noted below.
    </para>

    <para>
    <emphasis role='bold'>%packages section -</emphasis> For Deploy-created
    repositories, all packages belong to a single group named
    <emphasis>core</emphasis>. This group can be specified using a packages
    section as follows:
    </para>

    <para>
    CentOS and RHEL version 5
    </para>
    <informalexample>
    <programlisting>
%packages --nobase
@core
    </programlisting>
    </informalexample>

    <para>
    CentOS and RHEL version 6
    </para>
    <informalexample>
    <programlisting>
%packages --nobase
@core
%end
    </programlisting>
    </informalexample>

    <para>
    <emphasis role='bold'>firewall option and %post sections - </emphasis>
    Where possible, avoid using the <emphasis>firewall</emphasis> and
    <emphasis>%post</emphasis> kickstart options. They provide configuration
    that is applied <emphasis>only</emphasis> during client installation.
    Instead, use config-rpms to apply client configuration. This ensures
    uniform results whether the client is installed from scratch, or merely
    updated.  See the <filename>httpd-config.xml</filename> <link
    linkend='templates'>template</link> for an example of firewall
    configuration using a config-rpm.
    </para>

    <para>
    <emphasis role='bold'><emphasis>%end</emphasis> delimiters - </emphasis>
    For CentOS and RHEL version 6, an "%end" delimiter is required after
    <emphasis>%packages</emphasis> and <emphasis>%post</emphasis> sections. In
    version 5, however, the <emphasis>%end</emphasis> delimiter is not
    supported and will cause an error.  To create kickstart elements that are
    compatible with either version, you can use macros as shown in the example
    below: 
    </para>

    <informalexample>
    <programlisting>
%packages --nobase
@core
%{end-%{version}}
&lt;macro id='end-5'>&lt;/macro>
&lt;macro id='end-6'>%end&lt;/macro>
    </programlisting>
    </informalexample>
 
    <para>
    Kickstart is an optional element. If not provided, users will be propted
    for information at the time of client installation.
    </para>

    <para>
    <emphasis role='bold'>Example</emphasis> - The following example shows a
    file named ks.xml which is included in the <link
    linkend='templates'>templates</link> folder. The template provides a
    kickstart file with all the information required to fully automate a client
    machine installation. It uses <varname>%{fqdn}</varname> and
    <varname>%{crypt-password}</varname> <link
    linkend='deployment-macros'>module macros</link>.
    </para>

    <informalexample>
    <programlisting>
<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href='../../../../../share/deploy/templates/common/ks.xml' parse='text'/></programlisting>
    </informalexample>

    <para>
    The template can be included in a definition using an <link linkend='xincludes'>XInclude</link> such as the following:
    </para>
    <informalexample>
    <programlisting>
&lt;xi:include href="/%{templates-dir}/common/ks.xml"/&gt;
    </programlisting>
    </informalexample>

    </listitem>
    </varlistentry>

    <varlistentry id='deploy-config-rpm'>
    <term>config-rpm</term>

    <listitem>
    <para>
    <xref linkend='config-rpm'/> element as described in <xref
    linkend="config-rpms"/>. The config-rpm element is supported within
    deployment elements to facilitate creation and distribution of deployment
    templates. See <xref linkend="templates"/> for more information on
    templates.
    </para>

    <para>
    This element is optional. Multiple elements are allowed.
    </para>

    <para>
    <emphasis role='strong'>Examples</emphasis>
    </para>

    <para>
    <emphasis role='bold'>Example 1</emphasis> - The following example shows
    the text of a config-rpm template. The template defines an RPM with the id
    <emphasis>deploy-ssh-config</emphasis>. The RPM provides client
    configuration needed for the build machine to establish SSH connections
    with the client and execute deployment scripts.  See the <xref
    linkend='script-hostname'/> attribute of the <xref
    linkend='deployment-script'/> element for additional information.
    </para>

    <para>
    On a system with Deploy installed, this config-rpm template can be
    found as a file named <filename>ssh-config.xml</filename> in the examples
    folder at <filename>/usr/share/deploy/templates/deploy</filename>.
    </para>

    <informalexample>
    <programlisting>
<xi:include href='../../../../../share/deploy/templates/common/ssh-config.xml' parse='text' xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>
    </informalexample>
  
    <para>
    <emphasis role='bold'>Example 2</emphasis> - The example below shows
    including content from the <filename>ssh-config.xml</filename> template,
    shown above, within a definition using XInclude.
    </para>

    <informalexample>
    <programlisting>
&lt;xi:include href="%{templates-dir}/common/ssh-config.xml"/&gt;</programlisting>
    </informalexample>

    </listitem>
    </varlistentry>

    <varlistentry id="release-rpm">
    <term>release-rpm</term>
    
    <listitem>
    <para>
    Creates an RPM used to install and update repository-specific YUM
    configuration on client machines. Also makes a YUM configuration file
    available for download directly from the repository publish folder.
    </para>
   
    <para>
    This element is used when defined within the publish element. It is
    allowed within the test-install and test-update elements, but silently
    ignored.
    </para>

    <itemizedlist>
    <listitem>
    <para>
    The RPM created by the <emphasis>release-rpm</emphasis> event is named as
    follows, where %{name} is a the value of the <xref linkend='main-name'/>
    element:
    </para>

    <para>
    <synopsis>%{name}-release</synopsis>
    </para>

    <para>
    See the <xref linkend='main-name'/> element for information on
    <emphasis>%{name}</emphasis>.
    </para>

    <para>
    The file name of the release-rpm is in the following format, where %{name}
    and %{version} are taken from the corresponding <xref linkend='main-name'/>
    and <xref linkend="main-version"/> elements, RELEASE is taken from the data
    file (see <xref linkend="datfile" />), and DIST is an identifier for the
    base operating system distribution.
    </para>

    <para><synopsis>
    <filename>%{name}-release-%{version}-RELEASE.DIST.noarch.rpm</filename></synopsis>
    </para>

    <para>
    For example, given a repository with the name "samba-server" and
    version "5", the first time Deploy creates the repository, the
    release-rpm will have the following file name:
    </para>

    <para><synopsis>
    <filename>samba-server-release-6-1.el6.noarch.rpm</filename></synopsis>
    </para>

    <para>
    The release number "1" will be written to the data file.
    When configuration changes in the future, e.g. when the sync is
    enabled or disabled, Deploy will increment the release number
    by 1, create a new release-rpm (in this case
    "samba-server-release-6-2.noarch.rpm"), and store the new release
    number ("2") in the data file. The incremented version
    number allows installed client machines to determine that a new
    release-rpm is available for download and installation.
    </para>
    </listitem>

    <listitem>
    <para>
    The release-rpm event also makes a YUM repository configuration file, named
    <filename>repo.conf</filename>, available from the repository publish
    folder, e.g.
    <filename>http://server.company.com/deploy/systems/samba-server-6-i386/repo.conf</filename>.
    This file can be used by automated processes in situations where it is
    undesirable to install the release-rpm. This is most common when using YUM
    to install repository packages in a <command>chroot</command> environment,
    such as when creating system images.
    </para>
    </listitem>
    </itemizedlist>

    <variablelist>
    <varlistentry id="release-rpm-updates">
      <term>
      updates
      </term>

      <listitem>
      <para>
      Controls inclusion of the <application class="software">YUM</application>
      sync plugin; also controls whether gpgcheck is performed. 
      </para>

      <para>
      Accepts two attributes,
      <emphasis>@sync</emphasis> and
      <emphasis>@gpgcheck</emphasis>.
      </para>

      <para>
      <emphasis>@sync</emphasis>: BOOLEAN value indicating
      whether to include the <application
      class="software">Deploy</application>-provided <application
      class="software">YUM</application> sync plugin in the config RPM. The
      sync plugin overrides <application class="software">YUM</application>'s
      default behavior 1) to disable all repositories other than the
      system repository and 2) to provide a <emphasis>sync</emphasis>
      argument that allows adding <emphasis>and removing</emphasis> installed
      packages on client machines in alignment with available packages in
      the system repository. When the value of <xref linkend="main-type"/>
      is "system", the default value is <constant>TRUE</constant>. When the
      value of <xref linkend="main-type"/> is "package", the sync attribute
      is ignored.
      </para>

      <para>
      <emphasis>@gpgcheck</emphasis>: BOOLEAN value
      indicating whether packages should be checked for valid GPG signatures.
      This value controls whether Deploy performs gpgcheck when
      creating the repository. It also controls whether YUM checks
      packages from the repository prior to performing client machine 
      updates. The default value is <constant>TRUE</constant>.
      </para>

      <para>
      See <xref linkend="content-boolean"/> for information on BOOLEAN values.
      </para>

      </listitem>
    </varlistentry>
    </variablelist>

    <para>
    Examples
    </para>

    <informalexample>
    <programlisting>
&lt;release-rpm&gt;

  &lt;!-- exclude the yum sync plugin and disable gpgcheck--&gt;
  &lt;updates sync="false" gpgcheck="false"/&gt;

&lt;/release-rpm&gt;</programlisting>
    </informalexample>
    </listitem>
    </varlistentry>

    <varlistentry id='triggers'>
    <term>triggers</term>

    <listitem>
      <para>
      TEXT value providing a space-separated list of
      trigger names.  The value of this element is made available to <xref
      linkend='test-triggers'/>-type scripts via the <link
      linkend="deployment-macros">%{triggers}</link> module macro.
      </para>

      <note>
      <para>
      Deploy executes installation-related scripts
      (<xref linkend='delete'/>, <xref linkend='install'/>, <xref
      linkend='post-install'/> and <xref linkend='save-triggers'/>) only when
      one of the following conditions is true.
      </para>

      <orderedlist>
      <listitem>
      <para>
      An <xref linkend='activate'/>-type script returns a non-zero
      exit status.
      </para>
      </listitem>

      <listitem>
      <para>
      An attempt to connect to the client machine identified by the <link
      linkend="deployment-macros">%{fqdn}</link> fails.
      </para>
      </listitem>

      <listitem>
      <para>
      A <xref linkend='test-triggers'/>-type script fails returns a non-zero
      exit status. Test-triggers-type scripts make use of the macros described
      under <emphasis>Trigger Macros</emphasis> in <xref
      linkend='deployment-macros'/>. See <xref
      linkend='test-triggers'/> for an example.
      </para>
      </listitem>
      </orderedlist>

      <para>
      The triggers element and its attributes, in conjunction with trigger
      macros and save-triggers and test-triggers-type scripts, provide control
      over this behavior. 
      </para>
      </note>

      <para>
      This element is optional.
      </para>
     
      <para>
      The default value varies based on the parent element:
      </para>

      <itemizedlist>
      <listitem>
      <para>
      For <emphasis>publish</emphasis> and <emphasis>test-update</emphasis>,
      the default value is an empty string, "".
      </para>
      </listitem>

      <listitem>
      <para>
      For <emphasis>test-install</emphasis>, the default value is "
      <constant>release_rpm config_rpms kickstart treeinfo install_scripts
      post_install_scripts</constant>".
      </para>
      </listitem>
      </itemizedlist>

      <para>
      <emphasis role='strong'>Attributes</emphasis>
      </para>

      <variablelist>
      <varlistentry id='trigger-activate'>
      <term>@activate</term>
      <listitem>
      <para>
      BOOLEAN value indicating whether Deploy
      should execute install-related scripts if an <xref
      linkend='activate'/>-type script returns a non-zero exit status.
      </para>

      <para>
      This is an optional attribute. The default value is
      <constant>TRUE</constant>.
      </para>
      
      <para>
      See <xref linkend="content-boolean"/> for information on BOOLEAN values.
      </para>

      </listitem>
      </varlistentry>

      <varlistentry id='trigger-connect'>
      <term>@connect</term>
      <listitem>
      <para>
      BOOLEAN value indicating whether Deploy should execute install-related
      scripts if an SSH connection to the client machine identified by <link
      linkend='deployment-macros'>%{fqdn}</link> cannot be established.  
      </para>

      <para>
      This is an optional attribute. The default value is
      <constant>TRUE</constant>.
      </para>

      <para>
      See <xref linkend="content-boolean"/> for information on BOOLEAN values.
      </para>

      </listitem>
      </varlistentry>
      </variablelist>


      </listitem>
    </varlistentry>

    <varlistentry id="deployment-script">
      <term>
      script
      </term>

      <listitem>
      <para>
      TEXT of a script used to perform installation
      and maintenance tasks on a client machine.
      </para>

      <para>
      Deployment scripts can be written in any shell scripting language.  
      </para>

      <para>
      This element is optional. Multiple elements are allowed.
      </para>

      <para>
      The script element allows six attributes: <xref linkend='script-id'/>, <xref linkend='script-type'/>, <xref linkend='script-hostname'/>, <xref linkend='script-verbose'/>, <xref linkend='script-comes-before'/> and <xref linkend='script-comes-after'/>.
      </para>

      <para>
      <emphasis role='strong'>Attributes</emphasis>
      </para>

      <variablelist>
      <varlistentry id="script-id">
      <term>@id</term>
      <listitem>
      <para>
      TEXT value serving as an identifier for the script.
      </para>

      <para>
      This attribute is required.
      </para>
      </listitem>
      </varlistentry>

      <varlistentry id="script-type">
      <term>@type</term>
      <listitem>
      <para>
      Type of the script. Valid values are <xref linkend='pre'/>, <xref
      linkend='activate'/>, <xref linkend='test-triggers'/>, <xref
      linkend='delete'/>, <xref linkend='pre-install'/>, <xref
      linkend='install'/>, <xref linkend="post-install"/>, <xref
      linkend='save-triggers'/>, <xref linkend="update"/> and <xref
      linkend='post'/>:
      </para>

      <variablelist>
      <varlistentry id='pre'>
      <term>
      pre
      </term>

      <listitem>
      <para>
      Performs tasks that are required prior to running other scripts.
      </para>
      <para>
      <emphasis role='bold'>Example</emphasis> - This example shows a file
      named <filename>create-guestname.xml</filename> which is included in the
      template folder at
      <filename>/usr/share/deploy/templates/libvirt</filename>. See
      <xref linkend='templates'/> for more information on templates.
      </para>
      
      <para>
      The template contains the text of a shell script that creates
      and saves guestnames, which are limited to 50 characters for libvirt
      machines. Because it runs as a pre script, the created guestnames are
      available to other scripts including activate, delete and install. 
      </para>

      <para>
      The template makes use of the <emphasis>%{module}</emphasis> run-time
      macro, described under <xref linkend='macros'/>, to create a unique
      guestname for each deployment module, e.g. test-install, test-update and
      publish.
      </para>

      <informalexample>
      <programlisting>
<xi:include href='../../../../../share/deploy/templates/libvirt/create-guestname.xml' parse='text' xmlns:xi="http://www.w3.org/2001/XInclude"/> </programlisting>
      </informalexample>

      <para>
      The template can be included in a definition using an <link
      linkend="xincludes">XInclude</link> such as the following:
      </para>
      <informalexample>
      <programlisting>
&lt;xi:include href="%{templates-dir}/libvirt/create-guestname.xml"/></programlisting>
      </informalexample>

      </listitem>
      </varlistentry>

      <varlistentry id='activate'>
      <term>
      activate
      </term>

      <listitem>
      <para>
      Activates one or more client machines, or determines if client 
      machines are active. Must return a non-zero exit status if
      activation fails.
      </para>
      <para>
      <emphasis role='bold'>Example</emphasis> - This example shows a file
      named <filename>activate.xml</filename> which is included in the
      template folder at
      <filename>/usr/share/deploy/templates/libvirt</filename>. See
      <xref linkend='templates'/> for more information on templates.
      </para>
      
      <para>
      The template contains the text of a python script. The script attempts to
      establish a connection to a virtual machine on the build machine. The
      virtual machine is identified using the <link
      linkend='deployment-macros'>%{fqdn}</link> macro. If the virtual machine
      does not exist or cannot be activated, the script returns an exit status
      of '1'.
      </para>

      <informalexample>
      <programlisting>
<xi:include href='../../../../../share/deploy/templates/libvirt/activate.xml' parse='text' xmlns:xi="http://www.w3.org/2001/XInclude"/> </programlisting>
      </informalexample>

      <para>
      The template can be included in a definition using an <link
      linkend="xincludes">XInclude</link> such as the following:
      </para>
      <informalexample>
      <programlisting>
&lt;xi:include href="%{templates-dir}/libvirt/activate.xml"/></programlisting>
      </informalexample>

      </listitem>
    </varlistentry>

    <varlistentry id='test-triggers'>
      <term>test-triggers</term>
      <listitem>
      <para>
      Tests current trigger values against prior trigger values. Must return a
      non-zero exit status if a trigger has changed. See also the
      <xref linkend='triggers'/> element.
      </para>

      <para>
      Deploy makes a number of macros available to assist with
      <emphasis> test-trigger</emphasis> script operation. These are listed in
      <xref linkend='deployment-macros'/>, under
      the label <emphasis>Trigger Macros</emphasis>. The example below shows
      how they can be used in a <emphasis>test-triggers</emphasis> script.
      </para>

      <para>
      <emphasis role='bold'>Example</emphasis> - This example shows a file
      named <filename>test-triggers.xml</filename> which is included in the
      templates folder at
      <filename>/usr/share/deploy/templates/common</filename>. See <xref
      linkend='templates'/> for more information on templates.
      </para>
     
      <para>
      The template first reads a file (identified by the %{trigger-file} macro)
      of saved trigger values.  Using a list of triggers identified by the
      %{triggers} macro, it then attempts to compare current trigger values to
      saved trigger values. Deploy calculates a number of current
      trigger values and makes them available via the %{release_rpm},
      %{config_rpms}, %{kickstart}, %{treeinfo}, %{install_scripts} and
      %{post_install_scripts} macros.  If any of the current triggers differs
      from the corresponding saved trigger, the script returns an exit status
      of '1'.
      </para>

      <informalexample>
      <programlisting>
<xi:include href='../../../../../share/deploy/templates/common/test-triggers.xml' parse='text' xmlns:xi="http://www.w3.org/2001/XInclude"/> </programlisting>
      </informalexample>

      <para>
      The template can be included in a definition using an <link
      linkend="xincludes">XInclude</link> such as the following:
      </para>
      <informalexample>
      <programlisting>
&lt;xi:include href="%{templates-dir}/common/test-triggers.xml"/></programlisting>
      </informalexample>
      </listitem>
    </varlistentry>

    <varlistentry id='delete'>
      <term>
      delete
      </term>

      <listitem>
      <para>
      Deletes or decommissions one or more client machines in preparation
      for system installation. Must return a non-zero exit status if
      machine deletion fails. Commonly used with the
      <link linkend='deployment-macros'>%{fqdn}</link> module macro.
      </para>

      <para>
      <emphasis role='bold'>Example</emphasis> - This example shows a file
      named <filename>delete.xml</filename> which is included in the
      templates folder at
      <filename>/usr/share/deploy/templates/libvirt</filename>. See <xref
      linkend='templates'/> for more information on templates.
      </para>

      <para>
      In this example, a bash script is used to destroy and undefine a virtual
      machine specified using the <varname>%{fqdn}</varname> module macro. The
      command <command>set -e</command> is used at the beginning of the script
      to indicate that if any command in the script fails, the script should
      return a non-zero exit status.  Typically bash scripts return the exit
      status of the last command executed in the script.
      </para>

      <informalexample>
      <programlisting><xi:include href='../../../../../share/deploy/templates/libvirt/delete.xml' parse='text' xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>
      </informalexample>

      <para>
      The template can be included in a definition using an <link
      linkend="xincludes">XInclude</link> such as the following:
      </para>

      <informalexample>
      <programlisting>
&lt;xi:include href="%{templates-dir}/libvirt/delete.xml"/></programlisting>
      </informalexample>
      </listitem>
    </varlistentry>

      <varlistentry id='pre-install'>
      <term>
      pre-install
      </term>

      <listitem>
      <para>
      Performs tasks that are required prior to completing client installation.
      </para>

      <para>
      <emphasis role='bold'>Example</emphasis> - This example shows a file
      named <filename>create-ssh-keys.xml</filename> which is included in the
      template folder at
      <filename>/usr/share/deploy/templates/common</filename>. See
      <xref linkend='templates'/> for more information on templates.
      </para>
      
      <para>
      The template contains the text of a shell script that creates and saves
      ssh keys. This script type is set as <emphasis>pre-install</emphasis> so
      that the created keys can be used by install-type scripts for configuring
      ssh to the client machine. 
      </para>

      <informalexample>
      <programlisting>
<xi:include href='../../../../../share/deploy/templates/common/create-ssh-keys.xml' parse='text' xmlns:xi="http://www.w3.org/2001/XInclude"/> </programlisting>
      </informalexample>

      <para>
      The template can be included in a definition using an <link
      linkend="xincludes">XInclude</link> such as the following:
      </para>
      <informalexample>
      <programlisting>
&lt;xi:include href="%{templates-dir}/common/create-ssh-keys.xml"/></programlisting>
      </informalexample>

      </listitem>
      </varlistentry>

    <varlistentry id="install">
      <term>
      install 
      </term>

      <listitem>
      <para>
      Installs one or more client machines. Must return a non-zero exit status
      if installation fails. Commonly used with the <link
      linkend='deployment-macros'>%{fqdn}</link> and <link
      linkend='deployment-macros'>%{url}</link> module macros.
      </para>

      <para>
      <emphasis role='bold'>Example</emphasis> - This example shows a file
      named <filename>install.xml</filename> which is included in the templates
      folder at <filename>/usr/share/deploy/templates/libvirt</filename> See
      <xref linkend='templates'/> for more information on templates.
      </para>
      
      <para>
      The <emphasis>install.xml</emphasis> file provides a bash script
      which completes the actual machine installation. In this case, the script
      executes the <command>virt-install</command> command to create a new
      virtual machine.  The script uses the <varname>%{fqdn}</varname>
      module macro to specify a name for the virtual machine, as well as the
      filename for the machine's image. It uses the <varname>%{url}</varname>
      macro to specify the location for the installation files, as well as for
      the kickstart file.  
      </para>

      <para>
      The <command>set -e</command> command has not been used in this script as
      it was in the <xref linkend="delete"/> example. In this case it is
      unnecessary because the script contains only a single command,
      <command>virt-install</command>.
      </para>

      <informalexample>
      <programlisting><xi:include href='../../../../../share/deploy/templates/libvirt/install.xml' parse='text' xmlns:xi="http://www.w3.org/2001/XInclude"/>
&lt;/publish&gt;</programlisting>
      </informalexample>

      <para>
      The template can be included in a definition using an <link
      linkend="xincludes">XInclude</link> such as the following:
      </para>

      <informalexample>
      <programlisting>&lt;xi:include href="%{templates-dir}/libvirt/install.xml"/></programlisting>
      </informalexample>
      </listitem>
    </varlistentry>

    <varlistentry id="post-install">
      <term>
      post-install 
      </term>

      <listitem>
      <para>
      Performs post-install tasks such as install verification. Must return a
      non-zero exit status if post-install tasks fail.
      </para>
    
      <para>
      The script can perform any desired actions to verify system installation.
      One recommended action is to scan the
      <filename>/root/install.log</filename> file for "scriptlet failed"
      errors.  Scriptlet failed errors identify issues in which RPM packages,
      quite possibly one of the config-rpms (defined using a <xref
      linkend='config-rpm'/> element), failed to install as expected. See the
      examples section below for a script that scans for and reports "scriptlet
      failed" errors. See the <emphasis>Deploy User Manual</emphasis>
      for information on troubleshooting "scriptlet failed" errors related to
      the config-rpm.
      </para>

      <para>
      <emphasis role='bold'>Example</emphasis> - This example shows a file
      named <filename>verify-install.xml</filename> which is included in the
      templates folder at
      <filename>/usr/share/deploy/templates/common</filename> See <xref
      linkend='templates'/> for more information on templates.
      </para>
      
      <para>
      The file provides a bash script which uses the <command>grep</command> to
      scan for scriptlet failed errors in the install.log. If errors are found,
      the script returns an exit status of '1', indicating that verification
      failed.
      </para>

      <informalexample>
      <programlisting><xi:include href='../../../../../share/deploy/templates/common/verify-install.xml' parse='text' xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>
      </informalexample>

      <para>
      The template can be included in a definition using an <link
      linkend="xincludes">XInclude</link> such as the following:
      </para>

      <informalexample>
      <programlisting>
&lt;xi:include href="%{templates-dir}/common/verify-install.xml"/></programlisting>
      </informalexample>
      </listitem>
    </varlistentry>

    <varlistentry id='save-triggers'>
      <term>save-triggers</term>
      <listitem>
      <para>
      Saves trigger values for future use by
      <constant>test-triggers</constant>-type scripts. Must return a non-zero
      exit status if trigger save unsuccessful.
      </para>
      <para>
      <emphasis>Example</emphasis> - This example shows the
      <filename>save-triggers.xml</filename> file which is included in the
      templates folder at <filename>/usr/share/deploy/templates/common</filename>. See
      <xref linkend="templates"/> for more information on templates.
      </para>
      
      <para>
      The script in this template saves trigger values to a file specified by
      the %{trigger-file} macro. The %{trigger-file} macro, along with other macros used by this script are defined in <xref linkend="deployment-macros"/>.
      </para>

      <informalexample>
      <programlisting>
<xi:include href='../../../../../share/deploy/templates/common/save-triggers.xml' parse='text' xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting> 
      </informalexample>

      <para>
      The template can be included in a definition using an <link
      linkend="xincludes">XInclude</link> such as the following:
      </para>

      <informalexample>
      <programlisting>&lt;xi:include href="%{templates-dir}/common/save-triggers.xml"/></programlisting>
      </informalexample>
      </listitem>
    </varlistentry>

      <varlistentry id='update'>
      <term>
      update
      </term>

      <listitem>
      <para>
      Updates an installed client, typically by executing the <command>yum
      sync</command> or <command>yum update</command> commands, followed by
      performing update verification as desired.
      </para>
    
      <para>
      Update script may also be used for post processing after client updates.
      For example, an update script may be used to test the running system
      kernel and restart the machine if a new kernel version has been
      installed, as is shown in the example update-script below. Note that
      while post processing actions such as these could be performed as either
      <emphasis>update</emphasis> or <emphasis>post</emphasis> scripts, the
      former is preferable since the latter are executed after both installation
      and updates.
      </para>

      <para>
      <emphasis role='bold'>Examples</emphasis> - This example shows a file
      named <filename>update.xml</filename> which is included in the template
      folder at /usr/share/deploy/templates/common. See <xref
      linkend='templates'/> for more information on templates.
      </para>

      <para>
      The file provides a shell script that updates the client using the
      <command>yum sync</command> command. Thereafter, the script tests for a
      new kernel, and restarts the client if one is found. The <command>set
      -e</command> is used to halt processing and return a non-zero exit status
      if an error occurs at any point within the script.
      </para>

      <informalexample>
      <programlisting><xi:include href='../../../../../share/deploy/templates/common/update.xml'
parse='text' xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>
      </informalexample>

      <para>
      The template can be included in a definition using an <link
      linkend="xincludes">XInclude</link> such as the following:
      </para>

      <informalexample>
      <programlisting>
&lt;xi:include href="%{templates-dir}/common/update.xml"/></programlisting>
      </informalexample>
      </listitem>
      </varlistentry>

    <varlistentry id="post">
      <term>
      post 
      </term>

      <listitem>
      <para>
      Performs tasks that should occur each time the deployment module runs,
      e.g. when deployment scripts change or when RPM packages are updated in
      the deployment repository. Post tasks might include performing client
      updates, restarting clients if the kernel package has been updated, or
      shutting down a client if its purpose has been accomplished during the
      course of module execution (e.g. building or testing RPMs). Must return a
      non-zero exit status if post tasks fail.
      </para>

      <para>
      For the <emphasis>publish</emphasis> event, this script is useful for
      copying published repositories to remote download servers. It
      can also be used to integrate repositories with enterprise systems
      management systems, for example to sync repository content with
      software channels in Red Hat Network or Spacewalk. In scenarios such as
      these, it is necessary to set the <emphasis>@ssh</emphasis> attribute to
      a false value.
      </para>

      <para>
      For the <emphasis>test-install</emphasis> and
      <emphasis>test-update</emphasis> events, the
      <emphasis>post</emphasis> script is useful for activities such as
      completing testing that should run after either install or update, or for
      powering down test machines between runs. 
      </para>

      <para>
      <emphasis role='bold'>Examples</emphasis> - This example shows a file
      named <filename>poweroff.xml</filename> which is included in the template
      folder at /usr/share/deploy/templates/common. See <xref
      linkend='templates'/> for more information on templates.
      </para>
      
      <para>
      The file contains a simple bash script with a single command to shut down
      the client machine.
      </para>

      <informalexample>
      <programlisting>
<xi:include href='../../../../../share/deploy/templates/common/poweroff.xml'
parse='text' xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>
      </informalexample>

      <para>
      The template can be included in a definition using an <link
      linkend="xincludes">XInclude</link> such as the following:
      </para>

      <informalexample>
      <programlisting>
&lt;xi:include href="%{templates-dir}/common/poweroff.xml"/></programlisting>
      </informalexample>
      </listitem>
      </varlistentry>

      </variablelist>

      <para>
      This attribute is required.
      </para>
      </listitem>
      </varlistentry>

      <varlistentry id="script-hostname">
      <term>@hostname</term>
      <listitem>

      <para>
      TEXT value specifying the hostname or ipaddress of the machine on which
      Deploy will attempt to execute the <emphasis>script</emphasis>. The
      specified machine must be configured to accept SSH connections from the
      build machine.
      </para>

      <para>
      Deploy supports public key authentication for SSH connections. Before
      performing the connection, Deploy will check to see if SSH has been
      configured for the root user on the build machine. It does this by
      testing for the existence of a file named
      <filename>/root/.ssh/id_rsa.pub</filename>. If this file does not exist,
      Deploy will attempt to configure SSH for the build machine by executing
      the following command:
      
      <programlisting>
/usr  /bin/ssh-keygen -t rsa -f /root/.ssh/id_rsa -N ""</programlisting>
      </para>

      <para>
      Deploy does not support the use of a passphrase for the root user SSH
      key. If an SSH key has been previously created, that key must not require
      a passphrase.
      </para>

      <note>
      <title>Note - SSH Configuration for Client Machines</title>
      <para>
      As a final step, users must also configure client machines to allow SSH
      access from the build machine. This can be accomplished using a <xref
      linkend="config-rpm"/>. Deploy includes an example template to complete
      this task. On a system with Deploy installed, the file can be found as
      <filename>ssh-config.xml</filename> in the templates folder at
      <filename>/usr/share/deploy/templates/common</filename>.
      </para>

      <para>
      See the <xref linkend='deploy-config-rpm'/> element for an example of
      using this template. See <xref linkend='templates'/> for more information
      on templates.
      </para>
      </note>

      <para>
      If an SSH connection can be established, Deploy then copies the script to
      the <filename>/var/lib/deploy/deploy</filename> folder, in a subfolder
      named with the client <xref linkend='main-id'/>, and executes it with
      root privileges.  The file will be given the same name as the script
      <xref linkend='script-id'/> attribute.
      </para>

      <para>
      The <emphasis>hostname</emphasis> attribute is optional. The default
      values vary by script type and are shown in the table below:
      </para>

      <informaltable>
      <tgroup cols='2'>
      <colspec colwidth='35%'/>
      <tbody valign='top'>
      <row>
      <entry><emphasis role='strong'>Script Type</emphasis></entry>
      <entry><emphasis role='strong'>Default Value</emphasis></entry>
      </row>
      <row>
      <entry>pre, activate, delete, pre-install, install</entry>
      <entry>%{deploy-host}</entry>
      </row>
      <row>
      <entry>test-triggers, post-install, save-triggers, post</entry>
      <entry>%{fqdn}</entry>
      </row>
      </tbody>
      </tgroup>
      </informaltable>
      </listitem>
      </varlistentry>

      <varlistentry id="script-verbose">
      <term>@verbose</term>
      <listitem>
      <para>
      BOOLEAN value indicating whether the Standard
      Output from the script should be displayed as output from Deploy.
      </para>

      <para>
      This attribute is optional. The default value is
      <constant>FALSE</constant>
      </para>

      <para>
      See <xref linkend="content-boolean"/> for information on BOOLEAN values.
      </para>
      </listitem>
      </varlistentry>

      <varlistentry id="script-comes-before">
      <term>@comes-before</term>
      <listitem>
      <para>
      TEXT value providing a space or comma-separated
      list of scripts, identified by their <xref linkend='script-id'/> values,
      that should execute following this script.
      </para>
      </listitem>
      </varlistentry>

      <varlistentry id="script-comes-after">
      <term>@comes-after</term>
      <listitem>
      <para>
      TEXT value providing a space or comma-separated
      list of scripts, identified by their <xref linkend='script-id'/> values,
      that should execute following preceding this script.
      </para>
      </listitem>
      </varlistentry>
      </variablelist>
      </listitem>
    </varlistentry>

    <varlistentry>
    <term>input-script</term>

    <listitem>
    <para>
    TEXT content of a script used for determining
    whether the deployment event should run during the current Deploy
    session. Deploy executes the script on the local machine as the root
    user.
    </para>

    <para>
    Provides a single run-time <link linkend="macros">macro</link>:
    </para>

    <para>
    <emphasis role='strong'>%{input-dir}:</emphasis> The path to a folder
    where the <emphasis>input-script</emphasis> should copy files.
    </para>

    <para>
    Deploy tests for changes in files in the %{input-dir} folder based
    on filename and timestamp. If any files have changed, it causes the
    deployment event to run.
    </para>

    <para>
    The <emphasis>input-script</emphasis> element is optional. One or more
    elements are allowed.
    </para>

    <para>
    In most cases this element is not required as Deploy automatically
    runs the event only when necessary. In some cases, however, it is desirable
    to cause the event to run based on external factors, such as changes to a
    file used by one of the scripts described in the previous element.
    </para>

    <para>
    <emphasis role='strong'>Example</emphasis> - in the example below, the text
    of a script is provided. The script tests if the current version of a
    source code repository matches the version saved to a file in the
    <emphasis>%{input-dir}</emphasis> folder. If not, it writes the new version
    to the file. Deploy checks for changes to files in the
    <emphasis>%{input-dir}</emphasis> and, if so, causes the deployment event
    to run.
    </para>

    <informalexample>
    <programlisting>
&lt;input-script>
#!/bin/sh
# track the latest source code repository revision so that tests run each
# time the repository changes

set -e
file=%{input-dir}/hgtip
hgtip_curr=`hg identify https://example.com/path/to/hg/source/code/repo`
hgtip_last=`[ -f $file ] &amp;&amp; cat $file || echo ''`
if [[ $hgtip_curr != $hgtip_last ]]; then
  echo $hgtip_curr > $file
fi
&lt;/input-script></programlisting>
    </informalexample>
    </listitem>
    </varlistentry>

    </variablelist>
  </section>

</section>
