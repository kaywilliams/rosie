<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<chapter id="templates-macros-and-xincludes"
  xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>
  Templates, Macros and XIncludes
  </title>

  <para>
  To assist with definition creation and reuse, CentOS Studio supports
  Templates, Macros and XIncludes.
  </para>
  
  <para>
  Templates are complete definitions, or segments of definitions, that can be
  used as a starting point for creating new definitions.
  </para>

  <para>
  Macros and XIncludes assist with content substitution.  These two methods
  overlap in some areas, and provide unique functionality in others.
  </para>
  
  <para>
  Used together, these three features offer a great deal of convenience and
  flexibility for creating definitions.
  </para>

  <section id="templates" xreflabel="templates">
  <title>Templates</title>

  <xi:include href="common.xml" 
              xpointer="xpointer(//div[@id='templates-description']/*)"/>

  </section>

  <section id="macros" xreflabel="Macros">
    <title>
    Macros 
    </title>
  
    <para>
    Macros provide a compact syntax for substituting <emphasis
    role="bold">plain text</emphasis> for <emphasis
    role="bold">placeholders</emphasis> within a definition. Macro definitions
    specify a macro id and associated replacement text. Macro placeholders
    specify the location within the repository definition where the text is to
    be substituted.
    </para>
    
    <para>
    The syntax for macro placeholders is a percent sign preceding a
    macro id enclosed in braces: <emphasis>%{ID}</emphasis>. Placeholders can
    be used anywhere within the definition, with one limitation related to
    XInclude elements. This limitation is described below under
    <emphasis>Limitations</emphasis>.
    </para>

    <para>
    CentOS Studio supports three types of macros: <emphasis>command-line
    macros</emphasis>, <emphasis>in-document macros</emphasis>, and
    <emphasis>run-time macros</emphasis>. 
    </para>

    <para>
    <emphasis role="strong">Command-Line Macros</emphasis> are specified using
    one or more macro options on the centosstudio command line. Macro
    options use the following syntax: <emphasis>--macro id:value</emphasis>.
    Macros specified on the command line are the first to be resolved during
    CentOS Studio processing, and their values override values provided by
    any other macro element or run-time macro. <xref
    linkend="macro-command-line-example"/> shows a common usage scenario.
    </para>

    <para>
    <emphasis role="strong">In-Document Macros</emphasis> are specified using
    macro elements within the repository definition. Macro elements take a
    single attribute, "id", which identifies the name of the macro. The text of
    the macro element identifies text to substitute in place of the macro. For
    example, <informalexample>&lt;macro id="mymacro"&gt;my
    text&lt;/macro&gt;</informalexample>.
    </para>
    
    <para>
    In-document macros fall into two categories: <emphasis>global</emphasis>
    and <emphasis>module</emphasis>.  <emphasis>Global</emphasis> macros
    are defined at the top level of the document, parallel to the other
    top-level elements, or within the <xref linkend="main"/> top level element.
    They are resolved following command-line macros, and they override
    module macros with the same id.  Conversely,
    <emphasis>module</emphasis> macros are defined within top-level
    elements other than the <emphasis>main</emphasis> element. Their values are
    applied only within the top-level element in which they are defined.
    </para>

    <para>
    Multiple macro elements with the same id may exist within the definition.
    In this case, the value of the first element is used, and all
    remaining elements are silently ignored.
    </para>

    <para>
    See <xref linkend="macro-in-document-example"/> for examples of global
    and module macros.
    </para>

    <para>
    <emphasis role="strong">Run-Time Macros</emphasis> are macros that are
    defined by CentOS Studio during the build process rather than defined by
    users. Run-time macros are the last to be resolved. Like in-document
    macros, run-time macros fall into two categories: global and module.
    </para>
    
    <para>
    Global run-time macros include the following:
    
    <simplelist type='horiz'>
    <member><varname>%{name}</varname></member>
    <member><varname>%{version}</varname></member>
    <member><varname>%{arch}</varname></member>
    <member><varname>%{id}</varname></member>
    <member><varname>%{definition-dir}</varname></member>
    </simplelist>
    </para>
    
    <para>
    The values of the first four macros correspond to elements
    in the <varname>/main</varname> element, unless they are
    overridden by command-line or in-document macros. See <xref
    linkend="main"/> for more information on these macros.
    </para>

    <para>
    The value of the final macro, <varname>%{definition-dir}</varname>
    corresponds to the folder location of the definition. This macro is
    commonly used within scripts for locating files and folders relative to the
    definition file.
    </para>
    
    <para>
    Certain modules also provide <emphasis>module</emphasis> run-time
    macros. These modules include <emphasis>srpmbuild</emphasis>,
    <emphasis>test-install</emphasis>, <emphasis>test-update</emphasis> and
    <emphasis>publish</emphasis>. See the chapters on <xref
    linkend="srpmbuild"/> and <xref linkend="deployment-elements"/> for more
    information on these macros.
    </para>
    
    <section>
      <title>
      Examples
      </title>
 
      <section id="macro-command-line-example" 
               xreflabel="Example 1 - Using Command-Line Macros">
      <title>
      Example 1 - Using Command-Line Macros
      </title>
      <para>
      In this example the macro placeholders <varname>%{version}</varname> and
      <varname>%{arch}</varname> will be replaced with the values "6" and
      "i386", respectively, when CentOS Studio is executed using the following
      command line:
      </para>

      <programlisting>
centosstudio --macro "version:6" --macro "arch:i386" path/to/definition </programlisting>

      <para>
      This allows a single definition to be used across multiple version and
      arch operating system combinations. The definition is shown below:
      </para>

      <informalexample>
      <programlisting>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;repo schema-version="1.0" xmlns:xi="http://www.w3.org/2001/XInclude"&gt;

&lt;main&gt;
&lt;name&gt;example&lt;name&gt;
&lt;version&gt;%{version}&lt;version&gt;
&lt;arch&gt;%{arch}&lt;arch&gt;
&lt;/main&gt;
...

&lt;/repo&gt;</programlisting>
      </informalexample>
      </section>

      <section id="macro-in-document-example" 
               xreflabel="Example 2 - Using In-Document Macros">
      <title>
      Example 2 - Using In-Document Macros
      </title>
      <para>
      This example is similar to Example 1, with the addition of global
      in-document macros for <emphasis>version</emphasis> and
      <emphasis>arch</emphasis>. When CentOS Studio is executed with the
      command line from Example 1, the results will be the same as in that
      example (since command-line macros are resolved first). However, when
      CentOS Studio is executed with no macros specified on the command line,
      the values for version and macro will be "5" and "x86_64" respectively,
      as defined below.
      </para>

      <informalexample>
      <programlisting>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;repo schema-version="1.0" xmlns:xi="http://www.w3.org/2001/XInclude"&gt;

&lt;macro id="version"&gt;5&lt;macro&gt;
&lt;macro id="arch"&gt;x86_64&lt;macro&gt;

&lt;main&gt;
&lt;name&gt;example&lt;name&gt;
&lt;version&gt;%{version}&lt;version&gt;
&lt;arch&gt;%{arch}&lt;arch&gt;
&lt;/main&gt;
...

&lt;/repo&gt;</programlisting>
      </informalexample>
      </section>

      <section>
      <title>
      Example 3 - Using Builtin Macros
      </title>
      <para>
      In this example the variables <varname>%{version}</varname> and
      <varname>%{arch}</varname>, used within the <varname>repos</varname> 
      element, will be substituted with the values "5" and "i386" respectively.
      </para>

      <para>
      If CentOS Studio is executed with the command line shown in Example 1,
      however, the placeholders in the <varname>repos</varname> element will be
      substituted with the values '6' and 'i386' respectively. This is
      undesirable and will lead to errors and inconsistent behavior since,
      internally, CentOS Studio will believe it is trying to build a repository
      compatible with a version 5, i386 architecture operating system. If you
      plan to use command-line macros, you should use the definition syntax
      shown in Examples 1 or 2 above.  That is the syntax we will show through
      the remainder of this document.
      </para>

      <informalexample>
      <programlisting>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;repo schema-version="1.0" xmlns:xi="http://www.w3.org/2001/XInclude"&gt;

&lt;main&gt;
&lt;name&gt;example&lt;/name&gt;
&lt;version&gt;5&lt;/version&gt;
&lt;arch&gt;i386&lt;/arch&gt;
&lt;/main&gt;

&lt;repos&gt;
&lt;repo id="base-%{version}"&gt;
&lt;name&gt;CentOS-%{version}-%{arch}&lt;/name&gt;
&lt;baseurl&gt;http://mirror.centos.org/centos/%{version}/os/%{arch}/&lt;/baseurl&gt;
&lt;gpgkey&gt;http://mirror.centos.org/centos/%{version}/os/%{arch}/RPM-GPG-KEY-CentOS-%{version}&lt;/gpgkey&gt;
&lt;/repo&gt;
&lt;/repos&gt;
...
&lt;/repo&gt;</programlisting>
      </informalexample>
      </section>
    </section> 
  
  </section>
  
  <section id="xincludes" xreflabel="XIncludes">
    <title>
    XIncludes and XML elements 
    </title>
  
    <para>
    XML Inclusions (XIncludes) are an industry standard sponsored by the World
    Wide Web Consortium (W3C). This section provides a brief overview and an
    example of using XIncludes in repository definitions. More information on
    XInclude is available from <ulink url="http://www.w3.org/TR/xinclude/"/>
    </para>
    
    <para>
    Similar to macros, XIncludes allow content reuse in repository definitions.
    There are several important differences between the two mechanisms,
    however:
    </para>

    <itemizedlist>

      <listitem>
      XIncludes support both text and XML content. Macros
      only support text content.
      </listitem>

      <listitem>
      XIncludes allow including content from external files. Macros
      do not.
      </listitem>

      <listitem>
      Macros can be used within attribute text, e.g.  <varname>&lt;repo
      id="centos-%{version}-%{arch}"&gt;</varname>. XIncludes cannot.</listitem>

    </itemizedlist>

    <para id="xinclude-namespace-declaration" 
          xreflabel="XInclude Namespace Declaration">
    <emphasis role="strong">XInclude Namespace Declaration.</emphasis>
    XIncludes require the use of an XML namespace declaration in the containing
    document. This is commonly accomplished by adding an xmlns attribute within
    the repo element as follows: 
    </para>
    
    <informalexample>
    &lt;repo xmlns:xi="http://www.w3.org/2001/XInclude"&gt;
    </informalexample> 
    
    <para>
    As a matter of practice, you may wish to include this namespace declaration
    in every XML file you create for use with CentOS studio. This will allow
    the addition of XIncludes at any time, without causing potentially confusing
    errors in definition processing.
    </para>

    <para>
    XIncludes can be nested, e.g. <filename>repository1.definition</filename>
    can include content from <filename>document2.xml</filename>, which can
    further include content from <filename>document3.xml</filename>. Each
    document that contains an XInclude, e.g.
    <filename>repository1.definition</filename> and
    <filename>document2.xml</filename>, must also include the namespace
    definition. 
    </para>

    <para>
    XIncludes offer a number of features, more than we will cover in this
    document. The examples below do illustrate, however, several common
    scenarios for using XIncludes in repository definitions.
    </para>

    <para id="xml-elements" xreflabel="XML Elements">
    <emphasis role="strong">XML Elements.</emphasis> XML elements can be used
    along with macros and XIncludes to support conditional content inclusion.
    Conditional content inclusion is a powerful and practical tool. It
    allows a single repository definition, or XIncluded file, to be used across
    multiple operating system versions and architectures, even when repository
    requirements vary.
    </para>

    <para>
    XML elements are named, appropriately enough, <emphasis>xml</emphasis>.
    They can occur at any level of the document, carry any attributes and
    contain any content. Typically, however, they carry a single attribute
    <varname>id</varname>, which allows them to be selected easily using
    XInclude. Also, typically, they contain either valid definition content
    (i.e. elements, attributes or text described in this document), or a single
    blank space (to indicate no content). For example:
    </para>
    
    <informalexample>
    <programlisting>
&lt;xml id="extra-packages-5">
&lt;package>package&lt;/package>
&lt;/xml>

&lt;xml id="extra-packages-6"> &lt;/xml></programlisting>
    </informalexample>

    <para>
    For processing purposes, CentOS Studio ignores these elements. Their only
    role is to support conditional content inclusion.  See <xref
    linkend="conditional-xinclude-example"/> for a complete example.
    </para>

    <section>
    <title>Examples</title>

    <section id="xinclude-text-document-example" 
             xreflabel="Example 1 - Including an entire text document">
      <title>
      Example 1 - Including an entire external <emphasis>text</emphasis>
      document.
      </title>
      <para>
      The example below uses XInclude to include content from the text
      file named <filename>ks.cfg</filename> within the kickstart element. The
      name of the XInclude element is <varname>xi:include</varname>.
      Technically <emphasis>xi:</emphasis> is the prefix, as established in the
      <xref linkend="xinclude-namespace-declaration"/>, to the element named
      <emphasis>include</emphasis>. For simplicity throughout the remainder of
      this document, however, we will refer to it as the
      <varname>xi:include</varname> element. The <varname>href</varname>
      attribute identifies the path of the file for inclusion, in this case a
      file named ks.cfg in the same folder as the definition. The
      <varname>parse</varname> attribute indicates that the file to be included
      is in <emphasis>text</emphasis> format, rather than XML (the default).
      </para>

       <informalexample>
      <programlisting>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;repo xmlns:xi="http://www.w3.org/2001/XInclude"&gt;
...
&lt;kickstart&gt;
&lt;xi:include href="ks.cfg" parse="text" /&gt;
&lt;/kickstart&gt;
...
&lt;/repo&gt;</programlisting>
      </informalexample>
    </section>

    <section id="xinclude-xml-document-example" 
             xreflabel="Example 2 - Include an entire external XML document">
      <title>
      Example 2 - Including an entire external <emphasis>XML</emphasis>
      document.
      </title>
      <para>
      In this example, an entire xml document, <filename>update.xml</filename>
      is included within the definition. This example is similar to Example 1
      above, except that the <emphasis>parse</emphasis> attribute is not 
      required since the included file is in the default XML format.
      </para>

      <informalexample>
      <programlisting>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;repo xmlns:xi="http://www.w3.org/2001/XInclude"&gt;
...
&lt;xi:include href="repos.xml"/&gt;
...
&lt;/repo&gt;</programlisting>
      </informalexample>
    </section>

    <section id="xinclude-xml-segment-example" 
             xreflabel="Example 3 - Including XML segments">
      <title>
      Example 3 - Including XML segments.
      </title>
      <para>
      This example shows two documents, <filename>repos.xml</filename> and
      <filename>example.definition</filename>. The
      <filename>repos.xml</filename> document contains definitions for several
      input repositories. Two of these will be included in the
      <filename>example.definition </filename> using
      <varname>xi:include</varname> elements. The <varname>xpointer</varname>
      attributes of the <varname>xi:include</varname> elements identify the
      segments for inclusion.
      </para>

      <note>
      On a system with the CentOS Studio RPM installed, the <filename>
      repos.xml</filename> document can be found in the examples folder at
      <filename>/usr/share/centosstudio/templates/</filename>.
      </note>

      <para><emphasis role="strong">repos.xml</emphasis></para>
      <informalexample>
      <programlisting>
<xi:include href="templates/repos.xml" parse="text"/></programlisting>
      </informalexample>

      <para><emphasis role="strong">example.definition</emphasis></para>
      <informalexample>
      <programlisting>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;repo xmlns:xi="http://www.w3.org/2001/XInclude"&gt;
...
&lt;repos&gt;
&lt;xi:include href='repos.xml' xpointer="xpointer(/*/repo[@id='base'])"/&gt;
&lt;xi:include href='repos.xml' xpointer="xpointer(/*/repo[@id='updates'])"/&gt;
&lt;/repos&gt;

&lt;/repo&gt;</programlisting>
      </informalexample>
    </section>

    <section id="conditional-xinclude-example" 
      xreflabel="Example 4 - Conditionally including XML segments using Macros, XIncludes and XML elements">
      <title>
      Example 4 - Conditionally including XML segments using Macros, XIncludes and XML elements.
      </title>
      <para>
      Often it is convenient to reuse a single definition across multiple
      operating system versions and architectures, even when content
      requirements differ. This can be done using a combination of macros,
      XIncludes and XML elements.
      </para>

      <para>
      The example below shows a <emphasis>packages</emphasis> element
      containing two groups (core and base), and an
      <emphasis>xi:include</emphasis> element. The
      <emphasis>xi:include</emphasis> selects additional content based on the
      value provided for the <emphasis>version</emphasis> macro. In the default
      case (version=5), the list of groups for the repository will be "core,
      base and smb-server".  If the version macro is set to "6", however,
      either manually or using a command-line macro, the list of groups will be
      "core, base and cifs-file-server".
      </para>

      <informalexample>
      <programlisting>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;repo xmlns:xi="http://www.w3.org/2001/XInclude"&gt;

&lt;macro id="version"&gt;5&lt;macro&gt;
&lt;macro id="arch"&gt;i386&lt;macro&gt;

&lt;packages&gt;
&lt;group&gt;core&lt;group&gt;
&lt;group&gt;base&lt;group&gt;
&lt;xi:include xpointer="xpointer(/*/xml[@id='packages-%{version}']/node())/&gt;
&lt;/packages&gt;

&lt;xml id="packages-5">
&lt;group>smb-server&lt;/group>
&lt;/xml>

&lt;xml id="packages-6">
&lt;group>cifs-file-server&lt;/group>
&lt;/xml>
...
&lt;/repo&gt;</programlisting>
      </informalexample>
    </section>
    </section>
 
  </section>

  <para>
  In summary, macros, XIncludes and xml elements ease many tasks in repository
  definition creation. They will be shown in many examples in the remainder of
  this document, as well as in other CentOS Studio documentation and example
  files.
  </para>

</chapter>
