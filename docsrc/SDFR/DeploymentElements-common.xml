<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<section id="deployment-elements-common-model"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>
  Common Model 
  </title>

  <section>
    <title>
    Definition
    </title>

    <para>
    Deployment elements, <emphasis>test-install</emphasis>,
    <emphasis>test-update</emphasis> and <emphasis>publish</emphasis>, provide
    settings for the corresponding deployment modules. These deployment modules
    complete the following tasks:
    </para>

    <itemizedlist>
    <listitem>
    Publish a solution repository to a file system location on the
    build machine. See <xref linkend="local-dir"/>.
    </listitem>

    <listitem>
    Assemble files and information related to installing and updating client
    machines using the solution repository. Make assembled information
    available to other CentOS Studio modules as well as to sub-components of
    the individual deployment module. See <xref linkend="deployment-macros"/>,
    <xref linkend="hostname"/>, <xref linkend="password"/>, <xref
    linkend="remote-url"/>, <xref linkend="kickstart"/> and <xref
    linkend="boot-options"/>.
    </listitem>

    <listitem>
    <para>
    Optionally, exceute one or more user-provided deployment script. See <xref
    linkend="activate-script"/>, <xref linkend="delete-script"/>, <xref
    linkend="install-script"/>, <xref linkend="verify-install-script"/>, <xref
    linkend="update-script"/> and <xref linkend="post-script"/>.
    </para>
    </listitem>
    </itemizedlist>

    <para>
    CentOS Studio executes deployment scripts according to the following
    logic:
    </para>

    <itemizedlist>
    <listitem>
    First, CentOS Studio performs a number of tests to determine if system
    install or reinstall is necessary. See <xref
    linkend='install-triggers'/>.
    </listitem>

    <listitem>
    If the triggers indicate that an install/reinstall is necessary, CentOS
    Studio executes scripts in this order: 
    
    <itemizedlist>
    <listitem>delete-script </listitem>
    <listitem>install-script </listitem>
    <listitem>activate-script</listitem>
    <listitem>verify-install-script</listitem>
    <listitem>post-script</listitem>
    </itemizedlist>
    </listitem>

    <listitem>
    Otherwise, CentOS Studio executes these scripts:
    
    <itemizedlist>
    <listitem>update-script</listitem>
    <listitem>post-script</listitem>
    </itemizedlist>
    </listitem>

    <listitem>
    If any script is not provided, it is skipped silently.
    </listitem>
    </itemizedlist>

    <para>
    Deployment scripts can be written in any shell scripting language.  
    </para>
    
    <para>
    By default, CentOS Studio executes the activate-script, delete-script and
    install-script on the build machine and the verify-install-script,
    update-script and post-script on a client machine specified using the
    @hostname attribute. Script execution on client machines is accomplished
    using <application class="software">Secure Shell (SSH)</application>.
    </para>
    
    <para>
    CentOS Studio supports password authentication for SSH connections. It does
    not support public key or host-based authentication.
    </para>
    
    <para>
    SSH execution can be disabled for any script, allowing users to provide
    support for remote connections and authentication using any method desired.
    </para>

    <para>
    See the <emphasis>CentOS Studio User Manual</emphasis> for information on
    configuring build and client machines for SSH connectivity.
    </para>

  </section>

  <section>
    <title>
    Syntax
    </title>

    <programlisting>
[&lt;ELEMENTNAME <xi:include href="common.xml" xpointer="xpointer(//*[@id='syntax-ssh-attributes']/text())"/>&gt;
  <xi:include href="common.xml" xpointer="xpointer(//*[@id='syntax-local-dir-element']/node())"/>
  <xi:include href="common.xml" xpointer="xpointer(//*[@id='syntax-remote-url-element']/node())"/>
  <xi:include href="common.xml" xpointer="xpointer(//*[@id='syntax-boot-options-element']/node())"/>
  <xi:include href="common.xml" xpointer="xpointer(//*[@id='syntax-kickstart-element']/text())"/>
  [<xi:include href="common.xml" xpointer="xpointer(//*[@id='syntax-activate-script-element']/text())"/>]
  [<xi:include href="common.xml" xpointer="xpointer(//*[@id='syntax-delete-script-element']/text())"/>]
  [<xi:include href="common.xml" xpointer="xpointer(//*[@id='syntax-install-script-element']/text())"/>]
  [<xi:include href="common.xml" xpointer="xpointer(//*[@id='syntax-verify-install-script-element']/text())"/>]
  [<xi:include href="common.xml" xpointer="xpointer(//*[@id='syntax-update-script-element']/text())"/>]
  [<xi:include href="common.xml" xpointer="xpointer(//*[@id='syntax-post-script-element']/text())"/>]
&lt;ELEMENTNAME/&gt;]
    </programlisting>
  </section>

  <section id='install-triggers' xreflabel='Install Triggers'>
    <title>
    Install Triggers
    </title>

    <para>
    The following table shows install triggers by deployment module:
    </para>

    <informaltable>
    <tgroup cols='2'>
    <colspec colwidth='1.5in'/>
    <tbody valign='top'>
    <row>
    <entry>test-update, publish </entry>
    <entry>
    Does the <xref linkend='activate-script'/> execute successfully?
    </entry>
    </row>
    <row>
    <entry>test-install </entry>
    <entry>
    <simplelist type='vert'>
    <member>Has the <xref linkend='config-rpm'/> changed?</member>
    <member>Has the <xref linkend='install-script'/> changed?</member>
    <member>Has the <xref linkend='kickstart'/> changed?</member>
    <member>Have installation files in the <xref linkend='repo-base-repository'/> changed?</member>
    <member>Does the <xref linkend='activate-script'/> execute successfully?</member>
    </simplelist>
    </entry>
    </row>
    </tbody>
    </tgroup>
    </informaltable>
  </section>

  <section id="deployment-macros" xreflabel="Macros">
    <title>
    Macros
    </title>

    <informaltable>
    <tgroup cols='2'>
    <colspec colwidth='1.5in'/>
    <tbody valign='top'>
    <row>
    <entry id='hostname-macro' xreflabel='hostname'>
    %{hostname}
    </entry>

    <entry>
    The name of a host to be installed, updated, deleted, etc. Takes its value
    from the <xref linkend='hostname'/> attribute.
    </entry>
    </row>

    <row>
    <entry id='password-macro' xreflabel='password'>
    %{password}
    </entry>

    <entry>
    A password for the root user of a host machine. Takes its value from the
    <xref linkend='password'/> attribute.
    </entry>
    </row>

    <row>
    <entry id='crypt-password-macro' xreflabel='crypt-password'>
    %{crypt-password}
    </entry>

    <entry>
    An encrypted version of the %{password} macro.
    </entry>
    </row>

    <row>
    <entry id='url-macro' xreflabel='url'>
    %{url}
    </entry>

    <entry>
    A full web url to a solution repository. Described under <xref
    linkend='remote-url'/> element.
    </entry>
    </row>

    <row>
    <entry id='boot-options-macro' xreflabel='boot-options'>
    %{boot-options}
    </entry>

    <entry>
    Options to be provided to the installer during system boot. Corresponds to
    the value of the <xref linkend='boot-options'/> element.
    </entry>
    </row>
    </tbody>
    </tgroup>
    </informaltable>
  </section>

  <section id="publish-attributes" xreflabel="Publish Attributes">
    <title>
    Attributes
    </title>

  <variablelist>
  <varlistentry id='hostname' xreflabel='@hostname'>
    <term>hostname</term>

    <listitem>
    <para>
    A <varname>TEXT</varname> value providing the name of a host, e.g.
    <varname>samba-server</varname>. This value is provided as a local macro,
    %{hostname}, for use within deployment element content, e.g. within the
    <emphasis>kickstart</emphasis> and <emphasis>install-script</emphasis>
    sub-elements. See those elements for examples.
    </para>

    <para>
    Also used for establishing an SSH connection to a client machine prior to
    executing scripts that support the <emphasis>@ssh</emphasis> attribute,
    i.e.  <emphasis>verify-install-script</emphasis>,
    <emphasis>update-script</emphasis>, and <emphasis>post-script</emphasis>.
    </para>

    <para>
    This attribute is optional. The default value are as follows:
    </para>
    
    <informaltable>
    <tgroup cols='2'>
    <colspec colwidth='1in'/>
    <tbody valign='top'>
    <row>
    <entry>publish</entry>
    <entry><varname>%{id}</varname></entry>
    </row>
    <row>
    <entry>test-install</entry>
    <entry><varname>%{id}</varname>-test-install</entry>
    </row>
    <row>
    <entry>test-update</entry>
    <entry><varname>%{id}</varname>-test-update</entry>
    </row>
    </tbody>
    </tgroup>
    </informaltable>

    </listitem>
  </varlistentry>

  <varlistentry id='password' xreflabel='@password'>
    <term>password</term>

    <listitem>
    <para>
    A <varname>TEXT</varname> value specifying a plain text password. This
    value is provided as a local macro, %{password}, for use within publish
    element content.
    </para>
    
    <para>
    This attribute is optional. The default values are as follows:
    </para>
    
    <informaltable>
    <tgroup cols='2'>
    <colspec colwidth='1in'/>
    <tbody valign='top'>
    <row>
    <entry>publish</entry>
    <entry>
    A random password is automatically generated and stored in the solution
    data file. See the <emphasis>CentOS Studio User Manual</emphasis> for
    information on the solution data file.
    </entry>
    </row>
    <row>
    <entry>test-install</entry>
    <entry>The publish element password.</entry>
    </row>
    <row>
    <entry>test-update</entry>
    <entry>The publish element password.</entry>
    </row>
    </tbody>
    </tgroup>
    </informaltable>

    <para>
    An encrypted version of the password is also provided as a second macro,
    %{crypt-password}. The encrypted password is recommended for use in the
    <emphasis>kickstart</emphasis> element. See that element below for an
    example. The encrypted password is stored in the solution data file.
    
    </para>

    </listitem>
  </varlistentry>
  </variablelist>

  </section>

  <section>
    <title>
    Elements
    </title>

    <variablelist>
    <varlistentry id="local-dir">
      <term>
      local-dir
      </term>

      <listitem>
      <para>
      The <varname>PATH</varname> to a directory where CentOS Studio will
      publish this, and potentially other solution repositories. For solution
      repositories to be accessible on the web, the directory must be in the
      build machine’s local webroot, e.g. the Apache 
      <varname>DocumentRoot</varname>.
      </para>

      <para>
      To prevent tampering with solution content, you should ensure that only
      trusted users and groups have <emphasis>write</emphasis> access to the
      <emphasis>local-dir</emphasis>.
      </para>

      <para>
      This element is optional. The default values are as follows:
      </para>

      <informaltable>
      <tgroup cols='2'>
      <colspec colwidth='1in'/>
      <tbody valign='top'>
      <row>
      <entry>publish</entry>
      <entry>
      <filename>/var/www/html/solutions/<varname>%{id}</varname></filename>
      </entry>
      </row>
      <row>
      <entry>test-install</entry>
      <entry>
      <filename>/var/www/html/solutions/test-install/<varname>%{id}</varname></filename>
      </entry>
      </row>
      <row>
      <entry>test-update</entry>
      <entry>
      <filename>/var/www/html/solutions/test-update/<varname>%{id}</varname></filename>
      </entry>
      </row>
      </tbody>
      </tgroup>
      </informaltable>

      <para>
      <emphasis role='bold'>Example</emphasis>
      </para>

      <informalexample>
      <programlisting>
&lt;local-dir&gt;/my/web/root/solutions/&lt;/local-dir&gt;
      </programlisting>
      </informalexample>

      </listitem>
    </varlistentry>

    <varlistentry id='remote-url'>
      <term>
      remote-url
      </term>

      <listitem>
      <para>
      The URL <varname>PATH</varname> to a directory from which client
      machines can access this, and potentially other, solution repositories.
      </para>

      <para>
      This element is optional. The default values are listed in the following
      table, where <varname>$ipaddress</varname> is computed using the value of
      the <emphasis>@interface</emphasis> attribute, "eth0" by default:
      </para>

      <informaltable>
      <tgroup cols='2'>
      <colspec colwidth='1in'/>
      <tbody valign='top'>
      <row>
      <entry>publish</entry>
      <entry>
      <filename>http://$ipaddress/solutions/<varname>%{id}</varname></filename>
      </entry>
      </row>
      <row>
      <entry>test-install</entry>
      <entry>
      <filename>http://$ipaddress/solutions/test-install/<varname>%{id}</varname></filename>
      </entry>
      </row>
      <row>
      <entry>test-update</entry>
      <entry>
      <filename>http://$ipaddress/solutions/test-update/<varname>%{id}</varname></filename>
      </entry>
      </row>
      </tbody>
      </tgroup>
      </informaltable>
      <para>
      The value of the remote-url is also used in determining the the %{url}
      macro value. The url macro provides the complete web path to the
      solution repository. By default the value of the url macro is as follows,
      where <varname>$remote-url</varname> is the value from the table above:
      </para>

      <informaltable>
      <tgroup cols='2'>
      <colspec colwidth='1in'/>
      <tbody valign='top'>
      <row>
      <entry>publish</entry>
      <entry>
      <filename>$remote-url/%{id}/os/</filename>
      </entry>
      </row>
      <row>
      <entry>test-install</entry>
      <entry>
      <filename>$remote-url/%{id}/</filename>
      </entry>
      </row>
      <row>
      <entry>test-update</entry>
      <entry>
      <filename>$remote-url/%{id}/</filename>
      </entry>
      </row>
      </tbody>
      </tgroup>
      </informaltable>

      <para>
      The %{url} macro is commonly used in the
      <emphasis>install-script</emphasis> element. See that element for an
      example.
      </para>

      <para>
      As a security measure, to prevent man-in-the-middle style web server
      attacks, you may wish to configure the <emphasis>remote-url</emphasis>
      for SSL access.  See your web server documentation for information on
      configuring SSL. See also Example 4 below for information on specifying
      an https remote-url. 
      </para>

      <para>
      This element is optional.
      </para>

      <para>
      This element accepts two attributes:
      <emphasis>@interface</emphasis> and
      <emphasis>@fqdn</emphasis>.
      </para>

      <para>
      <emphasis>@interface</emphasis>: The network interface name, e.g. "eth1",
      from which to obtain the <varname>$ipaddress</varname> of the solution's
      update repository. This attribute only has an effect if
      <emphasis>remote-url/@fqdn</emphasis> is <constant>FALSE</constant>. By
      default, CentOS Studio uses the first active, non-loopback network
      interface.
      </para>

      <para>
      <emphasis>@fqdn</emphasis>: <varname>BOOLEAN</varname>
      that determines whether <application class="software">CentOS Studio</application>
      uses the build machine's fully qualified domain name or IP address in the
      automatically-computed remote url. The default value for
      this attribute is <constant>FALSE</constant>.
      </para>

      <para>
      <emphasis role='bold'>Examples</emphasis>
      </para>

      <para>
      In the following examples, the build machine's fully qualified domain
      name is <filename>buildserver.company.com</filename> and the IP addresses
      of "eth0" and "eth1" are 10.10.1.105 and 192.168.0.10, respectively. It
      is building a solution with an <varname>%{id}</varname> of
      "samba-server-5-i386". 
      </para>
      
      <para>
      <emphasis role='bold'>Example 1</emphasis> - no remote-url element specified. If no remote-url element is
      specified, the value is automatically computed using the IP address of
      the first active network interface ("eth0"). The resulting values are -
      </para>
      
      <simplelist type='horiz' columns='2'>
      <member>
      remote-url
      </member>

      <member>
      <filename>http://10.10.1.105/solutions</filename>
      </member>

      <member>
      %{url}
      </member>
    
      <member>
      <filename>http://10.10.1.105/solutions/samba-server-5-i386/os</filename>
      </member>
      </simplelist>

      <para>
      <emphasis role='bold'>Example 2</emphasis> - automatic remote url computation using FQDN.
      In this example, the remote url is automatically computed using
      the FQDN of the build machine.
      </para>

      <informalexample>
      <programlisting>
&lt;remote-url fqdn="true" /&gt;
      </programlisting>
      </informalexample>

      <para>
      The resulting values are -
      </para>
 
      <simplelist type='horiz' columns='2'>
      <member>
      remote-url
      </member>

      <member>
      <filename>http://buildserver.company.com/solutions</filename>
      </member>

      <member>
      %{url}
      </member>
    
      <member>
      <filename>http://buildserver.company.com/solutions/samba-server-5-i386/os</filename>
      </member>
      </simplelist>

      <para>
      <emphasis role='bold'>Example 3</emphasis> - automatic remote url computation using a specific interface.
      In this example, the remote url is automatically computed using
      the IP address of the specified interface, "eth1". 
      </para>

      <informalexample>
      <programlisting>
&lt;remote-url interface="eth1"/&gt;
      </programlisting>
      </informalexample>

      <para>
      The resulting values are -
      </para>
 
      <simplelist type='horiz' columns='2'>
      <member>
      remote-url
      </member>

      <member>
      <filename>http://192.168.0.10/solutions</filename>
      </member>

      <member>
      %{url}
      </member>
    
      <member>
      <filename>http://192.168.0.10/solutions/samba-server-5-i386/os</filename>
      </member>
      </simplelist>

      <para>
      <emphasis role='bold'>Example 4</emphasis> - manual configuration of remote url.
      In this example, the solution is created on the build machine, but later
      moved to a web server, or web server farm, for final publication. In this
      case, the remote url must be  manually specified. This example specifies
      an 'http' location; an 'https' location would be specified in the same
      manner.
      </para>

      <informalexample>
      <programlisting>
&lt;remote-url&gt;http://solutions.company.com/&lt;/remote-url&gt;
      </programlisting>
      </informalexample>

      <para>
      The resulting values are -
      </para>
 
      <simplelist type='horiz' columns='2'>
      <member>
      remote-url
      </member>

      <member>
      <filename>http://solutions.company.com</filename>
      </member>

      <member>
      %{url}
      </member>
    
      <member>
      <filename>http://solutions.company.com/samba-server-5-i386/os</filename>
      </member>
      </simplelist>

      </listitem>
    </varlistentry>

    <varlistentry id="boot-options">
      <term>
      boot-options
      </term>

      <listitem>
      <para>
      A TEXT value specifying boot environment variables, or kernel boot
      arguments, for use during client machine installation. Provided as a
      local macro, %{boot-options}, for use within deployment element content,
      primarly the <emphasis>install-script</emphasis>. Also used by CentOS
      Studio during the creation of <emphasis>iso</emphasis> images. 
      </para>

      <para>
      In the CentOS Studio context, the boot-option element is commonly used to
      automate system installation, in combination with a
      <emphasis>kickstart</emphasis> file. 
      </para>

      <para>
      The <emphasis>boot-options</emphasis> element's text value should be a
      space-separated list of kernel arguments. To enable automated system 
      installations, two options are required: <emphasis>lang</emphasis> and
      <emphasis>keymap</emphasis>. These control the language displayed during
      the installation process. They take ISO language and keymap values.
      See below for examples. Use the command <command>locale -a</command>
      to view a list of available language locales.
      </para>
      
      <para>
      For more information on available boot options, see the chapter on
      <emphasis>Boot Options</emphasis> in the <emphasis>Red Hat Enterprise
      Linux Installation Guide</emphasis>
      </para>
      
      <para>
      When creating iso images, including the boot.iso image, CentOS Studio
      appends provided options to each "append" line in the syslinux
      configuration file. In addition, iso images are automatically configured
      to use a kickstart, if provided. 
      </para>

      <para>
      Boot-options is an optional element. The default value is an empty string.
      </para>

      <para>
      <emphasis role='bold'>Examples</emphasis>
      </para>

      <para>
      The following two examples show language and keymap values for US English
      and Greek, respectively.
      </para>

      <informalexample>
      <programlisting>     
&lt;boot-options&gt;lang=en_US keymap=us&lt;/boot-options&gt;
&lt;boot-options&gt;lang=el_GR keymap=gr&lt;/boot-options&gt;
      </programlisting>
      </informalexample>

      </listitem>
    </varlistentry>

    <varlistentry id="kickstart">
    <term>
    kickstart
    </term>
  
    <listitem>
    <para>
    The kickstart element specifies the text of a kickstart file.  CentOS
    Studio makes the kickstart available as a file named named
    <filename>ks.cfg</filename> included in the <filename>os</filename> folder
    of the solution repository, e.g.
    <filename>http://server.company.com/solutions/samba-server-5-i386/os/ks.cfg</filename>.
    It also includes the kickstart in all ISO images including boot.iso. 
    </para>
  
    <xi:include href="common.xml"
                  xpointer="xpointer(//*[@id='element-kickstart']/*)"/>
  
  
    <para>
    <emphasis role='bold'>Examples</emphasis>
    </para>
  
    <para>
    <emphasis role='bold'>Example 1</emphasis> - The following example provides
    the text of a kickstart file providing all information required to fully
    automate client machine installations. It uses
    <varname>%{hostname}</varname> and <varname>%{crypt-password}</varname>
    macros.
    </para>

    <informalexample>
    <programlisting>
&lt;publish hostname="samba-live" password="secret"&gt;
&lt;kickstart&gt;
<xi:include href='examples/ks.cfg' parse='text'/>
&lt;/kickstart&gt;
&lt;/publish&gt;
    </programlisting>
    </informalexample>
  
    <para>
    <emphasis role='bold'>Example 2</emphasis> - This example includes text
    from an external kickstart file using XInclude.
    </para>
    <informalexample>
    <programlisting>
&lt;kickstart&gt;
&lt;xi:include href="ks.cfg" parse="text"/&gt;
&lt;/kickstart&gt;
    </programlisting>
    </informalexample>

    </listitem>
    </varlistentry>

    <!--deploy attributes and elements -->

    <varlistentry id="activate-script">
      <term>
      activate-script
      </term>

      <listitem>
      <para>
      The <varname>TEXT</varname> of a script used to activate one or more
      machines, or determine if one or more machines are active. The script must
      return a non-zero exit status if activation fails.
      </para>

      <para>
      Activate-script is optional for the publish element, and required for
      test-install and test-update.
      </para>

      <para>
      <emphasis role='bold'>Example</emphasis> - This example uses a python
      script to attempt a connection to a virtual machine on the build machine.
      The virtual machine is identified using the
      <varname>%{hostname}</varname> macro. If the virtual machine does not
      exist or cannot be activated, the script returns an exit status of '1'.
      </para>

      <informalexample>
      <programlisting>
&lt;publish hostname="samba-live" password="secret" &gt;

&lt;activate-script&gt;<xi:include href='examples/deploy.xml' 
  xpointer="xpointer(/*/activate-script/text())"/>&lt;/activate-script&gt;

&lt;/publish&gt;
      </programlisting>
      </informalexample>

      </listitem>
    </varlistentry>

    <varlistentry id='delete-script'>
      <term>
      delete-script
      </term>

      <listitem>
      <para>
      The <varname>TEXT</varname> of a script used to delete, remove or destroy
      one more machines in preparation for a clean installation. The script
      must return a non-zero exit status if machine deletion fails.
      </para>

      <para>
      Delete-script is optional for the publish element, and required for the
      test-install and test-update elements.
      </para>

      <para>
      <emphasis role='bold'>Example</emphasis> - In this example, a bash script
      is used to destroy and undefine a virtual machine specified using the
      <varname>%{hostname}</varname> macro. The command <command>set
      -e</command> is used at the beginning of the script to indicate that if
      any command in the script fails, the script should return a non-zero exit
      status.  Typically bash scripts return the exit status of the last
      command executed in the script.
      </para>

      <informalexample>
      <programlisting>
&lt;publish hostname="samba-live" password="secret" &gt;

&lt;delete-script&gt;<xi:include href='examples/deploy.xml' 
            xpointer="xpointer(/*/delete-script/text())"/>&lt;/delete-script&gt;

&lt;/publish&gt;
      </programlisting>
      </informalexample>
      </listitem>
    </varlistentry>

    <varlistentry id="install-script">
      <term>
      install-script 
      </term>

      <listitem>
      <para>
      The <varname>TEXT</varname> of a script used to perform system
      installation to one or more machines. The script must return a non-zero
      exit status if installation fails. 
      </para>

      <para>
      The install-script is commonly used with the
      <varname>%{hostname}</varname> and <varname>%{url}</varname> macros.
      </para>

      <para>
      Install-script is optional for the publish element, and required for the
      test-install and test-update elements.
      </para>

      <para>
      <emphasis role='bold'>Example</emphasis> - This example uses three
      elements <emphasis>boot-options</emphasis>,
      <emphasis>kickstart</emphasis> and <emphasis>install-script</emphasis>.
      </para>
      
      <para>
      The <emphasis>boot-options</emphasis> element specifies language settings
      for the installer. These are required for automated system installation.
      </para>

      <para>
      The <emphasis>kickstart</emphasis> element provides settings for the
      client machine. A kickstart is also required for automated system
      installation.
      </para>

      <para>
      The <emphasis>install-script</emphasis> element provides a a bash script
      which completes the actual machine installation. In this case, the script
      executes the <command>virt-install</command> command to create a new
      virtual machine.  The script uses the <varname>%{hostname}</varname>
      macro to specify a name for the virtual machine, as well as the filename
      for the machine's image. It uses the <varname>%{url}</varname> macro to
      specify the location for the installation files, as well as for the
      kickstart file.  Finally, it uses the <varname>
      boot-options</varname> macro to specify the display language for
      the installer.
      </para>

      <para>
      The <command>set -e</command> command has not been used in this script as
      it was in the <xref linkend="delete-script"/> example. In this case it is
      unnecessary because the script contains only a single command,
      <command>virt-install</command>.
      </para>

      <informalexample>
      <programlisting>
&lt;publish hostname="samba-live" password="secret" &gt;

&lt;boot-options&gt;lang=en_US keymap=us&lt;/boot-options&gt;
&lt;kickstart&gt;&lt;xi:include href="ks.cfg" parse="text"/&gt;&lt;/kickstart&gt;

&lt;install-script&gt;<xi:include href='examples/deploy.xml' 
            xpointer="xpointer(/*/install-script/text())"/>&lt;/install-script&gt;

&lt;/publish&gt;
      </programlisting>
      </informalexample>
      </listitem>
    </varlistentry>

    <varlistentry id="verify-install-script">
      <term>
      verify-install-script 
      </term>

      <listitem>
      <para>
      The <varname>TEXT</varname> of a script that verifies system installation
      on one or more client machines. The script must return a non-zero exit
      status if install verification fails.
      </para>
    
      <para>
      The script can perform any desired actions to verify system installation.
      One recommended action is to scan the
      <filename>/root/install.log</filename> file for "scriptlet failed"
      errors.  Scriptlet failed errors identify issues in which RPM packages,
      quite possibly the config-rpm (defined in the <xref
      linkend='config-rpm'/> element), failed to install as expected. See the
      examples section below for a script that scans for and reports "scriptlet
      failed" errors. See the <emphasis>CentOS Studio User Manual</emphasis>
      for information on troubleshooting "scriptlet failed" errors related to
      the config-rpm.
      </para>
    
      <xi:include href="common.xml"
                  xpointer="xpointer(//*[@id='content-deploy-element']/*)"/>

      <para>
      Verify-install-script is optional for the publish element and required
      for the test-install and test-update elements.
      </para>

      <para>
      <emphasis role='bold'>Example</emphasis> - In this example the <emphasis>
      verify-install-script</emphasis> element provides a bash script which
      uses the <command>grep</command> to scan for scriptlet failed errors in
      the install.log. If errors are found, the script returns an exit status
      of '1', indicating that verification failed.
      </para>

      <informalexample>
      <programlisting>
&lt;publish hostname="samba-live" password="secret" &gt;

&lt;verify-install-script&gt;<xi:include href='examples/deploy.xml' 
            xpointer="xpointer(/*/verify-install-script/text())"/>&lt;/verify-install-script&gt;

&lt;/publish&gt;
      </programlisting>
      </informalexample>
      </listitem>
    </varlistentry>

    <varlistentry id="update-script">
      <term>
      update-script
      </term>

      <listitem>
      <para>
      Updates an installed client, typically by executing the <command>yum
      sync</command> or <command>yum update</command> commands, followed by
      performing update verification as desired.
      </para>
    
      <para>
      The update-script may also be used for post processing after client
      updates.  For example, the update-script may be used to test the running
      system kernel and restart the machine if a new kernel version has been
      installed, as is shown in the example update-script below. Note that
      while post processing actions such as these could be performed in either
      the <emphasis>update-script</emphasis> or the
      <emphasis>post-script</emphasis>, the former is preferable since the
      latter is executed after both installation and updates.
      </para>
      <xi:include href='common.xml'
                  xpointer="xpointer(//*[@id='content-deploy-element']/*)"/>
      
      <para>

      <para>
      Update-script is optional for the publish element, absent from the
      test-install element, and required for the test-update element.
      </para>

      <emphasis role='bold'>Example</emphasis> - In the following example, a
      bash script is provided that updates the client using the <command>yum
      sync</command> command. Thereafter, the script tests for a new kernel, 
      and restarts the client if one is found. The <command>set -e</command> 
      is used to halt processing and return a non-zero exit status if an error
      occurs at any point within the script.
      </para>

      <informalexample>
      <programlisting>
&lt;publish hostname="samba-live" password="secret" &gt;

&lt;update-script&gt;<xi:include href='examples/deploy.xml' 
            xpointer="xpointer(/*/update-script/text())"/>&lt;/update-script&gt;

&lt;/publish&gt;
      </programlisting>
      </informalexample>

      </listitem>
    </varlistentry>

    <varlistentry id="post-script">
      <term>
      post-script 
      </term>

      <listitem>
      <para>
      Provides a script that runs following all other scripts. 
      </para>

      <para>
      For the <emphasis>publish</emphasis> event, this script is useful for
      copying published solution repositories to remote download servers. It
      can also be used to integrate solutions with enterprise systems
      management systems, for example to sync solution repository content with
      software channels in Red Hat Network or Spacewalk. In scenarios such as
      these, it is necessary to set the <emphasis>@ssh</emphasis> attribute to
      a false value.
      </para>

      <para>
      For the <emphasis>test-install</emphasis> and
      <emphasis>test-update</emphasis> events, the
      <emphasis>post-script</emphasis> is useful for activities such as
      completing testing that should run after either install or update, or for
      powering down test machines between runs. 
      </para>
      
      <xi:include href='common.xml'
                  xpointer="xpointer(//*[@id='content-deploy-element']/*)"/>

      <para>Post-script is an optional element.</para>

      <para>
      <emphasis role='bold'>Examples</emphasis> - In this example, the
      <emphasis>post-script</emphasis> is a simple bash script with a single
      command to shut down the client machine.
      </para>

      <informalexample>
      <programlisting>
&lt;post-script&gt;<xi:include href='examples/deploy.xml' 
            xpointer="xpointer(/*/post-script/text())"/>&lt;/post-script&gt;
      </programlisting>
      </informalexample>
      </listitem>
    </varlistentry>
    </variablelist>
  </section>

</section>
