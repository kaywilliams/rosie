<docroot>
  <refentry>
    <!-- comps -->
    <refsect2>
      <title>&lt;comps&gt; (top level)</title>
      <para>
      comps is the container for the comps module's configuration data
      </para>
      <programlisting>
element comps {
  element create-new { ... }
  | element use-existing { ... }
}
      </programlisting>
      <refsection>
        <title>Parents</title>
        <para>distro</para>
      </refsection>
      <refsection>
        <title>Examples</title>
        <para>
        The following are two examples of comps elements.  The first instructs
        dimsbuild to use an already-existing group file, /var/temp/comps.xml.
        </para>
        <programlisting>
&lt;comps&gt;
  &lt;use-existing&gt;
     &lt;path&gt;/var/temp/comps.xml&lt;/comps&gt;
  &lt;/use-existing&gt;
&lt;/comps&gt;
        </programlisting>
        <para>
        The second indicates that comps should generate a new group file.  The group
        file will have both the 'core' and 'base-x' groups included, the second of
        which must come from the repository with id 'fedora-6'.  Furthermore, the
        group file will include the 'createrepo', 'httpd', and 'sudo' packages, and
        excludes the 'vim-minimal' package.
        </para>
        <programlisting>
&lt;comps&gt;
  &lt;create-new&gt;
    &lt;groups&gt;
      &lt;group&gt;core&lt;/group&gt;
      &lt;group repoid='fedora-6'&gt;base-x&lt;/group&gt;
    &lt;/groups&gt;
    &lt;include&gt;
      &lt;package&gt;createrepo&lt;/package&gt;
      &lt;package&gt;httpd&lt;/package&gt;
      &lt;package type='conditional'
               requires='filesystem'&gt;sudo&lt;/package&gt;
    &lt;/include&gt;
    &lt;exclude&gt;
      &lt;package&gt;vim-minimal&lt;/package&gt;
    &lt;/exclude&gt;
  &lt;/create-new&gt;
&lt;/comps&gt;
        </programlisting>
      </refsection>
    </refsect2>
    
    <!-- create-new -->
    <refsect2>
      <title>&lt;create-new&gt;</title>
      <para>
      create-new is a container child of the comps element that indicates that
      dimsbuild should create a new groupfile.
      </para>
      <programlisting>
element create-new {
  element groups { ... }
  &amp; element include { ... }?
  &amp; element exclude { ... }?
}
      </programlisting>
      <refsection>
        <title>Parents</title>
        <para>comps</para>
      </refsection>
    </refsect2>
    
    <!-- group -->
    <refsect2>
      <title>&lt;group&gt;</title>
      <para>
      group is an element that contains the name of a single package group, as defined
      in a groupfile.  Specifically, it must be the same as the id element of a group
      in a groupfile for it to be considered a match.
      </para>
      <programlisting>
element group {
  attribute repoid { text }?,
  attribute default { text }?
}
      </programlisting>
      <refsection>
        <title>Attributes</title>
        <para>group elements have the following attributes:</para>
        <refsection>
          <title>repoid</title>
          <para>
          optional; the id of the repository from which to obtain this group; defaults
          to None, which means that all repositories are considered
          </para>
        </refsection>
        <refsection>
          <title>default</title>
          <para>
          optional; whether or not packages in this store that are of type 'default'
          should be included; defaults to 'true'
          </para>
        </refsection>
      </refsection>
      <refsection>
        <title>Parents</title>
        <para>groups</para>
      </refsection>
      <refsection>
        <title>Example</title>
        <para>
        See comps for an example of a group element
        </para>
      </refsection>
    </refsect2>
    
    <!-- groups -->
    <refsect2>
      <title>&lt;groups&gt;</title>
      <para>
      groups is a container for group elements.  It is used to list the groups that
      should be contained in the groupfile generated by the comps event.
      </para>
      <programlisting>
element groups {
  element group { ... }+
}
      </programlisting>
      <refsection>
        <title>Parents</title>
        <para>create-new</para>
      </refsection>
      <refsection>
        <title>See also</title>
        <para>comps</para>
      </refsection>
    </refsect2>
    
    <!-- package -->
    <refsect2>
      <title>&lt;package&gt;</title>
      <para>
      A package element's text value indicates the name (name-version-release) of an
      RPM in one of the source repositories.
      </para>
      <programlisting>
element package {
  attribute type { text }?,
  attribute requires { text }?,
}
      </programlisting>
      <refsection>
        <title>Attributes</title>
        <para>package elements have the following attributes:</para>
        <refsection>
          <title>type</title>
          <para>
          optional; one of 'conditional', 'default', 'optional', or 'mandatory'; 
          controls the behavior of anaconda when installing packages onto the end
          user system; defaults to 'mandatory'
          </para>
          <para>
          'conditional' packages are installed only if their required package is also
          installed, as indicated by the 'requires' attribute (see below).  'default'
          pacakges are installed if the group to which they belong has its 'default'
          attribute set to true.  'optional' pacakges are installed if at install time
          the user chooses to install all group packages instead of just the default
          set.  'mandatory' packages are always installed.
          </para>
        </refsection>
        <refsection>
          <title>requires</title>
          <para>
          required if type is 'conditional', ignored otherwise; indicates to which RPM
          this package should be conditionally linked
          </para>
        </refsection>
      </refsection>
      <refsection>
        <title>Parents</title>
        <para>include, exclude</para>
      </refsection>
      <refsection>
        <title>Examples</title>
        <para>See comps for an example of a package element</para>
      </refsection>
    </refsect2>
    
    <!-- use-existing -->
    <refsect2>
      <title>&lt;use-existing&gt;</title>
      <para>
      use-existing is a container child of the comps element that indicates that
      dimsbuild should use an existing groupfile.  It contains a single path element
      that points to the groupfile to use.
      </para>
      <programlisting>
element use-existing {
  element path { ... }
}
      </programlisting>
      <refsection>
        <title>Parents</title>
        <para>comps</para>
      </refsection>
    </refsect2>
    
  </refentry>
</docroot>
