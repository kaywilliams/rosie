<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section>
  <title>Building Systems</title>

  <para>Running 
  <application class="software">OpenProvision</application> gathers system
  content, processes it, and creates a complete system repository.</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="build_overview.png" />
      </imageobject>

      <caption><para>OpenProvision Build Process</para></caption>
    </mediaobject>

  <section>
  <title>Build Input</title>

  <para><application class="software">OpenProvision</application> uses three classes of input to create system repositories: a base operating system, package repositories, and configuration files and scripts. System content is specified using a <xref linkend="system_definition">system definition</xref>.</para>

  <itemizedlist>
  <listitem><emphasis role="strong"> Base Operating System.</emphasis> OpenProvision requires a base operating system repository as input for creating new system repositories. The base operating system is defined at the level of operating system name (Red Hat Enterprise Linux or CentOS), version (5) and architecture (i386 or x86_64). The four base operating systems OpenProvision supports are RHEL-5-i386, RHEL-5-x86_64, CentOS-5-i386 and CentOS-5-x86_64. Base operating system repositories must include both network installation images and package repositories. Base operating system repositories are covered in more detail under <xref linkend="specifying-repositories" />.</listitem>

  <listitem><emphasis role="strong">Package Repositories.</emphasis> OpenProvision uses RPM package repositories to locate and download software components for the system repository. OpenProvision requires at least one package repository, that of the base operating system repository. A typical system definition will specify multiple input repositories, including the base operating system update repository, and repositories made available from other internal and external providers. See <xref linkend="specifying-repositories" /> for more information.</listitem>

  <listitem><emphasis role="strong">Configuration Files and Scripts.</emphasis> The final category of system repository content is user-provided configuration files and scripts. Files are copied, and scripts are executed, during client machine installation and updates. For more information, see <xref linkend="configuring-clients" />.</listitem>
  </itemizedlist>
  </section>

  <section>
  <title>Build Process</title>

  <para><application class="software">OpenProvision</application> uses information from the <xref linkend="system_definition"/> to gather system repository content. It processes this information in three primary ways.</para>

  <itemizedlist>
  <listitem><para><emphasis role="strong">Creates a configuration package.</emphasis> OpenProvision creates a <xref linkend="configuration-package" /> in RPM format. This package contains configuration files and scripts specified in the system repository definition. It also contains OpenProvision-generated YUM update configuration. See <xref linkend="updating-client-machines" /> for more information on OpenProvision-generated YUM configuration.</para>

  <para>During this step, OpenProvision also creates a <xref linkend="system-data-file"/>, if one does not exist, in the same folder as the system repository definition. The file has a <filename>.dat</filename> extension. OpenProvision uses the data file to track and increment the configuration package release number.</para></listitem>

  <listitem><emphasis role="strong">Assembles a package repository.</emphasis> Using the system repository definition, OpenProvision compiles a list of required packages. It then resolves package dependencies, downloads packages, adds the configuration package (mentioned in the previous item) and creates a complete, self-contained package repository. The package repository is used during network installations to client machines. It is also used during client machine updates.</listitem>

  <listitem><emphasis role="strong">Customizes network install images.</emphasis> OpenProvision downloads network installation images from the base operating system and modifies them to include system-specific information. By default, OpenProvision configures the installer program contained within the images to access content from the system repository's <xref linkend="download-location"/>. This allows client machines to be installed over the network without needing to provide the download location manually at installation time. OpenProvision can also be used to completely automate client installations. See <xref linkend="automating-installations"/> for more information.</listitem>
  </itemizedlist>

  <para><application class="software">OpenProvision</application> stores system content, both input and generated, in the cache folder, by default <filename type="directory">/var/cache/openprovision/</filename>. It reuses information from the cache on subsequent runs, where possible, to improve build performance.</para>
  </section>

  <section>
  <title>Build Output</title>

  <para>OpenProvision outputs a complete system repository, a system repository data file and a log file.</para>

  <itemizedlist>
  <listitem><emphasis role="strong">System.</emphasis> The primary output of the build process is a complete system repository containing system-specific network installation images and a package repository. Using network installation images you can deploy the system repository to one or more physical or virtual client machines. See <xref linkend="installing-client-machines" /> for more information. The system package repository supports client machine updates using YUM. The section <xref linkend="updating-client-machines" /> provides an overview of OpenProvision's client machine update features.</listitem>

  <listitem><emphasis role="strong">System Data File.</emphasis> As mentioned above, OpenProvision creates a <xref linkend="system-data-file"/> during the build process. This file is used to track and increment the release number of the configuration package.</listitem>

  <listitem><emphasis role="strong">OpenProvision Log File.</emphasis> OpenProvision sends output both to the screen and to a log file, located by default at <filename>/var/log/openprovision.log.</filename></listitem>
  </itemizedlist>

  </section>

  <para>In summary, OpenProvision is a production system life cycle manager
  for use in defining, building and maintaining system repository that can
  be easily installed and updated on physical and virtual machines using
  industry standard deployment and update tools.</para>
</section>
