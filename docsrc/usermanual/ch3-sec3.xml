<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section id="defining-a-system" xreflabel="Defining a System">
  <title>Defining a System</title>

  <para>To define your Samba system, you will need to do the following:</para>

  <para><itemizedlist>
      <listitem>
        <para>Define some basic system information;</para>
      </listitem>

      <listitem>
        <para>Select the repositories from which to download the operating
        system, the Samba RPMs and any dependency files;</para>
      </listitem>

      <listitem>
        <para>Define the application groups and packages to include with the
        operating system; and</para>
      </listitem>

      <listitem>
        <para>Provide configuration information.</para>
      </listitem>
    </itemizedlist></para>

  <section>
    <title>Creating a distribution definition</title>

    <para>The first step to creating a system distribution is creating the
    distribution definition. The distribution definition is a text file in XML format. It can
    be created using any text editor - vi, emacs, nano, or gedit - or 
    a dedicated XML editor, if you prefer. The tags &lt;distribution distribution&gt; and 
    &lt;/distribution&gt; encapsulate all additional elements and attributes.
    </para>

    <para><informalexample>
      <programlisting>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;distribution distribution xmlns:xi="http://www.w3.org/2001/XInclude"&gt;

&lt;!-- Additional elements and attributes --&gt;

&lt;/distribution&gt;</programlisting>
    </informalexample></para>

    <para>The first line, beginning in "&lt;?xml", identifies the file
    as an XML file. This line is not required, but is a good practice for
    compatibility with future XML format changes.</para>

    <para>Likewise, the "xmlns:xi..." attribute is not required on the 
    system element. It allows the use of xinclude statements within the
    document. XIncludes, a convenient mechanism for reusing content across 
    multiple definitions, are discussed in Chapter 4, 
    "Creating a Production Environment".</para>   

  </section>

  <section>
    <title>Naming a system distribution</title>

    <para>The first required element of the definition, 
    <emphasis>main</emphasis>, includes the name of the system distribution, the system
    architecture and the version. These three items make up the default
    system id (<varname>$ID</varname>), which SystemStudio uses to create
    folders for storing the completed system distribution (under 
    <filename type="directory">/var/www/html/distributions</filename>, by
    default) and for caching system distribution content (under 
    <filename type="directory">/var/cache/systemstudio</filename>, by default).
    </para>

    <para><note>
        <para>The elements can be in any order within a distribution definition
        file.</para>
      </note></para>

    <para>In the example below, the system distribution version will be 5, the system
    architecture will be i386, and the <varname>$ID</varname> will
    be <filename>samba-server-5-i386</filename>. </para>

    <para><informalexample>
      <programlisting>
&lt;main&gt;
  &lt;name&gt;samba-server&lt;/name&gt;
  &lt;version&gt;5&lt;/version&gt;
  &lt;arch&gt;i386&lt;/arch&gt;
&lt;/main&gt;</programlisting>
    </informalexample></para>

    <para>You can override the default system id using an
    <emphasis>id</emphasis> element. See the DDFR for more details about the
    <emphasis>main</emphasis> element.</para>

    <para>Save the file as <filename>samba-server.definition</filename> before
    preceding.</para>

    <para><note>
        <para>Each time you change a system distribution's id, either implicitly by
        changing the <emphasis>name</emphasis>, <emphasis>version</emphasis> or 
        <emphasis>arch</emphasis> elements, or explicitly by changing the
        <emphasis>id</emphasis> element, SystemStudio creates new folders for
        it in the publish and cache folders 
        (<emphasis>/var/www/html/distributions</emphasis> and 
        <emphasis>/var/cache/systemstudio</emphasis>, by default,
        respectively). To preserve hard drive space, you may wish to review 
        the publish and cache folders on occasion. Folders for obsolete
        system distributions can be deleted using standard file system methods
        (e.g. <command>rm -rf <emphasis>obsolete_folder</emphasis></command>).
        </para>
      </note></para>

  </section>

  <section id="specifying-repositories" xreflabel="Specifying Repositories">
    <title>Specifying repositories</title>

    <para>SystemStudio obtains software from RPM package repositories. 
    Repositories are collections of RPMs with associated metadata files. 
    Metadata files allow applications, like 
    <application>SystemStudio</application>, to learn about packages in the
    repository, without having to download and inspect each package
    individually. Access to package repositories may be either public or
    restricted. Common public repositories include CentOS 5 Base, CentOS 5 
    Updates, and Extra Packages for Enterprise Linux (EPEL). Access to Red Hat
    Enterprise Linux 5 repositories is restricted. Administrators can create
    custom package repositories using the <application>createrepo</application>
    utility.</para>

    <para>In this section, you will define the repositories to be used for your
    system.</para>

    <itemizedlist>

      <listitem><para>Operating System Base Repository. For CentOS, this will be
      a public or local mirror. For Red Hat Enterprise Linux, an install tree
      created using an ISO image file. This repository is unique in that it also
      contains <filename class="directory">isolinux</filename> and 
      <filename class="directory">images</filename> folders. Your definition
      must include an operating system base repository.</para></listitem>

      <listitem><para>Operating System Update Repositories. For CentOS, again
      this will be a public or local mirror. For Red Hat Enterprise Network, a
      channel within Red Hat Network. Typically, your definition will include
      both base and updates repositories.</para></listitem>

      <listitem><para>Additional Repositories. Your system distribution may 
      include packages from any number of additional public or private 
      repositories.</para></listitem>

    </itemizedlist>

    <para><important>
        <para>You must include a repository definition for the base operating
        system. This repository must contain 
        <filename class="directory">isolinux</filename> and 
        <filename class="directory">images</filename> folders.</para>
      </important></para>

  	<section>
  	  <title>CentOS repositories</title>

      <para>This example directs SystemStudio to use public mirrors to access
      the CentOS 5 base and updates repositories for the i386 architecture.
      </para>

      <para><informalexample>
        <programlisting>
&lt;repos&gt;

  &lt;repo id="base"&gt;
    &lt;name&gt;CentOS-5-Base&lt;/name&gt;
    &lt;baseurl&gt;http://mirror.centos.org/centos/5/os/i386/&lt;/baseurl&gt;
  &lt;/repo&gt;

  &lt;repo id="updates"&gt;
    &lt;name&gt;CentOS-5-Updates&lt;/name&gt;
    &lt;baseurl&gt;http://mirror.centos.org/centos/5/updates/i386/&lt;/baseurl&gt;
  &lt;/repo&gt;

&lt;/repos&gt;</programlisting>
      </informalexample></para>

    </section>

    <section>
    <title>Red Hat Enterprise Linux repositories</title>
      <para>
      Prior to using SystemStudio to access Red Hat Enterprise Linux
      repositories, you will need to complete the following steps:</para>

      <itemizedlist>

        <listitem><para>Create a Red Hat Enterprise Linux 5 install tree. This
        can be accomplished by downloading an ISO image (a single DVD image is
        recommended for easier mounting) from Red Hat Network and using the 
        <command>mount -o loop</command> command to mount the 
        <filename>.iso</filename> to a folder location. See the <emphasis>Red
        Hat Enterprise Linux 5 Installation Guide</emphasis>, under the topic
        <emphasis>Preparing for a Network Installation</emphasis>, for more
        information.</para></listitem>

        <listitem><para>Create a systemid for accessing updates from RHN. This
        step requires an available subscription to Red Hat Enterprise Linux. See
        the Red Hat web site for purchase information. Once you have an 
        available subscription, install Red Hat Enterprise Linux 5 in the
        desired architecture version (i386 or x86_64) onto a client system.
        Register the system to Red Hat Network during installation, or first
        boot, or later using the <command>rhn_register</command> command. Once
        the system has successfully registered with RHN, a systemid file will
        be created in the <filename type="directory">/etc/sysconfig/</filename>
        folder of the machine. This is the file you will use to configure
        SystemStudio to access software from RHN. You may copy this file to the
        SystemStudio build machine if necessary. Note, to ensure the systemid
        has access to the software desired for your system distribution, you can use
        the Red Hat Network web user interface to locate the system, and view
        and alter it's channel subscriptions.</para></listitem>
      </itemizedlist>

      <para>After the above steps are completed, you are ready to specify base
      and updates repositories for Red Hat Enterprise Linux.</para>

      <para>The base repository will point to the Red Hat Enterprise Linux
      install tree, created in the first step above.  In the example below, this
      is located at <filename type="directory">http://www.examplecompany.com/
      install_server/redhat/enterprise/5/en/os/i386/</filename>. This location
      must contain <filename class="directory">isolinux</filename> and 
      <filename class="directory">images</filename> folders.</para>

      <para>The update repository will point to the subscribed channel in RHN
      using a custom <filename>rhn://</filename> protocol in the following
      format:</para>

      <para><command>rhn://[$rhnhost]/$rhnchannel/</command></para>
      

      <para>where $rhnhost is the hostname of the server to contact and
      $rhnchannel is the name of the RHN channel from which to obtain packages.
      If not specified, $rhnhost defaults to a public Red Hat Network server at
      xmlrpc.rhn.redhat.com. Valid $rhnchannel values include:

        <itemizedlist>
          <listitem>rhel-i386-server-5</listitem>
          <listitem>rhel-x86_64-server-5</listitem>
        </itemizedlist>
      </para>

      <para>In the following example, SystemStudio will contact the RHN server
      located at <filename type="directory">xmlrpc.rhn.examplecompany.com
      </filename> and request packages from the 
      <filename>rhel-i386-server-5</filename> software channel.</para>

      <para>
      <informalexample>
      <programlisting>
&lt;repos&gt;

  &lt;repo id="base"&gt;
    &lt;name&gt;Red Hat Enterprise Linux - Base&lt;/name&gt;
    &lt;baseurl&gt;http://www.examplecompany.com/install_server/redhat/enterprise/
            5/en/os/i386&lt;/baseurl&gt;
  &lt;/repo&gt;

  &lt;repo id="updates"&gt;
    &lt;name&gt;Red Hat Enterprise Linux - Updates&lt;/name&gt;
    &lt;baseurl&gt;rhn://xmlrpc.rhn.examplecompany.com/rhel-i386-server-5&lt;/baseurl&gt;
    &lt;systemid&gt;systemid-5Server-i386&lt;/systemid&gt;
  &lt;/repo&gt;

&lt;/repos&gt; 
      </programlisting>
      </informalexample>
      </para>

    </section>

    <para>Now that you've identified package repositories, you are ready
    to start including packages.</para>

  </section>

  <section>
    <title>Specifying packages</title>

    <para>Once you have defined your repositories, you specify the software
    packages and groups to include. Use the <emphasis>packages</emphasis>
    top-level element to accomplish this.</para>

    <para>The example below includes package groups for the <application
    class="software">Samba</application> application and related tools plus an
    X Window System.</para>

    <para><informalexample>
      <programlisting>
&lt;packages&gt;
  &lt;group&gt;core&lt;/group&gt;
  &lt;group&gt;base&lt;/group&gt;
  &lt;group&gt;base-x&lt;/group&gt;
  &lt;group&gt;gnome-desktop&lt;/group&gt;
  &lt;group&gt;admin-tools&lt;/group&gt;
  &lt;group&gt;smb-server&lt;/group&gt;
&lt;/packages&gt;  </programlisting>
    </informalexample></para>

    <para>The system distribution will include the <application
    class="software">GNOME</application> graphical user interface (GUI) and
    common system administration tools.</para>
  </section>

  <section id="configuring-clients" xreflabel="Configuring Client Machines">
    <title>Configuring client machines</title>

    <para>The final step for your samba-server definition is to specify 
    configuration for client machines. 
    <application class="software">SystemStudio</application> allows you to deploy
    and update client machine configuration in the same manner as you deploy and update 
    individual software components, using an RPM package. This simplifies your 
    tasks as a system administrator by allowing you to manage software and 
    configuration using uniform tools and processes. Creating RPM packages 
    manually can be cumbersome and time consuming. 
    <application class="software">SystemStudio</application> makes it easy by 
    creating the <xref linkend="configuration-package"/> automatically during the build process, based 
    on information you provide in the system distribution definition.</para>
   
    <para>Using the <emphasis>config</emphasis> element, you can complete the
    following:

    <itemizedlist>
      <listitem>Configure <application class="software">YUM</application>.
      </listitem>

      <listitem>Install files and folders, either as new files or to replace files installed by other packages.</listitem>

      <listitem>Run scripts that perform actions when RPM packages are installed
      or uninstalled.</listitem>

      <listitem>Require packages to be installed prior to installing the configuration package. This prevents your files from being overwritten, and ensures that your scripts operate as expected.</listitem>

    </itemizedlist></para>

    <section>
      <title>Configuring updates</title>
      <para>SystemStudio creates a configuration package by default, even if 
      no <emphasis>config</emphasis> element is specified in the definition. In
      this case, the configuration package performs just two actions:

      <itemizedlist>
        <listitem>Installs a plugin module for YUM that allows synchronizing 
        packages on the client machine with packages in the system distribution
        repository. See <xref linkend="updating-client-machines"/> for more
        information on the 
        <application class="software">YUM Sync Plugin</application>.</listitem>

        <listitem>Installs a repository definition for the 
        <xref linkend="system-repository"/>. Use the 
        <command>man yum.conf</command> command for more information on YUM 
        repository definitions. For clients installed using the samba-server
        system distribution, the file will be installed at 
        <filename>/etc/yum.repos.d/samba-server.repo</filename>.
        </listitem>
      </itemizedlist>
      </para>

      <para>The sync plugin can be disabled on individual client machines using 
      the <filename>/etc/yum/yumplugin.d/sync.conf</filename> file. The sync 
      plugin can be excluded from the configuration package altogether using
      the <emphasis>config/updates</emphasis> element. See the DDFR for more 
      information on <application class="software">YUM</application> update 
      configuration using the <emphasis>/config/updates</emphasis> element.
      </para>

      <para>For the samba-server example, you will use the default update
       settings.</para>

    </section>

    <section>
      <title>Installing files</title>

      <para>The <emphasis>config</emphasis> element allows you to specify files to be installed at certain locations on the client system. For the samba-server system, you will install two files, a <filename>smb.conf</filename> file for configuring the samba server, and a <filename>yum-sync.sh</filename> cron script file for executing the <command>yum sync</command> command, provided by the YUM Sync Plugin, on a daily basis.</para>

      <para>First, create a basic smb.conf file containing the following content. For this example we are configuring the samba server to provide anonymous, read-only access to content in the client machine's <filename>/public</filename> folder. </para>

      <para><informalexample>
        <programlisting>
[global]
  workgroup = WORKGROUP
  netbios name = SAMBA
  security = share

[public]
  comment = Public
  path = /public
  read only = no
  guest only = yes
        </programlisting>
      </informalexample></para>

      <para>Save the smb.conf file in the same folder as the <filename>samba-server.definition.</filename></para>

      <para>Next, add the following section to your samba-server.definition file:</para>

      <para><informalexample>
        <programlisting>
&lt;config&gt;

  &lt;!-- samba configuration --&gt;
  &lt;files destdir="/etc/samba" mode="644"&gt;smb.conf&lt;/files&gt;

  &lt;!-- yum configuration --&gt;
  &lt;files destname="yum-sync.cron" destdir="/etc/cron.daily" mode="644"
  content="text"&gt;
#!/bin/sh
/usr/bin/yum sync
  &lt;/files&gt;

&lt;/config&gt;
        </programlisting>
      </informalexample></para>

      <para>The example above includes two <emphasis>files</emphasis> elements. The first element directs SystemStudio to locate a file named smb.conf in the same folder as the system distribution definition, download it, include it in the configuration package for installation to the <filename>/etc/samba</filename> folder with the file mode "644". The second element directs SystemStudio to create a new file named <filename>yum-sync.cron</filename>, containing the text supplied between the &lt;files&gt; and &lt;/files&gt; tags, and include it configuration package for installation to the <filename>/etc/cron.daily</filename> folder with the mode "644".</para>

      <note>SystemStudio resolves all paths in the definition relative to the definition's folder location.</note>
      <note>The attribute value <emphasis>content="text"</emphasis> provides a convenient way to include short files and scripts without needing to create and manage separate files on disk. Larger files can also be created this way, however, this makes the definition more difficult to read.</note>

    </section>

    <section>
      <title>Executing scripts</title>

      <para>The <emphasis>config</emphasis> element also allows you to run scripts when packages are installed and uninstalled.</para>

      <para>For the samba-server example, let's include a script to restart the samba daemon each time the configuration package is installed or updated.</para>

      <para><informalexample>
        <programlisting>
&lt;config&gt;

  ...

  &lt;script type="post" content="text"&gt;service smb restart&lt;/script&gt;

&lt;/config&gt;
        </programlisting>
      </informalexample></para>

      <para>Scripts are discussed in more detail under <xref linkend="using-scripts-and-triggers"/>.</para>

    </section>

    <section>
      <title>Requiring Packages</title>

      <para>Using the <emphasis>requires</emphasis> element you can specify packages that must be installed prior to installing the configuration package, for example, so that your scripts will execute as expected.</para>

      <para>For the samba-server example, the <emphasis>samba</emphasis> package is required to enable the command <command>service smb restart</command> used in the <emphasis>script</emphasis> element above.</para>

      <para><informalexample>
        <programlisting>
&lt;config&gt;
  ...

  &lt;requires&gt;samba&lt;/requires&gt;

&lt;/config&gt;
        </programlisting>
      </informalexample></para>

    </section>

    <para>For more information on child elements of <emphasis>config</emphasis>,
    see the <emphasis>config</emphasis> element in the DDFR.</para>

  </section>

  <section>
    <title>Validating a definition</title>

    <para>Your complete samba-server distribution definition should now look as follows:</para>

    <para><informalexample>
      <programlisting>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;distribution distribution xmlns:xi="http://www.w3.org/2001/XInclude"&gt;

&lt;main&gt;
  &lt;name&gt;samba-server&lt;/name&gt;
  &lt;version&gt;5&lt;/version&gt;
  &lt;arch&gt;i386&lt;/arch&gt;
&lt;/main&gt;

&lt;repos&gt;
  &lt;repo id="base"&gt;
    &lt;name&gt;CentOS-5-Base&lt;/name&gt;
    &lt;baseurl&gt;http://mirror.centos.org/centos/5/os/i386/&lt;/baseurl&gt;
  &lt;/repo&gt;
  &lt;repo id="updates"&gt;
    &lt;name&gt;CentOS-5-Updates&lt;/name&gt;
    &lt;baseurl&gt;http://mirror.centos.org/centos/5/updates/i386/&lt;/baseurl&gt;
  &lt;/repo&gt;
&lt;/repos&gt;

&lt;packages&gt;
  &lt;group&gt;core&lt;/group&gt;
  &lt;group&gt;base&lt;/group&gt;
  &lt;group&gt;base-x&lt;/group&gt;
  &lt;group&gt;gnome-desktop&lt;/group&gt;
  &lt;group&gt;admin-tools&lt;/group&gt;
  &lt;group&gt;smb-server&lt;/group&gt;
&lt;/packages&gt;  

&lt;config&gt;
  &lt;!-- samba configuration --&gt;
  &lt;files destdir="/etc/samba" mode="644"&gt;smb.conf&lt;/files&gt;
  &lt;script type="post" content="text"&gt;service smb restart&lt;/script&gt;
  &lt;requires&gt;samba&lt;/requires&gt;

  &lt;!-- yum configuration --&gt;
  &lt;files destname="yum-sync.cron" destdir="/etc/cron.daily" mode="644"
  content="text"&gt;
#!/bin/sh
/usr/bin/yum sync
  &lt;/files&gt;

&lt;/config&gt;

&lt;/distribution&gt;
      </programlisting>
    </informalexample></para>

    <para>Once your definition is complete, you can use 
    <application class="software">SystemStudio</application> to validate
    it's syntax.</para>

    <para>
    <informalexample>
      <programlisting>#systemstudio --validate-only samba-server.definition</programlisting>
    </informalexample>
    </para>

    <para>If your definition is valid, 
    <application class="software">SystemStudio</application> will display the 
    complete definition and exit. Otherwise, it will display error information,
    allowing you to locate and correct issues.</para>

  </section>

</section>
