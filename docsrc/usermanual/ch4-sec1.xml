<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section>
  <title>Overview</title>

  <para>The traditional system development life cycle (SDLC) includes several
  stages, such as requirements analysis, system architecture, design and
  implementation, testing, deployment and maintenance. The stages with which
  SystemBuilder is an integral part are implementation, testing, deployment and
  maintenance. Within the SystemBuilder realm, implementation and testing include
  development, with a development build machine and client machines, which can 
  be virtual machines, for testing installation and updates. A
  second phase of testing includes staging, which allows you to
  test the pre-release system before releasing it for production.
  This simulated environment includes completing the build and deployment
  processes plus using the system distribution as intended for a period of time. The
  final component, production, enables deployment of the system distribution to a client
  system. Maintenance is an on-going process that could involve all of these
  stages.</para>

  <para>The advantage of using a repetitive isolated 
  process as described above is that you can develop, test and fine-tune
  your system distribution before gradually testing its performance in a simulated 
  environment and, finally, releasing it for real-world use. Within the Linux
  release environment, applications and operating system are updated and upgraded at a variety
  of rates. This process gives you optimum control over what patches, updates,
  enhancements and upgrades you choose to maintain and release in your
  production environment.</para>

  <section>
    <title>The Production Process Step-by-Step</title>

    <para><application class="software">SystemBuilder</application>'s logical network
    diagram, below, and subsequent description of steps covers the process in
    more detail.</para>

    <para><mediaobject>
        <imageobject>
          <imagedata fileref="logical_network.png" />
        </imageobject>
      <caption><para>SystemBuilder Logical Network</para></caption>
      </mediaobject></para>

    <para>To set up production environment with <application
    class="software">SystemBuilder</application>, you will need a Development 
    system (D); a Version Control system (V); a Staging system (S);
    and a Production system (P). Development and Staging will contain
    identical installations of a <application
    class="software">SystemBuilder</application> version. The Production system,
    which will serve as your download server, needs to be web-accessible for 
    client machines to be able to access it to retrieve system content.
    The Version system needs to have a version control system that supports
    Linux clients.</para>

    <para>In early stages of the process, Steps 1-7, you will work with two 
    versions of your system distribution, one for development and one for production. 
    The two versions will be identical with one exception, the <xref 
    linkend="download-location"/>. This will allow you to test client 
    installation, basic functionality, and updates directly from a development 
    machine prior to moving the system distribution to a staging server. In later 
    stages, Steps 5-10, you will work with a single system, the production
    system, across separate network environments, staging and production. 
    The staging process allows you to test client interactions with simulated 
    network servers and services prior to deployment. The staging environment is
    also where you will test ongoing system updates from external package 
    repositories.</para> 

    <para>There are several variables worth noting in the diagram. One is that 
    the hostname for Staging and Production systems is identical; this 
    compatibility will aid in Step 9, migrating the production system distribution to
    a production download server. The hostnames for Development and Version 
    Control are different from the others. Another point about the diagram is 
    that, as mentioned above, the Production system is in a separate network 
    from the Staging system.</para>

    <para><variablelist>
        <varlistentry>
          <term>Step 1: Create Development and Production Definitions</term>

          <listitem>
            <para>During this phase you will work with the Development system
            (D). You will create two definitions, in our example, 
            <filename>samba-server-development.definition</filename> and 
            <filename>samba-server-production.definition</filename>. The 
            definitions will be the same with the
            exception of the download location, specified using the 
            <emphasis>publish</emphasis> element. See the section in this 
            chapter on <xref linkend="production-definitions"/> for more 
            information on creating these files. In addition to creating 
            development and production definitions, you will also create any 
            configuration files necessary for the system to run properly, such 
            as <filename>smb.conf</filename>.</para>

          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Step 2: Build a Development System</term>

          <listitem>
            <para>This step entails building the <emphasis>development</emphasis>
            system distribution, specifically by running the command 
            <userinput>systembuilder samba-server-development.definition
            </userinput>. (You will build the 
            <emphasis>production</emphasis> system distribution in Step 6.) 
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Step 3: Test on Development Clients</term>

          <listitem>
            <para>After building the development system distribution, you will install
            it on development clients and test client functionality. During 
            this step you will also test updates to existing 
            client machines. See <xref linkend="testing-production-updates"/> for
            more information. Steps 1 through 3 are iterative during the 
            development phase, with you incorporating changes to the definition
            and configuration files and testing until you are satisfied with the
            end result.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Step 4: Check-in Definition Files to Version Control</term>

          <listitem>
            <para>Once you are satisfied with the results in Step 3, 
            you will set up your Version Control repository (V) and check in 
            definition and configuration files prior to creating the production 
            system distribution. From this point forward, if you need to adjust
            your system definition or configuration files in any way, you 
            should return to Step 1, checking out and altering these files
            using the Development system. See 
            <xref linkend="versioning-definitions"/> for
            information on using a version control system.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Step 5: Check-out Definition Files to Staging</term>

          <listitem>
            <para>Now that development is complete, you are ready to build, 
            deploy and test the production system distribution on a staging server.
            Check out the repository with the definition and configuration files
            from Version Control. If you made several revisions to the files,
            check out the version you want to deploy.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Step 6: Build a Production System</term>

          <listitem>
            <para>Using <application class="software">SystemBuilder</application> on
            the Staging system (S), build the production system distribution, e.g. 
            <userinput>systembuilder samba-server-production.definition
            </userinput>. In addition you should add a <command>cron</command> 
            instruction on the Staging system to run SystemBuilder on a regular
            basis. This will serve to update the system distribution over time as new
            packages are made available in input repositories. See 
            <xref linkend="creating-a-staging-machine"/> for more information.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Step 7: Test on Staging Clients</term>

          <listitem>
            <para>Next you will deploy and test the system distribution on a Staging
            Client. If the results
            are unsatisfactory, go back to Development (Step 1), check out the
            appropriate files from Version Control, make changes as needed, and 
            continue with steps 2 through 6. Use the iterative
            process in Steps 1-7 until you are satisfied with the results.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Step 8: Check-in Your System to Version Control</term>

          <listitem>
            <para>Once you have successfully built, deployed and tested your
            system on the Staging Client, you can check in the 
            system distribution <emphasis>itself</emphasis> to Version Control. 
            Versioning the system distribution allows you to maintain a record of
            who made changes to the system distribution and when. It also audits what
            changed in each version.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Step 9: Migrate Your System to Production for
          Release</term>

          <listitem>
            <para>Now you are ready to migrate the system distribution that is a result
            of the successful build in Step 6 and that was checked into the 
            Version Control system in Step 8. You will not rerun SystemBuilder
            on the Production system (P). Rather, you will migrate the 
            system distribution to Production and release it for download access.
            This practice also ensures a controlled release into Production,
            which improves the lock-down and control process for releasing
            systems such as DNS or SMTP servers to the production network
            environment.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Step 10: Deploy and Update Your System on Production Clients</term>

          <listitem>
            <para>As in Chapter 2, the "Deploying Clients"
            section, you will create the boot media from the Production system
            and use it to install client machines. In
            turn, the clients will download the system RPMs from the
            Production system. For your production environment, you will most
            likely find it convenient to further automate client installation
            by setting up a PXE boot environment. See 
            <xref linkend="deploying-production-clients"/> for more information.</para>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <para>Once you have deployed the system distribution to production clients, you may
    discover changes that need to be made. Operating system or applications can have
    updates, incorporating bug fixes or other planned changes. They can have
    upgrades or full version releases with new features. Or you may want to
    add or remove applications or change configuration settings. Depending
    upon the change needed, the process will differ. Part III will discuss the
    differences and methods of implementation.</para>
  </section>
</section>
