<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section id="building-config-rpms" xreflabel="Building Configuration Packages">
  <title>Building Configuration Packages</title>

  <para>
  <application class="software">Repo Studio</application> allows you to
  deploy and update client configuration in the same manner as you deploy and
  update individual software components, using RPM packages.  This
  simplifies your tasks as a system administrator by allowing you to manage
  software and configuration using uniform tools and processes.  Creating RPM
  packages manually can be cumbersome and time consuming. <application
  class="software">Repo Studio</application> reduces overhead by creating
  RPMs automatically during the build process, based on information you provide
  in the repository definition, and by providing a framework for you to test
  RPMs.
  </para>

  <para>
  In Repo Studio, configuration packages are defined using
  <emphasis>config-rpm</emphasis> elements. This section covers config-rpm
  parent elements, defining config-rpms and creating config-rpm templates.
  Config-rpm testing is covered in the chapters on <xref
  linkend='testing-system-repos'/> and <xref linkend='testing-package-repos'/>.
  </para>
  
  <section>
  <title>Config-rpm parent elements</title>

    <para>
    Config-rpm elements can be used within four top-level, or
    <emphasis>parent</emphasis>, elements of the repository definition. Those
    elements include the following:
    </para>

    <itemizedlist>
    <listitem>
    The <emphasis>config-rpms</emphasis> (plural) element, a simple container
    for <emphasis>config-rpm</emphasis> (singular) elements. This is the most
    common parent element, and will be shown in the examples below.
    </listitem>

    <listitem>
    Deployment elements including the <emphasis>test-install</emphasis>,
    <emphasis>test-update</emphasis> and <emphasis>publish</emphasis> elements.
    Specifying config-rpms within the context of deployment elements is useful
    for deployment template authors. It allows them to ensure that
    deployment-environment specific configuration is included within the
    repository. This topic is discussed further in the chapter on <xref
    linkend='testing-system-repos'/>, later in this document.
    </listitem>
    </itemizedlist>

    <para>
    See also the <xref linkend='rdfr'/> for more information on the
    above-mentioned parent elements. 
    </para>
  </section>

  <section>
  <title>Defining config-rpms</title>

  <para>
  Using Repo Studio, you can define config-rpms to complete the
  following:
  </para>

  <itemizedlist>
    <listitem>
    Require external packages or capabilities to be installed prior to
    installing the config-rpm. This prevents configuration files from being
    overwritten, and ensures that scripts operate as expected.
    </listitem>

    <listitem>
    Install files and folder of files, either as new files or to replace files
    installed by other packages.
    </listitem>

    <listitem>
    Run scripts that perform actions when the config-rpm is installed, updated
    or uninstalled.
    </listitem>

    <listitem>
    Run scripts that perform actions when other RPM packages are installed
    or uninstalled.
    </listitem>
  </itemizedlist>

  <para>
  The sections below discuss each of these items.
  </para>

  <section>
  <title>Creating a config-rpm element</title>
  <para>
  The first step for defining a config-rpm is to create the
  <emphasis>config-rpm </emphasis> element. The element requires an
  <emphasis>@id</emphasis> attribute which is used in the filename of the
  created RPM. For the web server example, you will give the config-rpm an id
  of <emphasis>httpd-config</emphasis> as shown below. Note that the
  <emphasis>config-rpm</emphasis> element must be included within a containing
  element, the most common of which is the <emphasis>config-rpms</emphasis>
  element shown below.
  </para>

  <informalexample>
  <programlisting>
&lt;config-rpms>
&lt;config-rpm id="httpd-config"&gt;

...

&lt;/config-rpm&gt;
&lt;/config-rpms></programlisting>
  </informalexample>

  <para>
  You can provide additional information about the config-rpm using
  <emphasis>summary</emphasis>, <emphasis>description</emphasis> and
  <emphasis>license</emphasis> elements. See the section on
  <emphasis>config-rpms</emphasis> in the <xref linkend='rdfr'/> for complete
  information.
  </para>
  </section>

  <section>
  <title>Requiring packages and capabilities</title>

  <para>
  Using <emphasis>requires</emphasis> and <emphasis>repo</emphasis> elements
  you can specify packages or capabilities, such as files or virtual
  capabilities, that must be installed prior to installing the config-rpm.
  </para>
  
  <para>
  See the <emphasis>config-rpm</emphasis> section in the <xref linkend="rdfr"/>
  for more information on <emphasis>requires</emphasis> and
  <emphasis>repo</emphasis> elements and on
  <emphasis>capabilities</emphasis>.
  </para>

  <para>
  For the web-server example, several packages and several executable files 
  must be installed as prerequisites for files and scripts contained within the
  httpd-config package.
  </para>

  <para><informalexample>
    <programlisting>
&lt;config-rpm id="httpd-config"&gt;

&lt;requires>httpd&lt;/requires>
&lt;requires>iptables&lt;/requires>
&lt;requires>/bin/ps&lt;/requires>
&lt;requires>/sbin/pidof&lt;/requires>

&lt;/config-rpm&gt;</programlisting>
  </informalexample></para>

  <para>
  In some cases a config-rpm may do nothing more than specify required
  capabilities. This is essentially an alternative to specifying packages using
  <emphasis>packages</emphasis> element discussed in the previous chapter.
  </para>

  <para>
  Using <emphasis>config-rpm/requires</emphasis> elements to specify
  capabilities has several advantages over using <emphasis>package</emphasis>
  elements.
  </para>

  <itemizedlist>
  <listitem>
  <para>
  It supports content reuse. For example, many repositories may require web
  server configuration. By listing web server requirements in a config-rpm
  element, the config-rpm element can be saved as a template in a separate
  file, and included across multiple repositories. This approach is covered in
  more detail under <xref linkend='config-templates'/> later in this chapter.
  </para>
  </listitem>

  <listitem>
  <para>
  It allows specifying files and virtual capabilities in addition to packages.
  This may also allow for greater definition reuse as filenames and virtual
  capabilities are sometimes more stable than package names.
  </para>
  </listitem>
  </itemizedlist>

  <para>
  The <emphasis>config-rpm/repo</emphasis> element, discussed in the RDFR,
  allows you to identify additional input repositories. These elements have the
  same syntax as <emphasis>repos/repo</emphasis> elements, and operationally
  Repo Studio treats them the same. Specifying input repositories within the
  context of a config-rpm is useful when creating config-rpm templates, as it
  allows template authors to ensure that repositories are available to satisfy
  config-rpm requirements.   
  </para>
  </section>


  <section id="installing-files" xreflabel="Installing files">
    <title>Installing files</title>
  
    <para>
    <emphasis>Config-rpm</emphasis> elements allow you to specify files to be
    installed at certain locations on client machines. This is accomplished
    using <emphasis>files</emphasis> elements. 
    </para>
    
    <para>
    The example below shows configuring the client machine firewall for web
    server access.  The files element directs Repo Studio to create a file
    named <filename>iptables-httpd</filename> using text provided in the body
    of the element, and install it to the <filename>/etc/rc.d/init.d</filename>
    folder with the file mode "644". The file itself is written to be OS
    version independent by making use of the %{version} macro to include
    conditional logic.
    </para>
  
    <para><informalexample>
      <programlisting>
&lt;files content='text' destname='iptables-httpd' destdir='/etc/rc.d/init.d'
       mode='750'>
#!/bin/sh
#
#chkconfig: 2345 07 91
#description: Iptables configuration for HTTP
#
VERSION=%{version}
FILE=/etc/sysconfig/iptables

case "$1" in
  "start")
# Enable http traffic through the firewall
if [[ ! `fgrep -e "--dport 80 " $FILE` ]]; then
  if [[ $VERSION == 5 ]]
    then
      sed -i '1,/REJECT/ {/REJECT/i\
-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT
}' $FILE
    else # version 6 and future
      sed -i '1,/REJECT/ {/REJECT/i\
-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT
}' $FILE
  fi
fi
     ;;
  "stop")
     exit 0
     ;;
esac
&lt;/files></programlisting>
    </informalexample></para>
  
    <note>
    The attribute value <emphasis>content="text"</emphasis> provides a
    convenient method to include files in the repository without needing to
    create and manage files on disk. See the Repository Definition File
    Reference (RDFR) for more information on the
    <emphasis>config-rpm/files</emphasis> element.
    </note>
  
  </section>

  <section>
    <title>Using scripts</title>

    <para><emphasis>Config-rpm</emphasis> elements also allow you to run
    scripts when the config-rpm is installed, uninstalled or updated.
    </para>

    <para>For the web-server example, let's include a script that
    accomplishes two functions:

    <itemizedlist>
    <listitem>
    Starts the Apache web service (httpd) and configures it to start at system
    boot
    </listitem>

    <listitem>
    Determines if the new service (<emphasis>iptables-httpd</emphasis> - added
    using the <emphasis>files</emphasis> element) has changed and, if so,
    configures it to start at system boot.  Also starts the
    <emphasis>iptables-httpd</emphasis> service and restarts the
    <emphasis>iptables</emphasis> service, unless the system is in the middle
    of a clean install (i.e. <emphasis>anaconda</emphasis> is in the list of
    active processes).
    </listitem>
    </itemizedlist>
    </para>

    <para>
    We will specify the type for this script as <emphasis>post</emphasis>. Post
    scripts are executed each time the config-rpm is installed or updated.
    </para>

    <para><informalexample>
      <programlisting>
&lt;script type='post'>
# Start web server and configure to start at system boot
SERVICE=httpd
if [[ -z `pidof $SERVICE` ]] ; then
  service $SERVICE start
fi
chkconfig --level 345 $SERVICE on

# Enable http traffic through the firewall
if [[ $changed =  *\ /etc/rc.d/init.d/iptables-httpd\ * ]]; then
  chkconfig --add iptables-httpd
  # /etc/sysconfig/iptables doesn't exist yet if we're running under anaconda
  if ! ps aux | grep "[/]usr/bin/anaconda"; then
    service iptables-httpd start
    service iptables restart
  fi
fi
&lt;/script></programlisting>
      </informalexample></para>

  <section>
  <title>Writing idempotent scripts</title>

  <para>
  Depending on the type of your script, it can run each time the config-rpm is
  installed, uninstalled or updated. For this reason, scripts should be
  written to be idempotent, meaning that they can be run multiple times
  with the same result.
  </para>

  <para>
  Following are some tips for writing idempotent scripts:
  </para>

  <itemizedlist>
  <listitem>
  <para>
  Test if a file exists before deleting it, or use an underlying utility that
  does this for you, for example-
  </para>

  <informalexample>
  <para>
  <command>
if [[ -e <emphasis>file</emphasis> ]]; then rm <emphasis>file</emphasis>; fi
  </command>
  </para>
  <para>
  or
  </para>
  <para>
  <command>
rm -f <emphasis>file</emphasis>
  </command>
  </para>
  </informalexample>
  </listitem>

  <listitem>
  <para>
  Test if a service is running before starting it, or if service interruption
  can be tolerated, restart the service each time instead, for example-
  </para>

  <informalexample>
  <para>
  <command>
if [[ -z `pidof <emphasis>service</emphasis>` ]]; then service <emphasis>service</emphasis> start; fi
  </command>
  </para>
  <para>
  or
  </para>
  <para>
  <command>
service <emphasis>service</emphasis> restart
  </command>
  </para>
  </informalexample>
  </listitem>

  <listitem>
  <para>
  Test if text exists in a file before adding it, for example-
  </para>

  <informalexample>
  <command>
if ! grep "<emphasis>some text</emphasis>" <emphasis>file</emphasis>; then echo "<emphasis>some text</emphasis>" >> <emphasis>file</emphasis>; fi
  </command>
  </informalexample>
  </listitem>
  </itemizedlist>

  <para>
  These are a few of many possible examples. By keeping in mind that your
  scripts can run more than once, you can make the necessary adjustments.
  </para>

  </section>

  <section>
  <title>Running scripts only when installed files change</title>

  <para>
  You may want to perform certain actions, such as restarting system services,
  only when specific files that you are installing change. This eliminates
  unnecessary disruption to previously installed client machines. To do this,
  you can make use of the <emphasis>$changed</emphasis> variable from within
  your scripts.  This variable contains a string-separated list of files,
  currently or previously installed by the config-rpm, that meet one or more of
  the following criteria:
  
  <itemizedlist>
  <listitem>added since the last config-rpm update</listitem>
  <listitem>modified since the last config-rpm update</listitem>
  <listitem>differs from the file on disk</listitem>
  <listitem>removed since the last config-rpm update</listitem>
  </itemizedlist>
  </para>

  <para>
  The section above shows an example script that uses the
  <emphasis>$changed</emphasis> variable to execute only when the
  <emphasis>iptables-httpd</emphasis> file changes.
  </para>
  </section>

  <section>
  <title>Additional resources on writing RPM scripts</title>
  <para>
  Writing scripts for use in RPMs is a broad topic. Fortunately, a number of
  resources exist to provide additional information and examples. Here is a
  list to get you started.
  </para>

  <itemizedlist>
  <listitem>Repository Definition File Reference (RDFR)</listitem>

  <listitem>
  Fedora Documentation Project's <emphasis>RPM Guide</emphasis>
  </listitem> 

  <listitem><ulink
  url="http://fedoraproject.org/wiki/Packaging/ScriptletSnippets"> Fedora
  Packaging ScriptletSnippets wiki page</ulink></listitem>

  <listitem><ulink url="http://www.rpm.org/max-rpm-snapshot/">Maximum
  RPM</ulink></listitem>
  </itemizedlist>
  </section>

  </section>

  <section id="using-triggers" xreflabel="Using triggers">
    <title>Using triggers</title>
  
    <para>
    A trigger is a script, much like the scripts described above, except that
    it runs when an external package or capability is installed or uninstalled.
    Triggers allow config-rpms that depend on other packages to properly
    configure themselves when those other packages are installed or removed.
    See the Fedora Project's documentation website for general information
    on triggers. See also the <xref linkend='rdfr'/> chapter on
    <emphasis>config-rpms</emphasis> for complete information on the
    <emphasis>trigger</emphasis> element, including an example.
    </para>
  </section>
  </section>
 
  <section id='config-templates' xreflabel="Using config-rpm templates">
  <title>Using config-rpm templates</title>

    <para>
    Often you will want to reuse a config-rpm definition across multiple
    repository definitions. This can be accomplished by saving the config-rpm
    definition to a separate file, referred to as a
    <emphasis>template</emphasis>, and inserting the template within a
    repository definition using <xref linkend='xinclude'/>.
    </para>

    <para>
    The following example shows a file named <filename>httpd-config.xml</filename>,
    which is a compilation of the individual examples of this section. For
    reference, the <filename>httpd-config.xml</filename> file is also included in the
    Repo Studio <xref linkend='templates'/> folder.
    </para>

    <informalexample>
    <programlisting>
<xi:include href="templates/httpd-config.xml" parse="text"
            xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
    </informalexample>

    <para>
    This file can be inserted within a repository definition using XInclude
    as shown below:
    </para>

    <informalexample>
    <programlisting>
&lt;config-rpms>
&lt;xi:include href="templates/httpd-config.xml"/>
&lt;/config-rpms></programlisting>
    </informalexample>

    <para>
    See the <xref linkend='rdfr'/> for more information and examples regarding
    <emphasis>XIncludes</emphasis>.
    </para>
  </section>
</section>
