<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section id="using-deployment-templates" 
         xreflabel="Using Deployment Templates"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Using Deployment Templates</title>
  <para>
  The Repo Studio model for automated deployment is simple, yet flexible 
  and extensible. Deployment can occur in a variety of operating environments,
  for example using virtual machines running on a local host, virtual machines
  running on remote or cloud-based hosts, physical machines managed by
  enterprise systems management systems, or unmanaged physical machines 
  such as consumer desktops.
  </para>

  <para>
  The model includes three deployment cases, <emphasis>test-install</emphasis>,
  <emphasis>test-update</emphasis> and <emphasis>publish</emphasis>. The first
  two cases were introduced in the previous section on <xref
  linkend='using-virtual-machines'/>. The <emphasis>publish</emphasis> case
  will be introduced later in the chapter on <xref
  linkend="deployment-scenarios"/>. Each case is represented by an element of the
  corresponding name in the repository definition.
  </para>

  <para>
  Each deployment element supports a number of options, or sub-elements. These
  sub-elements are consistent across deployment elements, although the default
  behavior varies slightly between them in some instances. The sub-elements are
  described in detail in the chapter on <emphasis>Deployment
  Elements</emphasis> in the <xref linkend='rdfr'/>.
  </para>
  
  <para>
  At a high level, deployment sub-elements serve to specify -
  </para>
  
  <itemizedlist>
  <listitem>
  Deployment repository location, both file path and a web URL.
  </listitem>

  <listitem>
  Client machine information including hostname, domain and password.  
  </listitem>

  <listitem>
  Installer options including boot options and a kickstart file.
  </listitem>

  <listitem>
  Deployment specific config-rpms.
  </listitem>

  <listitem>
  Scripts to delete, install, verify, and update client machines.
  </listitem>
  </itemizedlist>

  <para>
  Many of these sub-elements can be reused across repository definitions, making
  them ideal candidates to be created as templates.  In fact, because many of
  the sub-elements can be used in a mix-and-match fashion, a common practice is
  to save single sub-elements as individual templates. These individual
  templates can then be included directly in repository definitions, or
  nested within composite templates.
  </para>

  <para>
  Repo Studio includes a number of deployment templates in the <xref
  linkend='templates'/> folder. In the previous section, we discussed one of
  these templates, a composite template named
  <filename>virt-deploy.xml</filename>.  In addition to virt-deploy.xml, the
  templates folder includes a subfolder, <filename>deploy</filename>, which
  includes templates for individual sub-elements.
  </para>

  <para>
  This section will cover <filename>virt-deploy.xml</filename> in greater
  detail. It will also describe how you can customize virt-deploy.xml and
  related sub-templates, or create your own, to meet the needs of several 
  alternative deployment scenarios.
  </para>

  <note>
  Do not modify templates in the <xref linkend='templates'/> folder. CentOS
  Studio will overwrite your changes on subsequent updates. Instead, copy
  templates to another location and modify from there.
  </note>

  <section>
  <title>Exploring virt-deploy.xml</title>

  <para>
  The virt-deploy template provides an example for how Repo Studio can be
  used to deploy and maintain client systems. This particular template works by
  providing settings and scripts to accomplish the following:
  </para>

  <itemizedlist>
  <listitem>
  Specify a domain, <emphasis>local</emphasis>, for client machines (domain).
  </listitem>
  <listitem>
  Automate operating system installation using a kickstart file (kickstart).
  </listitem>
  <listitem>
  Configure client machines to allow SSH access from the Repo Studio build
  machine (ssh-config.xml).
  </listitem>
  <listitem>
  Determine whether the client machine should be reinstalled
  (test-triggers.xml).
  </listitem>
  <listitem>
  Activate, delete, and install a virtual machine running on the Repo Studio
  build machine (virt-activate.xml, virt-delete.xml and virt-install.xml).
  </listitem>
  <listitem>
  Verify the client machine installation (verify-install.xml).
  </listitem>
  <listitem>
  Save information about client installation for future use (save-triggers.xml).
  </listitem>
  <listitem>
  Update the client machine (update.xml).
  </listitem>
  <listitem>
  Determine whether a new kernel has been installed and restart the system as
  necessary (check-kernel.xml).
  </listitem>
  </itemizedlist>

  <para>
  The virt-deploy template, shown below, has very little content of its own and
  is largely composed by including sub-templates from the
  <filename>deploy</filename> folder.
  </para>

  <para>
  <emphasis role='strong'>virt-deploy.xml</emphasis>
  </para>
  <informalexample>
  <programlisting>
<xi:include href='templates/virt-deploy.xml' parse='text'/></programlisting>
  </informalexample>

  <para>
  The sections discuss how you can reuse content from virt-deploy.xml and
  sub-templates, or provide alternate templates, to accommodate additional
  deployment scenarios.
  </para>
  </section>

  <section>
  <title>Providing a custom kickstart</title>

  <para>
  Kickstart files let you automate operating system installation by providing
  answers to language, network configuration, keyboard, file system
  configuration, mouse, timezone, root password and other selections.
  </para>

  <para>
  Virt-deploy.xml uses a default kickstart file named
  <filename>ks.cfg</filename> from the deploy folder. Contents of the file are
  shown below.
  </para>

  <para>
  <emphasis role='strong'><filename>ks.cfg</filename></emphasis>
  </para>

  <informalexample>
  <programlisting>
<xi:include href="templates/deploy/ks.cfg" parse='text'/></programlisting>
  </informalexample>

  <para>
  The default <filename>ks.cfg</filename> file uses macros (see the RDFR for
  information on deployment macros) to allow the hostname and root password to
  be filled in at Repo Studio runtime. Often, however, you will want to
  customize additional kickstart options such as timezone, or drive
  partitioning configuration. To do this, you will need to provide a custom
  kickstart element. This can be accomplished using several different methods.
  Perhaps the easiest method, however, is shown in the example
  <emphasis>test-install</emphasis> element below.
  </para>

  <para>
  In this example, you start with a test-install element, add a password
  element and XInclude the virt-deploy template. The XInclude statement is
  varies from ones you have used previously, however, in that it contains an
  xpointer attribute.  Xpointer is used to include all elements from the file,
  <emphasis>except</emphasis> elements named <emphasis>kickstart</emphasis>.
  Finally, you add a kickstart element containing the text content of the
  modified kickstart, in this case, only the timezone has been changed.
  </para>

  <informalexample>
  <programlisting>
&lt;test-install>
&lt;password>secret&lt;/password>
&lt;xi:include href="virt-deploy.xml" 
            xpointer="xpointer(/*/*[name()!='kickstart'])"/>
&lt;kickstart>
network --hostname %{fqdn}
rootpw --iscrypted "%{crypt-password}"
lang en_US
zerombr
bootloader --location=mbr
clearpart --all --initlabel
part / --fstype ext4 --size 1 --grow --asprimary
part swap --recommended
part /boot --fstype ext3 --size 512 --asprimary
timezone America/Denver  #change timezone to Denver
auth --enablemd5 --enableshadow --enablecache
selinux --enforcing
reboot
&lt;/kickstart>
&lt;/test-install></programlisting>
  </informalexample>

  <para>
  See the RDFR for more information on the <emphasis>kickstart</emphasis>
  element, including notes on several kickstart options to avoid when using
  kickstart in combination with Repo Studio.
  </para>

  </section>

  <section>
  <title>Providing custom scripts</title>
  <para>
  Repo Studio allows users to provide scripts for completing various
  deployment and maintenance actions. These scripts can be written in any shell
  scripting language. 
  </para>

  <para>
  The following example shows -
  </para>

  <itemizedlist>
  <listitem>
  Including the <emphasis>poweroff</emphasis> script. The poweroff script can
  be used to shutdown a client following successful completion of the
  <emphasis>update</emphasis> script. This can be useful to conserve system
  resources between test runs. It does have a disadvantage, however, in that it
  increases the time required to complete test runs, as machines must be
  started before testing continues.
  </listitem>
  <listitem>
  Providing a custom <emphasis>virt-install</emphasis> script. In this case we
  are setting the virtual machine RAM at 2GB and the disk image size at 40GB.
  </listitem>
  <listitem>
  Including all elements from the <filename>virt-deploy.xml</filename>
  template, <emphasis>except</emphasis> the <emphasis>check-kernel</emphasis>
  and <emphasis>virt-install</emphasis> scripts. The check-kernel script is
  unnecessary since we are powering off the client after each run.
  </listitem>
  </itemizedlist>
  
  <informalexample>
  <programlisting>
&lt;test-install>
&lt;password>secret&lt;/password>
&lt;xi:include href="poweroff.xml"/>
&lt;script id='virt-install' type='install'>
#!/bin/bash
virt-install --name %{fqdn} --ram 2000 \
             --file /var/lib/libvirt/images/%{fqdn}.img \
             --file-size 40 \
             --location %{url} \
             --extra-args "%{boot-options} ks=%{url}/ks.cfg"\
             --noreboot
&lt;/script>
&lt;xi:include href="virt-deploy.xml" 
            xpointer="xpointer(/*/*[@id!='check-kernel' and
                                    @id!='virt-install'])"/>
&lt;/test-install></programlisting>
  </informalexample>

  <para>
  See the RDFR for complete information on deployment scripts, including the
  comes-before and comes-after attributes which allow ordering of script
  execution.
  </para>

  </section>

  <section id='install-vm-to-remote-host'
           xreflabel='Installing a virtual machine to a remote host'>
  <title>Installing a virtual machine to a remote host</title>

  <para>
  The virt-deploy template makes it easy to create, deploy and maintain virtual
  machines on the local Repo Studio build machine running a lib-virt
  compatible hypervisor (KVM). Your particular deployment scenario, however,
  may require you to work with virtual machines running on remote hosts with
  different hypervisors (e.g. VMware, Hyper-V and Amazon Web Services). To
  support this case, you will need to create a new composite template. This
  template will be similar to <filename>virt-deploy.xml</filename>. In the new
  template, you will need to adjust the <emphasis>domain</emphasis> element,
  and provide custom scripts to replace the <emphasis>virt-activate</emphasis>,
  <emphasis>virt-delete</emphasis> and <emphasis>virt-install</emphasis>
  scripts.
  </para>

  <para>
  For example, a composite template to create, deploy and maintain Amazon
  Machine Images (AMIs) for the Amazon Web Service (AWS), might look as
  follows, where <filename>ami-activate.xml</filename>,
  <filename>ami-delete.xml</filename> and <filename>ami-install.xml</filename>
  contain custom scripts for managing Amazon Machine Images:
  </para>

  <para>
  <emphasis role='strong'><filename>ami-deploy.xml</filename></emphasis>
  </para>
  <informalexample>
  <programlisting>
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;xml xmlns:xi="http://www.w3.org/2001/XInclude">
&lt;!-- install and update an Amazon Machine Image (AMI) -->
&lt;domain>mydomain.com&lt;/domain>
&lt;kickstart>&lt;xi:include href=’deploy/ks.cfg’ parse=’text’/>&lt;/kickstart>
&lt;xi:include href=’deploy/ssh-config.xml’/>
&lt;xi:include href=’deploy/test-triggers.xml’/>
&lt;xi:include href=’ami-activate.xml’/>
&lt;xi:include href=’ami-delete.xml’/>
&lt;xi:include href=’ami-install.xml’/>
&lt;xi:include href=’deploy/verify-install.xml’/>
&lt;xi:include href=’deploy/save-triggers.xml’/>
&lt;xi:include href=’deploy/update.xml’/>
&lt;xi:include href=’deploy/check-kernel.xml’/>
&lt;/xml></programlisting>
  </informalexample>


  </section>

  <section>
  <title>Integrating with existing management solutions</title>
  <para>
  Your organization may have an existing solution for managing system
  deployment and maintenance. You can enable integration with existing
  solutions using custom deployment scripts.
  </para>

  <para>
  To deploy a single client using an existing deployment solution, the
  procedure is the same as discussed above under <xref
  linkend='install-vm-to-remote-host'/>. Specifically, create a new composite
  template with appropriate domain element, and custom activate, delete and
  install scripts.
  </para>
  
  <para>
  Additionally, if your existing solution also manages system updates, you
  will either remove the update script from your composite template, or
  provide a custom update script that starts the appropriate update procedure
  on your management solution. If the custom script should execute on the
  Repo Studio build machine rather than on the installed client, be sure to
  set the update script's <emphasis>@ssh</emphasis> attribute to false. See the
  RDFR for more information on script attributes.
  </para>

  <para>
  To deploy and update multiple clients based on the same repository
  definition, again you will create a new composite template. In this template,
  you will do the following: 
  </para>

  <itemizedlist>
  <listitem>
  Provide custom scripts that communication with the management solution to
  complete all desired actions
  </listitem>

  <listitem>
  Disable SSH for all scripts using the <emphasis>ssh</emphasis> element
  </listitem>
  
  <listitem>
  Provide a custom kickstart file that does not specify a hostname. The
  hostname will need to be set by dhcp to avoid assigning the same name to
  multiple systems.
  </listitem>
  </itemizedlist>
  
  <para>
  See the example below.
  </para>
  
  <informalexample>
  <programlisting>
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;xml xmlns:xi="http://www.w3.org/2001/XInclude">

&lt;!-- install and update multiple systems using an external solution -->

<!-- custom kickstart - does not specify hostname -->
install
rootpw --iscrypted "%{crypt-password}"
lang en_US
zerombr
bootloader --location=mbr
clearpart --all --initlabel
part / --fstype ext4 --size 1 --grow --asprimary
part swap --recommended
part /boot --fstype ext3 --size 512 --asprimary
timezone America/Vancouver
auth --enablemd5 --enableshadow --enablecache
selinux --enforcing
reboot

<!-- disable script execution on client -->
&lt;ssh>false&lt;/ssh>

<!-- custom scripts -->
&lt;xi:include href=’activate.xml’/>
&lt;xi:include href=’delete.xml’/>
&lt;xi:include href=’install.xml’/>
&lt;xi:include href=’update.xml’/>
&lt;/xml></programlisting>
  </informalexample>
  </section>

  </section>
