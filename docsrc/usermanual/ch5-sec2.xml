<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section id="automating-installations" xreflabel="Section 5.2 Automating Installations">
  <title>Automating Installations</title>

  <para>SolutionStudio can save you time and labor by helping you automate the
  client boot-up and kickstart process.</para>

  <section>
    <title>Kickstarting Client Systems</title>

    <para>Kickstart installations automate the install process of a RedHat operating system
    and make the installations reproducible. You may want to use this method
    if you have large-scale installations, complex storage requirements,
    multiple network interfaces, secure systems or site-specific strategies.
    Within the SolutionStudio process, the kickstart file automates the installation and
    manages several functions during the install: selection of language,
    network configuration, distribution source, keyboard, filesystem, mouse,
    timezone, root password and package handling.</para>

    <para>Instead of managing multiple kickstart files, SolutionStudio lets you make it
    part of the distribution definition. By revision controlling the SolutionStudio files
    (see Part 2), the kickstart process can be controlled, too.</para>

    <para>Use the <emphasis>kickstart</emphasis> element in the
    <filename>samba-server.definition</filename> file to identify one kickstart
    file, as in the example below. Substitute your own kickstart filename for
    <filename>ks.cfg</filename>.</para>

    <para><informalexample>
        <programlisting>&lt;kickstart&gt;ks.cfg&lt;/kickstart&gt;</programlisting>
      </informalexample></para>

    <para>See the DDFR for the <emphasis>kickstart</emphasis> element 
    syntax.</para>

  </section>

  <section>
    <title>Modifying boot.iso and diskboot.img network installation images</title>

    <para>To add custom kernel boot arguments to the <filename
    class="directory">/isolinux/isolinux.cfg</filename> file of the
    <filename>boot.iso</filename> image, use the <emphasis>bootiso</emphasis>
    element in your distribution definition. Substitute your appropriate IP
    addresses.</para>

    <para><informalexample>
        <programlisting>&lt;bootiso&gt;
  &lt;boot-args use-defaults="false"&gt;
  keymap=us lang=en_US ip=192.168.0.222
  netmask=255.255.255.0 gateway=192.168.0.2 dns=192.168.0.7
  &lt;/boot-args&gt;
  &lt;/bootiso&gt;</programlisting>
      </informalexample></para>

    <para>To create a USB diskboot <filename class="extension">IMG</filename>
    file and possibly add custom boot arguments to the
    <filename>/syslinux.cfg</filename> file, use the
    <emphasis>diskboot-image</emphasis> element in your
    <filename>samba-server.definition</filename> file. The example below disables
    the default boot arguments "%{ks}," "%{method}," and "nousbstorage."</para>

    <para><informalexample>
        <programlisting>&lt;diskboot-image enabled="true"&gt;
  &lt;!-- no args will be appended to syslinux.cfg --&gt;
  &lt;boot-args use-defaults="false" /&gt;
  &lt;/diskboot-image&gt;</programlisting>
      </informalexample></para>

    <para>See the DDFR for the complete syntaxes of the 
    <emphasis>bootiso</emphasis> and <emphasis>diskboot</emphasis> elements.
    </para>

  </section>

</section>
