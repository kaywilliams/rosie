<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section id="enterprise" xreflabel="Enterprise"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Enterprise</title>

  <para>
  Enterprise system deployment is typically managed by in-house system
  administrators, often with the assistance of deployment automation
  infrastructure such as network installation servers or more highly integrated
  systems/operations management solutions. Enterprise system administrators can
  use CentOS Studio to perform system integration, testing and maintenance,
  while using existing infrastructure to automate system deployment.
  </para>

  <para>
  Two primary strategies can be followed for integrating CentOS Studio
  repositories with enterprise deployment management systems. One of those is
  to use CentOS Studio repositories for performing Preboot Execution
  Environment (PXE)-based system installations. PXE is an efficient deployment
  infrastructure, supported by most enterprise management solutions.  The other
  strategy is to use CentOS Studio to generate system images in a format
  supported by the deployment system. PXE-based deployment will be discussed in
  this chapter. System image-based deployment will be covered in the chapter on
  <xref linkend='virtual'/>.
  </para>

  <para>
  PXE deployment is recommended over system image deployment, if supported by
  your management system, as it eliminates the added step of creating and
  maintaining system images. See the documentation for your particular
  management solution to learn if it provides support for PXE.
  </para>

  <para>
  CentOS Studio enables PXE deployment by creating system repositories in a
  standard operating system distribution format known as an
  <emphasis>installation tree</emphasis>. An installation tree is a folder in
  the file system that contains all the needed files and subfolders to perform
  a complete system installation.
  </para>

  <para>
  In this section we will first discuss installation tree models and
  benefits of the CentOS Studio model. Then we will explore files included in
  an <emphasis>installation tree</emphasis> at a summary level. With this as
  background, we will discuss how installation trees can be integrated with
  existing PXE-based deployment infrastructure.
  </para>

  <section>
  <title>Installation tree models</title>
  <para>
  Before diving into the details of installation trees and PXE boot
  configuration, it is useful to understand the two models related to
  installation trees.  We refer to these as <emphasis>OS-based
  trees</emphasis> and <emphasis>System-based trees</emphasis> below.
  </para>

  <section>
  <title>OS-based trees</title>
  <para>
  The <emphasis>OS-based trees</emphasis> model is the traditional model. In
  this model there is one installation tree per operating system version and
  architecture combination, for example Cent0S-6-x86_64, RHEL-6Server-x86-64,
  Windows-7Ultimate-x86_64, etc.
  </para>

  <para>
  In this model, system-specific configuration is handled outside of the
  installation tree, typically by using proprietary deployment system features
  to create and maintain system profiles containing information about specific
  software and configuration needed for individual systems.
  </para>

  <para>
  This model has two limitations. The first is that each deployment system must
  provide proprietary support for configuring each operating system. Because
  deployment system vendors have limited resources, often they provide
  comprehensive support for the most widely used operating systems, and limited
  support for others. 
  </para>

  <para>
  The second limitation is related to enterprise customer flexibility. Because
  system-level configuration is stored and managed in proprietary formats,
  enterprise customers cannot easily share configuration across deployment
  systems. Specifically, customers desiring to switch to a new deployment
  system, or to host a system externally that was previously hosted internally,
  or to move a system back or forth between physical and virtual
  infrastructure, are faced with issues of data migration. 
  </para>
  </section>

  <section>
  <title>System-based trees</title>
  <para>
  CentOS Studio enables an alternative model, the <emphasis>system-based
  trees</emphasis> model. In this model, all of the information for deploying
  individual systems is contained in a standard format within the installation
  tree, rather than in a proprietary format within the deployment system. This
  provides enterprise customers with a greater degree of choice and
  flexibility. 
  </para>

  <para>
  Fortunately, the two models are not mutually exclusive. Enterprise system
  administrators can deploy systems using the traditional <emphasis>os-based
  tree</emphasis> model, while at the same time using the using the
  <emphasis>system-based tree</emphasis> model for deploying systems created
  using CentOS Studio.
  </para>

  <para>
  Installation trees are discussed in more detail in the following section.
  </para>

  </section>
  </section>

  <section id='install-trees' xreflabel='Installation Trees'>
  <title>Installation trees</title>
  <para>
  CentOS Studio produces system repositories in a standard operating system
  distribution format known as an <emphasis>installation tree</emphasis>.
  An installation tree is a set of files and folders in the file system.
  Included in the installation tree is a YUM package repository. Also included
  are system boot images needed to perform the installation. Contents of the
  tree are described by a file located at the root of the tree. This file is
  named <filename>.treeinfo</filename>.
  </para>

  <para>
  Deployment automation systems use the treeinfo file to gather information
  about the type of system to be installed, and the location of files within
  the tree.
  </para>

  <para>
  The listings below shows a <filename>.treeinfo</filename> file for the base
  CentOS 6 x86_64 architecture operating system. This particular treeinfo is
  located at <ulink
  url='http://mirror.centos.org/centos/6/os/x86_64/.treeinfo'/>. The file
  provides metadata about the installation tree, as well as a list of included
  images and their locations.
  </para>

  <para>
  <emphasis role='strong'>Treeinfo for the base CentOS 6 x86_64 operating
  system</emphasis>
  </para>

  <informalexample>
  <programlisting>
<xi:include href='http://mirror.centos.org/centos/6/os/x86_64/.treeinfo'
            parse='text'/></programlisting>
  </informalexample>

  <para>
  Sections within the treeinfo file vary across installation trees. Required
  sections are <emphasis>general</emphasis>, <emphasis>images-ARCH</emphasis>
  and <emphasis>stage2</emphasis>.  
  </para>

  <itemizedlist>
  <listitem>
  The <emphasis>general</emphasis> section contains metadata about the tree,
  including the name of the base operating system and variant, if any, and the
  operating system version and architecture. We will discuss the
  <emphasis>variant</emphasis> field further later in this section as we look
  at a CentOS Studio generated treeinfo file.
  </listitem>

  <listitem>
  The <emphasis>images-ARCH</emphasis> section, where <emphasis>ARCH</emphasis>
  is the architecture of the base operating system, provides information about
  minimal boot images for the installation including the kernel and initrd
  (initial ramdisk) images. We will discuss the kernel and initrd images in
  more detail later in this section, as they play an important role in
  enterprise deployment scenarios. 
  </listitem>

  <listitem>
  The <emphasis>stage2</emphasis> section provides information about additional
  images that are loaded by the initrd (or <emphasis>stage1</emphasis>
  image) as it continues the installation process.
  </listitem>
  </itemizedlist>

  <para>
  CentOS Studio generates treeinfo files for the system repositories it
  creates. These files look much like the treeinfo shown above for the base
  CentOS operating system. The major difference is that CentOS Studio uses the
  <emphasis>variant</emphasis> field to list the full name of the repository,
  taken from <emphasis>main/fullname</emphasis> element of the repository
  definition.  It also tailors the image locations, timestamps and checksums to
  reflect appropriate values for the repository. 
  </para>

  <para>
  Following is a <filename>.treeinfo</filename> file produced by CentOS Studio
  for the web-server repository we have been using an example throughout this
  document. This file can be located at
  <filename>/var/www/html/repos/system/web-server-6-x86_64/.treeinfo</filename>.
  </para>

  <para>
  <emphasis role='strong'>Treeinfo for the web-server system repository</emphasis>
  </para>
  <informalexample>
  <programlisting>
[general]
family = CentOS 
timestamp = 1332414545.18
variant = web-server
totaldiscs = 1
version = 6
discnum = 1
packagedir = Packages
arch = x86_64

[images-x86_64]
kernel = images/pxeboot/vmlinuz
initrd = images/pxeboot/initrd.img
boot.iso = images/boot.iso

[stage2]
mainimage = images/install.img

[checksums]
images/boot.iso = sha1:ad145a27e1b55678996816210c79265d97a089a4
images/product.img = sha1:e3b46cda9c9307dbf961cf0381fc51d361fee45f
images/pxeboot/initrd.img = sha1:de0dc556a5682892b8b704d9b3294610cf760af7
images/pxeboot/vmlinuz = sha1:3e26b6cc2837db07768afabced4ae4ff86f05d46
images/install.img = sha1:8423efa5e8d210592b6877d3da86f43502b9fc94</programlisting>
  </informalexample>

  <section>
  <title>Kickstart files</title>
  <para>
  To assist with enterprise deployment scenarios, CentOS Studio includes the
  user-provided kickstart file in the installation trees it generates.  It does
  this in two ways. First, it places a copy of the kickstart at the root of the
  tree as <filename>ks.cfg</filename>. Additionally, it modifies the
  <filename>initrd</filename> file included in the tree, placing the
  <filename>ks.cfg</filename> at the root of the initrd image. 
  </para>

  </section>

  <para>
  The next section discusses how installation trees and kickstart files,
  can be used in PXE-based system deployment.
  </para>

  </section>

  <section>
  <title>PXE-based System Deployment</title>

  <para>
  Because CentOS Studio system repositories are created in a standard
  <emphasis>installation tree</emphasis> format, they can be used with any
  deployment system that supports the Preboot Execution Environment (PXE)
  protocol.
  </para>
  
  <para>
  If you organization does not have an existing systems management solution,
  you can implement a simple PXE-based deployment system using components
  available in the default CentOS and Red Hat Enterprise Linux server operating
  systems. See the advanced topics section of the <emphasis>Red Hat Enterprise
  Linux Installation Guide</emphasis> for more information.
  </para>

  <para>
  To integrate your system repositories with a PXE-based deployment system you
  will first create repositories, and then configure the PXE service to
  expose those repositories. 
  </para>

  <section>
  <title>Create repositories</title>

  <para>
  To enable this scenario, system administrators must first establish a web
  server for deploying system repositories. Similar to the small business
  scenario described in the previous section, the web server can be running on
  any operating system - the only requirements being that 1) client systems can
  access it over HTTP/HTTPS and 2) the CentOS Studio build machine can
  copy/synchronize files to its underlying file system.
  </para>

  <para>
  For this scenario, we assume that the final production machines (e.g.
  laptops, desktops or servers) will be installed using PXE-capable deployment
  systems. As with the small business scenario, maintenance will occur
  automatically using YUM. 
  </para>

  <para>
  Again as in the small business scenario, we assume that production machines
  are strictly managed, specifically that all applications and configuration on
  the machines are controlled by the system administrator rather than by end
  users. Some users may require a greater degree of control over their
  machines, in which case system administrators can accommodate these users
  following a strategy similar to that described under <xref
  linkend='consumer'/>.
  </para>

  <para>
  In fact, the major difference between this scenario and the small business
  scenario is the additional use of PXE deployment infrastructure. All
  other aspects of the small business scenario, including the ability to
  manually install systems via CD/DVD, still apply.
  </para>

  <para>
  See the <xref linkend='smb'/> section for an overview and example skeleton
  system repository definition that applies to both small business and
  enterprise.
  </para>

  <note>
  For enterprise scenarios, you will typically omit the <emphasis>network
  --hostname</emphasis> option from the kickstart file for the repository, as
  the hostname will be provided by DHCP.
  </note>
  </section>

  <section>
  <title>Configure the PXE service to expose repositories</title>
  <para>
  Instructions for PXE boot configuration vary across deployment management
  solutions. In this section, we will discuss PXE boot configuration generally.
  Consult the documentation for your deployment management solution for
  details.
  </para>

  <para>
  In general, configuring your PXE service will involve specifying the location
  for three files, the kernel and initrd images, and the kickstart file. These
  files and their locations within the installation tree are discussed under
  <xref linkend='install-trees'/>.
  </para>

  <para>
  You may need to copy the kernel and initrd image files from the production
  web server to the PXE boot server. This can be accomplished using additional
  elements in the repository definition as shown below. These additions will
  cause the kernel and initrd images to be copied to the PXE server each time
  CentOS Studio updates production images.
  </para>

  <informalexample>
  <programlisting>
&lt;publish>
...
&lt;triggers>treeinfo&lt;triggers>
&lt;script id='sync-to-pxe-server' type='install'/>
#!/bin/sh
rsync -a --delete -e ssh \
"/var/www/html/repos/system/%{id}/images/pxeboot" \
"user@pxe.company.com:/pxe/file/location/%{id}"
&lt;/script>
&lt;publish></programlisting>
  </informalexample>

  <para>
  Once the kernel and initrd images are available to the PXE server, you
  configure the PXE service to install client machines using these files.
  Again, configuration varies from system to system, but in general you should
  specify the boot kernel as the path to the <filename>vmlinuz</filename> file
  copied in the script above.  In addition, you should specify at least two
  kernel boot arguments. These arguments will be the paths to the initrd image
  and the kickstart file. For example -
  </para>

  <informalexample>
  <programlisting>
kernel /path/to/vmlinuz/on/pxeboot/server
append initrd=/path/to/initrd.img/on/pxeboot/server ks=http:/www.company.com/repos/system/web-server-6-x86_64/ks.cfg ...</programlisting>
  </informalexample>

  <para>
  In addition to the <emphasis>initrd</emphasis> and <emphasis>ks</emphasis>
  arguments, a number of additional boot arguments, also known as boot options,
  can be specified. These boot options are described in the <emphasis>Advanced
  Installation options</emphasis> section of the <emphasis>Red Hat Enterprise
  Linux Installation Guide</emphasis>.
  </para>

  </section>
  </section>
</section>

