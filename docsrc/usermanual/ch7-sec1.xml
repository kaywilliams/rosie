<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section id="defining-package-repos" xreflabel="Defining Package Repositories">
  <title>Defining Package Repositories</title>

  <para>
  Defining package repositories is much like defining system repositories, as
  discussed in the chapters on <xref linkend='building-a-system-repo'/> and
  <xref linkend='building-rpms'/> earlier in this document. Technically,
  package repositories are subsets of system repositories, containing just the
  packages needed to deploy application-specific or organization-specific
  software and configuration.
  </para>

  <para>
  Four aspects of particular relevance when creating package repository
  definitions are as follows:

  <itemizedlist>
  <listitem>
  Setting the repository type
  </listitem>

  <listitem>
  Identifying external packages to include
  </listitem>

  <listitem>
  Providing GPG signing keys 
  </listitem>

  <listitem>
  Using configuration templates
  </listitem>
  </itemizedlist>
  </para>

  <section>
  <title>Setting the repository type</title>
  <para>
  The first step for creating a package repository is to add a
  <emphasis>type</emphasis> element to the <emphasis>main</emphasis> top-level
  element, as shown in the example below.
  </para>

  <informalexample>
  <programlisting>
&lt;main&gt;
  ...
  &lt;type&gt;package&lt;/type&gt;
&lt;/main&gt;</programlisting>
  </informalexample>

  <para>
  After using Repo Studio to build the repository, you can locate it in the
  package repositories folder, <filename>/var/www/html/repos/package</filename>
  by default.
  </para>
  </section>

  <section>
  <title>Excluding packages from external repositories</title>
  <para>
  Packages in your repository will often have dependencies on packages in
  external repositories. Repo Studio helps you ensure that your packages will
  install and update as expected by ensuring that required package are
  available.
  </para>

  <para>
  As a convenience, Repo Studio allows you to download packages from external
  repositories and include them in your repository. As a result, users of your
  repository will have fewer repositories to track and manage.
  </para>

  <para>
  In some cases, however, you will want to exclude packages from external
  repositories:
  </para>

  <itemizedlist>
  <listitem>
  Distribution rights. You may not have the rights to distribute some external
  packages.
  </listitem>

  <listitem>
  Operating system independence. You may want to create a single package
  repository that is applicable to users of CentOS or Red Hat Enterprise
  Linux, rather than maintaining separate repositories for each.  
  </listitem>
  </itemizedlist>

  <para>
  You can exclude packages from specific repositories using the <emphasis
  role='strong'>repo/download</emphasis> element. By default, the value of this
  element is <emphasis>'false'</emphasis>, meaning that packages will not be
  downloaded, for repos with the <emphasis role='strong'>@id</emphasis> of
  <emphasis>'base'</emphasis> or <emphasis>'updates'</emphasis> and
  <emphasis>'true'</emphasis> for all others.
  </para>

  <para>
  <emphasis role='strong'>Example</emphasis> - In this example Repo Studio
  will use the <emphasis>'proprietary-repo'</emphasis> to resolve dependencies,
  but will not download packages from it to your repository.
  </para>

  <informalexample>
  <programlisting>
&lt;repos>
&lt;repo id='proprietary-repo'>
...
&lt;download>false&lt;/download>
&lt;/repo>
&lt;/repos></programlisting>
  </informalexample>

  <para>
  For more information, see the <emphasis>Repos</emphasis> section in the <xref
  linkend='rdfr'/>
  </para>
  </section>

  <section>
  <title>Providing GPG signing keys</title>
  <para>
  RPM packages are typically signed with GPG keys as a measure of ensuring
  package authenticity. GPG keys come in pairs, secret and public. Packages are
  signed using the secret key. The private key is distributed to client
  systems, which use it to verify the package at install time.
  </para>
  
  <para>
  Repo Studio automatically signs all packages it creates using
  <emphasis>release-rpm</emphasis>, <emphasis>config-rpm</emphasis> and
  <emphasis>srpmbuild</emphasis> elements.
  </para>

  <para>
  In the default cause, Repo Studio automatically generates a key pair, one
  per repository, and stores key data in the <xref
  linkend="repository-data-file"/>.  For system-type repositories, this
  approach is typically sufficient. Because the public keys are automatically
  distributed and installed on client systems (using the <xref
  linkend='yum-sync-plugin'/> or an external configuration management system),
  end users do not need to recognize and explicitly <emphasis>trust</emphasis>
  the Repo Studio-generated key.
  </para>

  <para>
  The opposite is true for package-type repositories. In this case, public key
  distribution is typically manual, and users are prompted to download and
  install the key after viewing summary information. Thus, for package
  repositories, it is often desirable to provide GPG signing keys containing
  specific, user-recognizable information about the key and provider.
  </para>

  <para>
  Using the <emphasis>gpgsign</emphasis> element, you can provide signing keys
  for use with your repository. The process involves three steps: creating
  keys, exporting keys, and creating the gpgsign element.
  </para>

  <section>
  <title>Creating keys</title>
  <para>
  For our example, we will create keys using the batch mode for GPG key
  creation. While the key is being created, the process may stall and you may
  need to do some additional work (move the mouse, switch windows, download
  some web pages, etc.) to create sufficient random data. 
  </para>

  <para>
  Create a file with the following content. Modify the lines starting with
  <emphasis>Name-Real</emphasis> and <emphasis>Passphrase</emphasis>. The
  passphrase line is optional.
  </para>

  <programlisting>
Key-Type: DSA
Key-Length: 1024
Subkey-Type: ELG-E
Subkey-Length: 1024
Expire-Date: 0
Name-Real: My Repo Studio Signing Key
Passphrase: The quick brown fox jumped over the lazy dog.</programlisting>

  <para>  
  Next, type the following at the command line, replacing
  <emphasis>myfile</emphasis> with the name of the file created above:  
  </para>

  <programlisting>
# gpg --batch --gen-key myfile </programlisting>

  <para>
  Once the process is complete, check that the key was generated successfully
  using the following command:
  </para>

  <programlisting>
# gpg --list-keys</programlisting>

  <para>
  You should see an item with the uid of "My Repo Studio Signing Key"
  </para>
  </section>

  <section>
  <title>Exporting keys</title>
  <para>
  To export the newly created keys from the GPG keyring, complete the following:
  </para>

  <programlisting>
# gpg --export -a "My Repo Studio Signing Key" &gt; RPM-GPG-KEY-mykey
# gpg --export-secret-key -a "My Repo Studio Signing Key" &gt; RPM-GPG-KEY-mykey-secret</programlisting>

  <para>
  You can verify the exported files using the commands:
  </para>

  <programlisting>
# cat RPM-GPG-KEY-mykey
# cat RPM-GPG-KEY-mykey-secret</programlisting>

  <para>
  As each file is listed, it should begin with the following text, respectively: 
  </para>

  <programlisting>
-----BEGIN PGP PUBLIC KEY BLOCK-----</programlisting>

  <programlisting>
-----BEGIN PGP PRIVATE KEY BLOCK-----</programlisting>

  <para>After verifying the exported keys, it is no longer necessary to keep
  them in the GPG keyring. You can delete them from the keyring using the
  following commands:
  </para>

  <programlisting>
# gpg --delete-secret-keys "My Repo Studio Signing Key"  
# gpg --delete-keys "My Repo Studio Signing Key"  </programlisting>
  </section>

  <section>
  <title>Creating the gpgsign element</title>
  <para>
  The final step for providing signing keys manually is to add a <emphasis>gpgsign</emphasis> element. You can do this by copying and pasting the content of the public and secret key files directly into the repository definition (see the <emphasis>gpgsign</emphasis> section in the Repository Definition File Reference for an example), or by using <xref linkend='xinclude'/> as in the example below.
  </para>

  <para>
  To use XInclude, first copy the public and secret key files to a location
  relative to the repository definition, e.g. to the same folder. Then add 
  a <emphasis>gpgsign</emphasis> element as follows:
  </para>

  <programlisting>
&lt;gpgsign&gt;
  &lt;public&gt;&lt;xi:include href="RPM-GPG-KEY-mykey" parse="text"&gt;&lt;public&gt;
  &lt;secret&gt;&lt;xi:include href="RPM-GPG-KEY-mykey-secret" parse="text"&gt;&lt;/secret&gt;
  &lt;passphrase&gt;The quick brown fox jumped over the lazy dog.&lt;/passphrase&gt;
&lt;gpgsign&gt;</programlisting>
  </section>
  </section>

  <section id='using-configuration-templates' 
           xreflabel='Using configuration templates'>
  <title>Using configuration templates</title>
  <para>
  In some cases you will use package repositories to distribute software for
  external use. This is a common scenario for ISV applications, and
  applies to community developed and internal applications as well.
  </para>

  <para>
  Often such software will support multiple possible configurations. You can
  use configuration templates to define and test common configurations.  You
  can distribute these templates along with your repository, making it easy for
  external users to customize and deploy your software in their own
  environments.
  </para>

  <para>
  In the example below you will create and use configuration templates for a
  small repository containing four packages. The first package contains
  application software. We will refer to this package as
  <emphasis>application</emphasis>. The remaining three packages contain
  configuration for three alternative application scenarios. The package names
  are <emphasis>scenario1</emphasis>, <emphasis>scenario2</emphasis> and
  <emphasis>scenario3</emphasis> respectively.
  </para>

  <para>
  Your definition will consist of four files in the file system as shown below:
  </para>

  <informalexample>
  <programlisting>
application.definition
templates/
  scenario1-config.xml
  scenario2-config.xml
  scenario3-config.xml</programlisting>
  </informalexample>

  <para>
  The <filename>application.definition</filename> file defines the repository,
  creates the application package, includes the config templates, and copies
  the templates folder to the repository tree.
  </para>

  <para>
  <emphasis role='strong'>application.definition</emphasis>
  </para>

  <informalexample>
  <programlisting>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;repo xmlns:xi="http://www.w3.org/2001/XInclude"&gt;
&lt;main>
&lt;name>application&lt;/name>
&lt;arch>x86_64&lt;/arch>
&lt;version>6&lt;/version>
&lt;type>package&lt;/type>
&lt;/main>

&lt;srpmbuild id='application'>
&lt;script>
# script to create the application package
&lt;/script>
&lt;/srpmbuild>

&lt;config-rpms>
&lt;xi:include href="templates/scenario1-config.xml"/>
&lt;xi:include href="templates/scenario2-config.xml"/>
&lt;xi:include href="templates/scenario3-config.xml"/>
&lt;/config-rpms>

&lt;files>
&lt;files>templates&lt;/files>
&lt;/files>
&lt;/repo></programlisting>
  </informalexample>

  <para>
  The template files define each of the three config-rpms for the repository,
  for example:
  </para>

  <para>
  <emphasis role='strong'>scenario1-config.xml</emphasis>
  </para>

  <informalexample>
  <programlisting>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;config-rpm id='scenario1-config'>
...
&lt;/config-rpm></programlisting>
  </informalexample>

  <para>
  After using Repo Studio to create your repository, you can locate it at
  <filename>/var/www/html/repos/package/application-6-x86_64</filename>. The
  tree structure of the repository will look as follows:
  </para>

  <informalexample>
  <programlisting>
gpgkeys/
Packages/
repodata/
templates/</programlisting>
  </informalexample>

  <para>
  The templates folder contains copies of the configuration templates.
  Customers can use these as starting points for further customizing and
  deploying your application within their organizations.
  </para>

  </section>
</section>
