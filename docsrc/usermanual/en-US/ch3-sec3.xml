<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="creating-a-definition">
  <title>Creating a Definition</title>

  <para>
  For the purpose of this user guide, examples, processes and illustrations
  will focus on defining, building, deploying and updating an <application
  class="software">Apache</application> web server based on <application
  class="software">CentOS</application> version 6. Apache is a project of
  the <ulink url="http://www.apache.org/">Apache Software Foundation</ulink>. 
  </para>

  <section>
    <title>Creating a definition</title>

    <para>
    A definition is a text file in XML format. It can be created using any text
    editor - vi, emacs, nano, or gedit - or a dedicated XML editor, if you
    prefer. The tags &lt;definition&gt; and &lt;/definition&gt; encapsulate all
    additional elements and attributes. The example below shows a basic web
    server definition.  It is taken from the file at
    <filename>%{templates-dir}/el6/httpd/web-server.definition</filename>.
    </para>

    <para><informalexample>
      <programlisting><xi:include href="../../../../../share/deploy/templates/el6/httpd/web-server.definition" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>
    </informalexample></para>

    <para>
    The first line, beginning in "&lt;?xml", identifies the file
    as an XML file. This line is not required, but it is a good practice to
    include it for compatibility with future XML format changes.
    </para>

    <para>
    Likewise, the attribute
    <constant>xmlns:xi="http://www.we.org/2001/XInclude"</constant> is not
    required on the "&lt;definition>" element. It is strongly recommended,
    however, as it allows the use of XIncludes within the document. XIncludes
    are a convenient mechanism for reusing content across multiple definitions,
    and most definitions will make heavy use of them. XIncludes are discussed
    in more detail in the <ulink
    url='http://www.deployproject.org/docs/DDFR'>Deploy Definition File
    Reference (DDFR)</ulink>.
    </para>   
  </section>

  <section>
    <title>Saving a definition</title>
    
    <para>
    Definitions are commonly saved with the name of the repository
    and the file extension "<filename>.definition</filename>", e.g.
    <filename>web-server.definition</filename>.
    </para>

    <warning>
    <para>
    Definitions may contain sensitive data including system root passwords and
    GPG private keys. Take care to save your definitions, and related files
    including data files and templates, in a secure location.
    </para>
    </warning>
  </section>

  <section>
    <title>Naming a system</title>

    <para>
    The first required element of the definition, <emphasis>main</emphasis>,
    includes the name of the system, the base operating system, the
    OS version and architecture, and a system id. Deploy uses the
    system id to create folders for storing the completed system (under
    <filename class="directory">/var/www/html/deploy/systems</filename>, by 
    default) and for caching system content (under <filename
    class="directory">/var/cache/deploy/systems</filename>, by default).
    </para>

    <para><note>
        <para>The elements can be in any order within a definition.
        </para>
      </note></para>

    <para>
    Typically you will want to complete the main section of your definition
    using macros. Macros make your definition flexible, so that you can
    provide content once, and reuse it through the remainder of your 
    definition.
    </para>

    <para>
    To make use of macros, create your definition as shown below:
    </para>

    <para><informalexample>
      <programlisting>&lt;macro id='name'>web-server&lt;macro>
&lt;macro id='os'>centos&lt;macro>
&lt;macro id='edition'>server&lt;macro>
&lt;macro id='version'>6&lt;macro>
&lt;macro id='arch'>x86_64&lt;macro>
&lt;macro id='id'>%{name}-%{os}-%{version}-%{arch}&lt;macro>

&lt;main&gt;
  &lt;name&gt;%{name}&lt;/name&gt;
  &lt;os&gt;%{os}&lt;/os&gt;
  &lt;version&gt;%{version}&lt;/version&gt;
  &lt;arch&gt;%{arch}&lt;/arch&gt;
  &lt;id&gt;%{id}&lt;/id&gt;
&lt;/main&gt;</programlisting>
    </informalexample></para>

    <para>
    The <ulink
    url='http://www.deployproject.org/docs/DDFR'>Deploy Definition File
    Reference (DDFR)</ulink> contains additional details on the main section,
    as well as on creating and using macros.
    </para>

  </section>

  <section id="specifying-repositories">
  <title>Specifying Repositories</title>

    <para>
    During the system build process, Deploy obtains software from existing
    repositories. In this section, you will define repositories
    to be used for creating your system.
    </para>

    <para>
    The easiest way to define repositories is to include them from the
    <filename>repos.xml</filename> template, as shown below:
    </para>

    <informalexample>
    <programlisting>&lt;repos>
&lt;xi:include href="%{templates-dir}/%{norm-os}/common/repos.xml"
            xpointer="xpointer(./repo[@id='%{os}-%{edition}-base' or 
                                      @id='%{os}-%{edition}-updates'])"/>
&lt;/repos></programlisting>
    </informalexample>

    <para>
    The example above does the following:
    </para>

    <itemizedlist>
    <listitem>
    <para>
    It uses the element <varname>xi:include</varname> to include content from
    an external document. The use of this element requires that the
    <varname>xmlns:xi="http://www.w3.org/2001/XInclude"</varname> attribute has
    been set previously in the definition, as discussed under <xref
    linkend='creating-a-definition'/> 
    </para>
    </listitem>
    <listitem>
    <para>
    It uses the attribute
    <constant>href='%{templates-dir}/%{norm-os}/common/repos.xml'</constant> to
    specify the location of the external document.  Deploy resolves the
    <constant>%{templates-dir}</constant> and <constant>%{norm-os}</constant>
    macros at runtime to locate the file in an appropriate folder. 
    </para>
    </listitem>
    <listitem>
    <para>
    It uses the attribute
    <constant>xpointer="xpointer(./repo[@id='%{os}-%{edition}-base' or
    @id='%{os}-%{edition}-updates'])"</constant> to specify an XPath query
    selecting specific content from the document. 
    </para>
    </listitem>
    </itemizedlist>

    <para>
    Templates are discussed previously in this document under <xref
    linkend='working-with-templates'/>.  In addition, the <ulink
    url='http://www.deployproject.org/docs/DDFR'>Deploy Definition File
    Reference (DDFR)</ulink> contains a chapter on Templates, Macros
    and XIncludes.
    </para>

  <section>
  <title>Working with CentOS repositories</title>

    <para>
    The <filename>repos.xml</filename> template is configured to access
    CentOS base and update repositories from the mirror at <filename>http://
    mirror.centos.org/centos</filename>. For improved performance, you may 
    wish to modify the template to use an alternative mirror, as follows:
    </para>

    <itemizedlist>
    <listitem>
    <para>
    View the list of CentOS mirrors at
    <filename>http://www.centos.org/download/mirrors</filename> and select an
    alternative.
    </para>
    </listitem>
    <listitem>
    <para>
    Open the <filename>repos.xml</filename> file(s) in the templates folder and
    modify the baseurl and gpgkey paths to use the new location.
    </para>
    </listitem>
    </itemizedlist>
    </section>

    <section>
      <title>
      Working with Red Hat Enterprise Linux repositories
      </title>

      <para>
      Before you can use the <filename>repos.xml</filename> template with Red
      Hat repositories, you will need to complete several additional steps. 
      These steps require at least one active software subscription.
      Visit the <ulink url="http://www.redhat.com">Red Hat</ulink> website to
      purchase a subscription.
      </para>

      <section>
      <title>Red Hat Enterprise Linux base repositories</title>
      <para>
      Once you have an active subscription, complete the following steps to
      create a base operating system repository and modify the <filename>
      repos.xml</filename> template to use it.
      </para>

      <para>
      First, create a base operating system repository.
      </para>
      <orderedlist>
      <listitem>
      <para>
      From the <ulink url="http://access.redhat.com/home">Red Hat Customer
      Portal</ulink>, download an ISO image for the desired version of Red Hat
      Enterprise Linux. A single DVD image is recommended for easier mounting.
      </para>
      </listitem>
      <listitem>
      <para>
      Mount the ISO image to a folder location as follows:
      </para>
      <informalexample>
      <programlisting>TMPDIR=/mnt/tmp
mkdir $TMPDIR
mount -o loop downloaded.iso $TMPDIR</programlisting>
      </informalexample>
      </listitem>
      <listitem>
      <para>
      Copy contents of the ISO image to a permanent folder. Be sure to also
      copy the hidden <filename>.treeinfo</filename> file from the root of the
      ISO image to the permanent folder to avoid errors during Deploy
      operation. The example below shows coping image contents to a web server
      location on the localhost.
      </para>
      <informalexample>
      <programlisting>DESTDIR=mirror/rhel/enterprise/6Server/en/os/x86_64
mkdir -p /var/www/html/$DESTDIR
cp -pr $TMPDIR/* /var/www/html/$DESTDIR
cp -p $TMPDIR/.treeinfo /var/www/html/$DESTDIR
umount $TMPDIR</programlisting>
      </informalexample>
      <para>
      See the <emphasis>Red Hat Enterprise Linux 6 Installation
      Guide</emphasis>, under the topic <emphasis>Preparing for a Network
      Installation</emphasis>, for more information.
      </para>
      </listitem>
      </orderedlist>

      <para>
      Then, modify the repos.xml template to use the repository you have
      created.
      </para>
      </section>

      <section>
      <title>Red Hat Enterprise Linux updates (CDN) repositories</title>
      <para>
      Updates repositories for Red Hat Enterprise Linux are provided by the Red
      Hat Content Delivery Network (CDN). To access repositories from CDN, you
      will need to obtain SSL certificates, and copy them to the location
      expected by the <filename>repos.xml</filename> template. See the steps 
      below:
      </para>

      <orderedlist>
      <listitem>
      <para>
      Install Red Hat Enterprise Linux on a client machine.
      </para>
      </listitem>
      <listitem>
      <para>
      Register the machine with Red Hat Subscription Manager (RHSM). This can
      be done during installation, or at first boot. Or, post installation
      using the <command>subscription-manager</command> command as follows:
      </para>

      <programlisting>
subscription-manager register
subscription-manager attach --auto
      </programlisting>
      </listitem>
      
      <listitem>
      <para>
      Once the machine has an attached subscription, the necessary SSL key and
      certificates can be located as follows, where <emphasis
      role='strong'>xxx</emphasis> below is a multiple-digit subscription id:
      </para>
      
      <informaltable>
      <tgroup cols='2'>
      <colspec colwidth='1.5in'/>
      <tbody valign='top'>
      <row>
      <entry><emphasis role='strong'>Certificate/Key Type</emphasis></entry>
      <entry><emphasis role='strong'>Certificate/Key Location</emphasis></entry>
      </row>
      <row>
      <entry>sslcacert</entry>
      <entry>/etc/rhsm/ca/redhat-uep.pem</entry>
      </row>
      <row>
      <entry>sslclientcert</entry>
      <entry>/etc/pki/entitlement/xxx.pem</entry>
      </row>
      <row>
      <entry>sslclientkey</entry>
      <entry>/etc/pki/entitlement/xxx-key.pem</entry>
      </row>
      </tbody>
      </tgroup>
      </informaltable>

      <para>
      To use the the key and certificates with Deploy, copy them to the
      <filename>%{templates-dir}/%{norm-os}/common/rhsm</filename> folder.
      Then rename the xxx.pem and xxx-key.pem files as follows, where
      <varname>%{edition}</varname> and <varname>%{version}</varname> are the
      edition and version of the installed operating system, e.g. "server" and
      "6":
      </para>

      <programlisting>
mv xxx.pem %{edition}-%{version}.pem
mv xxx-key.pem %{edition}-%{version}-key.pem
      </programlisting>
      </listitem>
      </orderedlist>

      </section>
    </section>
  </section>

  <section>
    <title>Specifying Packages</title>

    <para>
    Once you have defined external repositories, you can specify packages and
    groups to include. Use the <emphasis>packages</emphasis> top-level element
    to accomplish this.
    </para>

    <para>
    For system repositories, at a minimum you will need the
    <emphasis>core</emphasis> group and, depending on the OS version, a few
    extra packages. Because the minimum set varies across OS
    versions, Deploy provides a template, <filename>packages.xml</filename>,
    to assist with package selection.
    </para>
    
    <para>
    The example below shows including a minimum set of packages using the
    <filename>packages.xml</filename> template.
    </para>

    <para>
    <informalexample>
    <programlisting>
&lt;packages>
  &lt;xi:include href="%{templates-dir}/%{norm-os}/common/packages.xml"
              xpointer="xpointer(./packages[@id='core']/*)"/>
&lt;/packages></programlisting>
    </informalexample>
    </para>

    <para>    
    In addition, you may wish to include the minimal set of packages required
    for a Graphical User Interface (GUI). Again, the set of packages varies
    across OS version, and again the <filename>packages.xml</filename>
    template can assist, as shown in the example below:
    </para>

    <para><informalexample>
      <programlisting>
&lt;packages>
  &lt;xi:include href="%{templates-dir}/%{norm-os}/common/packages.xml"
              xpointer="xpointer(./packages[@id='core' or @id='gui']/*)"/>
&lt;/packages></programlisting>
    </informalexample></para>

    <para>
    Many additional groups exist that may be useful based on your scenario.
    You can browse groups provided by an external repository by opening the
    repository's groups file. The groups file can be located in the
    repository's <filename>repodata</filename> folder, with a filename
    typically ending with <filename>comps.xml</filename>.
    </para>

    <para>
    In addition to groups, you can also specify individual packages, as
    shown below.
    </para>

    <para><informalexample>
      <programlisting>
&lt;package&gt;httpd&lt;/package></programlisting>
    </informalexample></para>

    <para>
    Often, however, for greater flexibility and content reuse, individual
    packages are specified within the context of <xref linkend='config-rpms'/>.
    Config-rpms will be discussed later in this document, in 
    <xref linkend='building-rpms'/>.
    </para>

  </section>

</section>
