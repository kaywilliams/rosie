<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section id="consumer">
  <title>Consumer/OEM</title>

  <para>
  In consumer scenarios, system deployment is typically managed by Original
  Equipment Manufacturers (OEMs). In these scenarios, OEMs preinstall
  client systems with a default set of software and settings, and end users
  have complete flexibility to add and remove software as desired. Client
  maintenance is performed by the end user, or by an automated process running
  on behalf of the end user. The end result is that YUM checks, downloads and
  installs updates from a number of package repositories, many of which are
  maintained by 3rd parties.
  </para>

  <para>
  Deploy can be used in consumer deployment scenarios in two ways.
  First, by automating the creation and maintenance of package repositories for
  distributing hardware drivers and other OEM provided software and
  configuration. This will be discussed further in <xref
  linkend='package-repos'/>.  Second, by automating client system deployment.
  The latter is discussed below.
  </para>

  <section>
  <title>Consumer repository definitions</title>
  <para>
  For consumer scenarios, repository definitions are used primarily to assemble
  packages needed for the system (the packages themselves will exist in
  previously created repositories), and to automate deployment to the client.
  </para>

  <para>
  In general, consumer repository definitions should <emphasis>not</emphasis>
  create RPM packages. A consumer device such as a desktop or laptop has dozens
  of configuration options - from operating system, to applications, to hardware
  drivers and software - and maintaining repositories to represent the
  combination of all options will likely be undesirable.  
  </para>

  <para>
  Instead, consumer system repositories should be thought of as temporal
  mechanisms for automating client installation, potentially one client at a
  time.
  </para>

  <para>
  Key aspects of consumer system repository definitions include the following:
  </para>

  <itemizedlist>
  <listitem>
  <para>
  Disabled release-rpm element. Disabling the release-rpm prevents installed
  client systems from attempting to connect to the system repository (which may
  no longer exist) during YUM updates.
  </para>
  </listitem>
  <listitem>
  <para>
  No config-rpm or srpmbuild elements. Again, since the system repository is
  temporal, all RPMs should be provided by stand-alone package repositories. 
  </para>
  </listitem>
  <listitem>
  <para>
  Optional test-install and test-update elements. In general, these elements
  are not recommended. It is preferable to perform testing at the package
  repository level to avoid overhead at the time of client installation.
  </para>
  </listitem>
  <listitem>
  <para>
  Publish element with a custom kickstart and one or more scripts to automate
  client installation.
  </para>
  </listitem>
  </itemizedlist>

  <para>
  The following example shows a skeleton definition for a consumer system
  repository. The <emphasis>firstboot</emphasis> package along with the
  <emphasis>firstboot --reconfig</emphasis> kickstart option allow consumers 
  to reconfigure the system during first boot.
  </para>

  <para>
  <emphasis role='strong'>Consumer system repository definition</emphasis>
  </para>
  <informalexample>
  <programlisting>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;deploy xmlns:xi="http://www.w3.org/2001/XInclude"&gt;

&lt;main>...&lt;/main>

&lt;repos>...&lt;/repos>

&lt;packages>
...
&lt;package>firstboot&lt;/package>
&lt;/packages>

&lt;release-rpm enabled='false'/>

&lt;publish>
&lt;kickstart>
...
firstboot --reconfig
&lt;/kickstart>

&lt;script id='install' type='install'>
# custom script to install the repository to a client machine
&lt;/script>
&lt;/publish>

&lt;/repo></programlisting>
  </informalexample>
  </section>

  <section>
  <title>Automating consumer repository creation</title>
  <para>
  Manually creating a repository for each consumer system is time consuming
  and potentially error prone. This may be sufficient for a low volume of
  systems. For a higher volume of systems, OEMs can integrate the creation of
  repository definitions with the system selection process. Because definitions
  are in standard XML format, they can be generated using a number of
  programming languages. Once created, they can be verified, and the
  repositories created, by executing the Deploy application
  programmatically.
  </para>
  </section>

  <section>
  <title>Replicated deployment</title>
  <para>
  For high-volume OEM scenarios where the same software and configuration will
  be installed across multiple client systems, an image copy-based approach
  will be preferable to the per-machine installation approach described above.
  See <xref linkend='scale'/> later in this chapter for more information.
  </para>
  </section>
</section>

