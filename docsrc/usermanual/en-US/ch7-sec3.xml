<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section id="testing-package-repos"> 
  <title>Testing Package Repositories</title>

  <para>
  Testing package repositories is a two-step process. First you create the
  package repository. Then you define one or more system repositories to
  perform deployment testing on test machines.
  </para>

  <para>
  The number of system repositories needed to perform the testing varies by the
  number of unique <emphasis>system configuration scenarios</emphasis>
  supported by the package repository. An application-type repository may
  support multiple system configuration scenarios. For example, enterprise web
  applications commonly support both single-machine and scale-out
  (multiple-machine) scenarios. Testing for simple package repositories such as
  configuration, patch and aggregation-type repositories can often be
  accomplished using a single system repository.
  </para>

  <para>
  Package repository testing is typically accomplished through the use of
  multiple files:
  </para>

  <itemizedlist>
  <listitem>
  <para>
  Repository Definition - definition for a package repository.
  </para>
  </listitem>

  <listitem>
  <para>
  Test Machine Template - provides common elements for creating 
  test machines in a given deployment environment.
  </para>

  <para>
  Deploy provides a template, <filename>test.xml</filename>, to
  assist with the task of testing package repositories. The
  <filename>test.xml</filename> template makes use of the
  <filename>virt-deploy.xml</filename> template (described under <xref
  linkend='using-virtual-machines'/>) to allow testing package repositories
  using local virtual machines.
  </para>
 </listitem>
  
  <listitem>
  <para>
  Repository Test Machine Template - user-created template that inherits from
  the <emphasis>test machine template</emphasis> for testing a
  <emphasis>specific</emphasis> package repository.
  </para>
  </listitem>
  
  <listitem>
  <para>
  Scenario Test Machine Definitions - user-created definitions that inherits
  from the <emphasis>Repository Test Template</emphasis> for testing a specific
  package repository <emphasis>scenario</emphasis>. For simple repositories
  that support only a single scenario, the <emphasis>Repository Test Machine
  Template</emphasis> and <emphasis>Scenario Test Machine Definition</emphasis>
  can be combined in a single file.
  </para>
  </listitem>

  <listitem>
  <para>
  Test Script - user-created script that uses Deploy to refresh the
  package repository and complete testing using one or more system repositories.
  </para>
  </listitem>
  </itemizedlist>


  <section id='repodef'>
  <title>Repository Definition</title>
  
  <para>
  Package repository testing starts with a repository definition, as described
  in the previous two sections of this chapter.
  </para>

  <para>
  <emphasis role='strong'>Example Repository Definition</emphasis> The example
  below, named <filename>application.definition</filename>, shows a skeleton
  application repository definition. This definition makes use of configuration
  packages and templates to provide for two unique system configuration
  scenarios, referred to as <emphasis>scenario1</emphasis> and
  <emphasis>scenario2</emphasis>. See <xref linkend='building-config-rpms'/>
  and <xref linkend='using-configuration-templates'/> for background on
  configuration packages and templates.
  </para>

  <para>
  The example definition also provides a <emphasis>publish</emphasis> element
  with a <emphasis>remote-url</emphasis>. This allows repository build and
  testing to occur on the Deploy build machine, with final publishing to
  a remote server.
  </para>

  <informalexample>
  <programlisting>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;repo xmlns:xi="http://www.w3.org/2001/XInclude"&gt;

&lt;main>
&lt;name>application&lt;/name>
&lt;arch>x86_64&lt;/arch>
&lt;version>6&lt;/version>
&lt;type>package&lt;/type>
&lt;/main>

&lt;gpgsign>
&lt;!-- gpgsign elements -->
&lt;/gpgsign>

&lt;repos>
&lt;!-- repository definitions -->
&lt;/repos>

&lt;packages>
&lt;!-- package and group listings -->
&lt;/packages>

&lt;srpmbuild>
&lt;!-- application build definition -->
&lt;/srpmbuild>

&lt;config-rpms>
&lt;xi:include href="../../../../../share/deploy/templates/scenario1-config.xml"/>
&lt;xi:include href="../../../../../share/deploy/templates/scenario2-config.xml"/>
&lt;/config-rpms>

&lt;files>
&lt;files>templates&lt;/files>
&lt;/files>

&lt;publish>
&lt;remote-url>https//repos.company.com/&lt;/remote-url>
&lt;/publish>

&lt;/repo></programlisting>
  </informalexample>

  </section>

  <section id='test-machine-template'>
  <title>Test Machine Template</title>
  <para>
  The next file needed for package repository testing is a test machine
  template. This template provides configuration for testing a package
  repository in a given deployment environment, such as a local or remote
  virtual machine. By default, Deploy provides the
  <filename>test.xml</filename> template, included in the <xref
  linkend='templates'/> folder. This file allows testing package repositories
  using local virtual machines.
  </para>

  <para>
  Users can create alternative templates to substitute with the Deploy
  provided <filename>test.xml</filename> template. These templates can allow
  testing package repositories in environments other than local virtual
  machines.
  </para>

  <para>
  The <filename>test.xml</filename> template, or user-provided alternative,
  defines a number of top level elements for the system repository: Elements
  defined by the test template are typically included in the
  <emphasis>repository test machine template</emphasis>, discussed in <xref
  linkend="repository-test-machine-template"/>. 
  </para>

  <itemizedlist>
  <listitem>
  <para>
  A <emphasis>main</emphasis> element. This sets the <emphasis>name</emphasis>,
  <emphasis>version</emphasis> and <emphasis>arch</emphasis> elements using
  information provided by macros in the <emphasis> repository test machine
  template</emphasis> and <emphasis> scenario test machine
  definitions</emphasis>, described under <xref
  linkend="scenario-test-machine-definitions"/>.
  </para>
  </listitem>

  <listitem>
  <para>
  A <emphasis>packages</emphasis> element providing a list of core packages
  required for the test deployment environment.  <filename>Test.xml</filename>
  lists a single group, <emphasis>core</emphasis>. 
  </para>
  </listitem>

  <listitem>
  <para>
  A <emphasis>repos</emphasis> element with a single repo for the package
  repository to be tested. The baseurl for the repo is provided by a macro in
  the <emphasis>repository test machine template</emphasis>.
  </para>
  </listitem>

  <listitem>
  <para>
  A <emphasis>config-rpms</emphasis> element with a single config-rpm directing
  the test machine to access the package repository from a test server, rather
  than a final published server.  This effectively overrides the
  <emphasis>publish/remote-url</emphasis> element for the package repository,
  if one was provided.
  </para>
  </listitem>

  <listitem>
  <para>
  A <emphasis>test-install</emphasis> element directing Deploy to
  install a test machine in the deployment environment. The
  <emphasis>test-install</emphasis> element in the
  <filename>test.xml</filename> template performs three actions. First, it sets
  a password using a macro provided by the <emphasis>
  repository test machine template</emphasis>. Next it includes all elements
  from the <filename>virt-deploy</filename> template. Finally, it adds a
  <emphasis>poweroff</emphasis> script to shutdown the machine after the test
  process is complete.
  </para>
  </listitem>

  <listitem>
  <para>
  A <emphasis>test-update</emphasis> element directing Deploy to update
  a test machine in the deployment environment. The
  <emphasis>test.xml</emphasis> template simply reuses content from the
  <emphasis>test-install</emphasis> element, since the same actions are
  performed on both test-install and test-update machines.
  </para>
  </listitem>
  </itemizedlist>

  <para>
  <emphasis role='strong'><filename>test.xml</filename></emphasis>
  </para>

  <informalexample>
  <programlisting><xi:include href='../../../../../share/deploy/templates/test.xml' parse='text' xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>
  </informalexample>
  </section>

  <section id='repository-test-machine-template'>
  <title>Repository Test Machine Template</title>
  <para>
  The next file is the repository test machine template. This file provides
  common information for use in testing one or more <emphasis>system
  configuration scenarios</emphasis> for the package repository. It uses
  information from the <emphasis>test machine template</emphasis> (see the
  previous section) and provides information for use by one or more
  <emphasis>scenario test machine definitions</emphasis>, described under <xref
  linkend='scenario-test-machine-definitions'/>.
  </para>

  <para>
  Elements defined in the <emphasis>repository test machine template</emphasis>
  include the following:
  </para>
 
  <itemizedlist>
  <listitem>
  <para>
  <emphasis>Macro</emphasis> elements defining the name, version and arch of
  the package repository, as well as a root password to be used for the test
  machines and a baseurl indicating the location of the repository on the test
  server.  The baseurl must be accessible to both the Deploy build
  machine and the test machine.  When using the <filename>test.xml</filename>
  template, specifically, the baseurl should be a location on the local virtual
  network, e.g.
  <filename>http://192.168.123.1/repos/package/repoid</filename>.
  </para>
  </listitem>

  <listitem>
  <para>
  A <emphasis>main</emphasis> element, included from the <emphasis>test machine
  template</emphasis>
  </para>
  </listitem>

  <listitem>
  <para>
  A <emphasis>packages</emphasis> element including packages from the <emphasis>
  test machine template</emphasis> as well as other package and groups needed
  for testing the repository. In general, the package and group elements you
  specify should be unique to testing the package repository.  The packages you
  are testing are responsible for defining their own general requirements via
  RPM.
  </para>
  </listitem>

  <listitem>
  <para>
  A <emphasis>repos</emphasis> element including the package repository from
  the <emphasis>test machine template</emphasis>, base OS and updates
  repositories, and any other repositories containing packages required for
  testing.
  </para>
  </listitem>

  <listitem>
  <para>
  A <emphasis>config-rpms</emphasis> element including the config-rpm element
  from the <emphasis>test-machine-template</emphasis>, as well as any additional
  configuration needed for testing the repository.
  </para>
  </listitem>

  <listitem>
  <para>
  <emphasis>Test-install</emphasis> and
  <emphasis>test-update</emphasis> elements including corresponding elements
  from the <emphasis>test machine template</emphasis>, or adjusting as necessary
  to suit the needs of the particular package repository.
  </para>
  </listitem>
  </itemizedlist>

  <para>
  <emphasis role='strong'>Example Repository Test Machine Template</emphasis>.
  The skeleton example below, named <filename>application-test.xml</filename>,
  shows a test machine template for the package repository defined under <xref
  linkend='repodef'/>. 
  </para>

  <informalexample>
  <programlisting>&lt;?xml version="2.0" encoding="utf-8"?>
&lt;repo xmlns:xi="http://www.w3.org/2001/XInclude">

&lt;macro id='repo'>application&lt;/macro>
&lt;macro id='version'>6&lt;/macro>
&lt;macro id='arch'>x86_64&lt;/macro>
&lt;macro id='password'>password&lt;/macro>
&lt;macro id='baseurl'>http://192.168.123.1/repos/package/%{repo}-%{version}-%{arch}/&lt;/macro>

&lt;xi:include href='path/to/test.xml' xpointer="xpointer(/*/main)"/>

&lt;packages>
&lt;xi:include href='path/to/test.xml' xpointer="xpointer(/*/packages/*)"/>
...
&lt;/packages>

&lt;repos>
&lt;xi:include href="path/to/test.xml" xpointer="xpointer(/*/repos/*)"/>
...
&lt;/repos>

&lt;config-rpms>
&lt;xi:include href="path/to/test.xml" 
            xpointer="xpointer(/*/config-rpms/config-rpm/*)"/>
&lt;config-rpm id='test-%{repo}-config'>
...
&lt;/config-rpm>
...
&lt;/config-rpms>

&lt;xi:include href="path/to/test.xml"
            xpointer="xpointer(/*/test-install | /*/test-updates)"/>

&lt;/repo></programlisting>
  </informalexample>
  </section>

  <section id='scenario-test-machine-definitions'>
  <title>Scenario Test Machine Definitions</title>

  <para>
  The next files are the scenario test machine definitions. These files provide
  information pertinent to a specific <emphasis>system configuration
  scenario</emphasis> for the package repository. They use information from the
  <emphasis>repository test machine template</emphasis> described in the
  previous section.
  </para>

  <para>
  If your package repository can be tested using a single system
  configuration, you may wish to combine this file with the
  <emphasis>repository test machine template</emphasis> described above into a
  single repository test definition, e.g.
  <filename>application-test.definition</filename>.
  </para>

  <para>
  Elements defined in the <emphasis>repository test machine template</emphasis>
  include the following:
  </para>
 
  <itemizedlist>
  <listitem>
  <para>
  A <emphasis>macro</emphasis> element providing the name of the scenario.
  </para>
  </listitem>

  <listitem>
  <para>
  Additional <emphasis>macro</emphasis> elements and a
  <emphasis>main</emphasis> element, included from the <emphasis>
  repository test machine template</emphasis>
  </para>
  </listitem>

  <listitem>
  <para>
  <emphasis>Repos</emphasis>, <emphasis>packages</emphasis>,
  <emphasis>config-rpms</emphasis>, <emphasis>test-install</emphasis> and
  <emphasis>test-updates</emphasis> elements, each of which includes content
  from the <emphasis>repository test machine template</emphasis> and provides
  additional content, as needed, for testing the specific scenario.
  </para>
  </listitem>
  </itemizedlist>

  <para>
  <emphasis role='strong'>Example Scenario Test Machine Definition</emphasis>
  The skeleton example below, named
  <filename>scenario1-test.definition</filename>, shows a definition for
  testing the <emphasis>scenario1</emphasis> scenario.
  </para>

  <informalexample>
  <programlisting>&lt;?xml version="1.0" encoding="utf-8"?>
&lt;repo xmlns:xi="http://www.w3.org/2001/XInclude">

&lt;macro id='scenario'>scenario1&lt;/macro>

&lt;xi:include href="application-test.xml" xpointer="xpointer(//macro | /*/main)"/>

&lt;repos>
&lt;xi:include href="application-test.xml" xpointer="xpointer(/*/repos/*)"/>
...
&lt;/repos>

&lt;packages>
&lt;xi:include href="application-test.xml" xpointer="xpointer(/*/packages/*)"/>
...
&lt;/packages>

&lt;config-rpms>
&lt;xi:include href="application-test.xml" xpointer="xpointer(/*/config-rpms/*)"/>
...
&lt;/config-rpms>

&lt;test-install>
&lt;xi:include href="application-test.xml" xpointer="xpointer(/*/test-install/*)"/>
&lt;script id='test-install' ssh='true' verbose='true' type='post' comes-after='update'
        comes-before='poweroff'>
...
&lt;/script>
...
&lt;/test-update>

&lt;test-update>
&lt;xi:include href="application-test.xml" xpointer="xpointer(/*/test-update/*)"/>
&lt;script id='test-update' ssh='true' verbose='true' type='post' comes-after='update' 
        comes-before='poweroff'>
...
&lt;script>
...
&lt;/test-update>

&lt;/repo></programlisting>
  </informalexample>
  </section>

  <section id='test-script'>
  <title>Test Script</title>
  <para>
  Once you have completed and tested your package repository definition and all
  scenario test machine definitions, you are ready for the final step, creating
  a script to update the repository and run tests on an ongoing basis. With
  this script, you can ensure the quality and accuracy of your repository, and
  you can do it in an automated manner.
  </para>

  <para>
  This can be particularly useful if you are creating multiple versions of your
  package repository, and have multiple configuration scenarios, as in our
  example below.
  </para>

  <para>
  <emphasis role='strong'>Example Test Script</emphasis>. The example test
  script below, named <filename>application-test.sh</filename> performs three
  activities:
  </para>
  
  <itemizedlist>
  <listitem>
  <para>
  Creates an <emphasis>application</emphasis> package repository for each
  supported combination of CentOS version (5 and 6) and architecture (i386 and
  x86_64).
  </para>
  </listitem>

  <listitem>
  <para>
  Tests each of these repositories under two system configuration
  scenarios (scenario1 and scenario2).
  </para>
  </listitem>

  <listitem>
  <para>
  Synchronizes the package repository to the final production server.
  </para>
  </listitem>
  </itemizedlist>

  <informalexample>
  <programlisting>#!/bin/sh
set -e

ROOT="path/to/repos"

REPOSTUDIO="/usr/bin/deploy"
LOG_LEVEL=1

REPO=application
VERSIONS="5 6"
ARCHS="i386 x86_64"
SCENARIOS="scenario1 scenario2"
 
# update the package repositories
echo -e "\nupdating $REPO repositories"
for v in $VERSIONS; do
  for a in $ARCHS; do 
    $REPOSTUDIO \
    $ROOT/$REPO/$REPO.definition \
    --macro "repo:$REPO" --macro "version:$v" --macro "arch:$a" \
    -l$LOG_LEVEL \
  done
done

# test scenario configuration
for s in $SCENARIOS; do
  echo -e "\ntesting $REPO $s configuration"
  for v in $VERSIONS; do 
    for a in $ARCHS; do 
    $REPOSTUDIO $ROOT/$REPO/$s-test.definition \
    --macro "repo:$REPO" ---macro "scenario:$s" --macro "version:$v" \
    --macro "arch:$a" \
    -l$LOG_LEVEL\
    done
  done
done

# sync repositories to production server
echo -e "\nsyncing $REPO repositories to production server"
for v in $VERSIONS; do
  for a in $ARCHS; do
    rsync -a --delete -e ssh \
    "/var/www/html/repos/package/$REPO-$v-$a/" \
    "user@repos.company.com:/var/www/html/$REPO-$v-$a"
  done
done</programlisting>
  </informalexample>

  <para>
  You can configure your script to run on a period basic using the
  <application>cron</application> utility. For example, to have cron execute
  your <filename>application-test.sh</filename> script on a nightly basis,
  complete these commands:
  </para>
  
  <informalexample>
  <programlisting>cp application-test.sh /etc/cron.daily
chown root:root application-test.sh
chmod +x application-test.sh</programlisting>
  </informalexample>

  <para>
  Type <command>man cron</command> at the command line for additional
  information on using the cron utility to automate periodic processes.
  </para>
  </section>

</section>
