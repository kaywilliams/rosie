<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<section>
  <title>How SystemBuilder Makes Typical System and Build Management Tasks
  Easier</title>

  <para>Residing on a build system, SystemBuilder and its components make your
  system administration tasks easier during every step of the process.
  Three are four main components within the SystemBuilder build system:</para>

  <para><orderedlist>
      <listitem>
        <para><emphasis role="strong">System configuration</emphasis>,
        consisting of <application class="software">SystemBuilder</application>'s
        configuration information, your system's definition file and its
        configuration scripts;</para>
      </listitem>

      <listitem>
        <para><emphasis role="strong">System distribution</emphasis>,
        containing your system's distribution images and package repository;
        </para>
      </listitem>

      <listitem>
        <para><emphasis role="strong"><application
        class="software">SystemBuilder'</application>s cache</emphasis>,
        containing cached contents of OS and application packages;
        and</para>
      </listitem>

      <listitem>
        <para><emphasis role="strong"><application
        class="software">SystemBuilder</application>'s log</emphasis>, a record
        of distribution builds.</para>
      </listitem>
    </orderedlist>The first component maintains the operations of <application
  class="software">SystemBuilder</application>, including logging and cache
  preferences; your distribution definition file, which defines repositories,
  application groups and packages; and your system configuration scripts,
  to name a few. The second component contains the images used during first
  boot and client system deployment. The last two components, the cache and log,
  enable <application class="software">SystemBuilder</application> to minimize
  build time and track information.</para>

  <para>These four areas dramatically improve your ability to create, deploy
  and maintain system distributions in a superior manner.</para>

  <section>
    <title>Testing an system distribution</title>

    <para>While preparing the distribution definition file, you can test the OS
    with its various applications and configurations, together or in separate
    combinations, until you achieve the desired results.</para>

    <para><orderedlist>
        <listitem>
          <para><emphasis role="strong">Test different configuration and
          application combinations within a single distribution definition
          file.</emphasis> <application class="software">SystemBuilder</application>
          uses an distribution definition file as a recipe for your system.
          You can create a system template, then enable or disable
          system components using the distribution definition file to test
          application compatibility and functionality with the OS until you
          derive the combination that meets your needs.</para>
        </listitem>

        <listitem>
          <para><emphasis role="strong">Accelerate testing procedures by
          eliminating unnecessary steps.</emphasis> Reduce the system
          distribution build time by forcing or skipping build components
          during a single build run. For example, you may want to test
          connection and download speeds to particular repositories, but you
          may not want to build the actual distribution images.</para>
        </listitem>

        <listitem>
          <para><emphasis role="strong">Locate performance problem areas
          quickly and resolve them.</emphasis> <application
          class="software">SystemBuilder</application> writes build actions to a log
          file up to Log Level 5, the debugging mode. This information
          includes non-fatal errors that may impede performance without
          halting the process altogether.</para>
        </listitem>
      </orderedlist></para>
  </section>

  <section>
    <title>Deploying client systems</title>

    <para>SystemBuilder empowers you to deploy the same components and
    configuraton to one or more client systems with less time and effort than
    it would take to build and configure identical systems manually.</para>

    <para><orderedlist>
        <listitem>
          <para><emphasis role="strong">Eliminate the need for custom
          deployment automation scripts and applications.</emphasis>
          <application class="software">SystemBuilder</application>-generated
          installation images are complete and ready to deploy via standard
          deployment tools and methods.</para>
        </listitem>

        <listitem>
          <para><emphasis role="strong">Dramatically reduce the download time
          when deploying client systems.</emphasis> <application
          class="software">SystemBuilder</application> creates a local system
          repository, so the client installation connects to your local
          download server, not various remote Internet servers, thereby
          reducing the connection speed.</para>
        </listitem>

        <listitem>
          <para><emphasis role="strong">Increase the consistency of the
          system components.</emphasis> By using its own RPMs and local
          repository on the build system for a particular system distribution,
          SystemBuilder enables you to consistently deploy that distribution to
          all the client systems.</para>
        </listitem>

        <listitem>
          <para><emphasis role="strong">Deploy multiple machines
          machines quickly and reliably.</emphasis> Once you have identified
          your client system hardware, a system distribution and your boot
          media, you can systematically and simultaneously create multiple
          client systems using a multihoned or replicate web server.</para>
        </listitem>
      </orderedlist></para>
  </section>

  <section>
    <title>Maintaining and updating distributions</title>

    <para>SystemBuilder simplifies and standardizes the maintenance and update of
    complex systems through its architecture and distribution definitions.</para>

    <para><orderedlist>
        <listitem>
          <para><emphasis role="strong">Utilize standard XML nomenclature to
          create an understandable yet powerful system
          definition.</emphasis> Combining the standardized XML-based
          distribution definitions with familiar repository and package concepts
          makes reading, writing, understanding and updating the system
          definition straightforward.</para>
        </listitem>

        <listitem>
          <para><emphasis role="strong">Eliminate the need for custom
          configuration management systems.</emphasis> SystemBuilder bundles
          configuration into an RPM, making it easy to deploy and maintain
          using standard package management tools, such as <application
          class="software">YUM</application>.</para>
        </listitem>

        <listitem>
          <para><emphasis role="strong">Reduce the learning curve for various
          standard package management tools.</emphasis> By utilizing an
          distribution definition file that defines key repository, OS, package
          and configuration parameters, you can reduce the burden of
          understanding the intricacies of multiple software tools, i.e.
          <application class="software">Anaconda</application>, <application
          class="software">YUM </application>and <application
          class="software">RPM</application>.</para>
        </listitem>

        <listitem>
          <para><emphasis role="strong">Ease software update testing and
          deployment.</emphasis> SystemBuilder allows software updates to
          be deployed either independently or on a per-distribution basis. This
          allows software applications on some machines to be updated quickly as
          needed, while others go through a more rigorous testing process, or
          deploy different application versions altogether.</para>
        </listitem>
      </orderedlist></para>
  </section>

  <section>
    <title>Migrating and and recovering systems</title>

    <para>Migrating to new hardware or recovering from a disaster are critical
    management issues. SystemBuilder can reduce the time needed and make work
    estimations more reliable.</para>

    <para><orderedlist>
        <listitem>
          <para><emphasis role="strong">Reduce downtime for system recovery
          and migration.</emphasis> SystemBuilder makes it easy to maintain current
          up-to-date system images which are ready for redeployment in
          critical situations such as disaster recovery, or planned situations
          such as system migration.</para>
        </listitem>

        <listitem>
          <para><emphasis role="strong">Have accurate estimates of
          redeployment and recovery.</emphasis> In addition to build process
          details, the SystemBuilder logs include start and end times for build
          cycles, so you can reliably predict disaster recovery time and effort
          needed for all your systems.</para>
        </listitem>

        <listitem>
          <para><emphasis role="strong">Migrate one system to new hardware
          in a fast, efficient, repeatable manner.</emphasis> Migrate a
          system that has been configured for one architecture to another
          by changing a few items in the distribution definition file in just
          minutes. Use SystemBuilder on a sandbox build system to test the
          system before readying it for deployment to the new hardware
          systems.</para>
        </listitem>

        <listitem>
          <para><emphasis role="strong">Utilize a local cache to quickly
          redeploy systems.</emphasis> You do not have to rely on the
          consistency or uptime of an Internet-based host to redeploy systems
          or continue operations. <application class="software">
          SystemBuilder</application> utilizes its own cached contents
          to complete installations and client system configurations.</para>
        </listitem>
      </orderedlist></para>
  </section>

  <section>
    <title>Upgrading systems and their components</title>

    <para>Before upgrading a client system's hardware, OS or
    one of its applications, use SystemBuilder to test those upgrades with
    other components to ensure compatibility and stability.</para>

    <para><orderedlist>
        <listitem>
          <para><emphasis role="strong">Reduce planning and deployment effort
          for hardware, OS and application upgrades.</emphasis> <application
          class="software">SystemBuilder</application>'s distribution definition files
          function as system descriptions. You can use these definitions as a
          starting point when upgrading to ensure that all prior system
          functions carry forward.</para>
        </listitem>

        <listitem>
          <para><emphasis role="strong">Increase speeds for follow-on
          builds.</emphasis> <application class="software">SystemBuilder</application>
          uses its built-in caching technology to store the system packages
          locally for quick access. If a package has not changed between
          builds, <application class="software">SystemBuilder</application> uses the
          cached copy.</para>
        </listitem>

        <listitem>
          <para><emphasis role="strong">Utilize <application
          class="software">SystemBuilder</application> as an system configuration
          management system. </emphasis> Adding version control to the
          <application class="software">system configuration portion of
          SystemBuilder's</application> build system, as described in the
          introduction, empowers you to manage your system releases.</para>
        </listitem>
      </orderedlist></para>
  </section>
</section>
