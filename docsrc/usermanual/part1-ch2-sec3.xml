<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<section>
  <title>Defining Your Appliance</title>

  <para>To define your Samba appliance, you will need to do the
  following:</para>

  <para><itemizedlist>
      <listitem>
        <para>Define some basic appliance information;</para>
      </listitem>

      <listitem>
        <para>Select the repositories from which to download the OS, the Samba
        RPMs and any dependency files;</para>
      </listitem>

      <listitem>
        <para>Define the application groups and packages to include with the
        OS; and</para>
      </listitem>

      <listitem>
        <para>Provide configuration information.</para>
      </listitem>
    </itemizedlist></para>

  <section>
    <title>Naming the appliance</title>

    <para>The first step to creating an appliance is defining the basic
    <filename class="extension">.appliance</filename> file. The tags
    &lt;appliance&gt; and &lt;/appliance&gt; encapsulate all top-level
    elements and their child elements and attributes.</para>

    <para><informalexample>
        <programlisting>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;appliance xmlns:xi="http://www.w3.org/2001/XInclude"&gt;

&lt;!-- Included top-level elements with child elements and attributes --&gt;

&lt;/appliance&gt;</programlisting>
      </informalexample></para>

    <para>The first required element, <emphasis>main</emphasis>, includes the
    appliance's name, the system architecture and the version of the
    appliance. These three items make up the default
    <varname>$SYSTEMID</varname>, which SystemBuilder uses to create directories for
    storing the completed appliance and providing web access to the appliance
    for download.</para>

    <para><note>
        <para>The TLE elements can be in any order within an appliance
        definition file.</para>
      </note></para>

    <para>In the example below, the appliance version will be 5, and the
    appliance will run on the i386 architecture.</para>

    <para><important>
        <para>The <emphasis>main</emphasis> top-level element is required for
        an <filename class="extension">.appliance</filename> file.</para>
      </important></para>

    <para><informalexample>
        <programlisting>  &lt;main&gt;
    &lt;name&gt;samba-server&lt;/name&gt;
    &lt;version&gt;5&lt;/version&gt;
    &lt;arch&gt;i386&lt;/arch&gt;
  &lt;/main&gt;</programlisting>
      </informalexample></para>

    <para>The default <varname>$SYSTEMID</varname> will be
    <filename>samba-server-5-i386</filename>. See the SDFR for more details
    about the <emphasis>main</emphasis> element in an <filename
    class="extension">.appliance</filename> file.</para>

    <para>Save the <filename class="extension">.appliance</filename> file as
    <filename>samba-server.appliance</filename> before preceding.</para>
  </section>

  <section>
    <title>Specifying the input repositories</title>

    <para>Next, to define the OS and the application packages for the
    appliance, you need to define what repositories SystemBuilder will use. The example
    below uses the <emphasis>repos/repo</emphasis> child element to define the
    repositories.</para>

    <para><important>
        <para>For SystemBuilder to operate correctly, one of the repositories must have
        an <filename class="directory">isolinux</filename> or <filename
        class="directory">images</filename> directory.</para>
      </important></para>

    <para>This example includes the i386 base architecture components for
    <application class="software">CentOS</application> 5 and its updates and
    uses variables for the <emphasis>/repo/baseurl</emphasis> and
    <emphasis>/repo/mirrorlist</emphasis> URL values. Line breaks in the URLs
    are for readability purposes only.</para>

    <para><important>
        <para>The <emphasis>repos</emphasis> top-level element is required for
        an <filename class="extension">.appliance</filename> file.</para>
      </important></para>

    <para><informalexample>
        <programlisting>  &lt;repos&gt;

    &lt;!-- See www.centos.org for a list of public mirrors --&gt;
    &lt;repo id="base"&gt;
      &lt;name&gt;CentOS-$releasever - Base&lt;/name&gt;
      &lt;baseurl&gt;http://mirror.centos.org/centos/$releasever/os/
           $basearch/&lt;/baseurl&gt;
      &lt;mirrorlist&gt;http://mirrorlist.centos.org/?release=$releasever&amp;amp;
           arch=$basearch&amp;amp;repo=os&amp;amp;country=us&lt;/mirrorlist&gt;
    &lt;/repo&gt;

    &lt;repo id="updates"&gt;
      &lt;name&gt;CentOS-$releasever - Updates&lt;/name&gt;
      &lt;baseurl&gt;http://mirror.centos.org/centos/$releasever/updates/
           $basearch/&lt;/baseurl&gt;
      &lt;mirrorlist&gt;http://mirrorlist.centos.org/?release=$releasever&amp;amp;
           arch=$basearch&amp;amp;repo=updates&amp;amp;country=us&lt;/mirrorlist&gt;
    &lt;/repo&gt;

  &lt;/repos&gt;</programlisting>
      </informalexample></para>

    <para><note>
        <para>Escape the ampersand sign in the URLs (&amp;) with
        <sgmltag>&amp;amp;</sgmltag>.</para>
      </note></para>

    <para>The <varname>$releasever</varname> variable is a placeholder for the
    <emphasis>main/version</emphasis> value, while the
    <varname>$basearch</varname> variable represents the
    <emphasis>main/arch</emphasis> value. As a failsafe measure, the example
    includes a mirror list in addition to the preferred baseurl. In this
    example, should the baseurl fail for the base repository, SystemBuilder will move
    to the mirror list in the United States for that version and architecture
    and traverse the list until it finds a working repository.</para>

    <para><note>
        <para>To avoid confusion between the appliance version and the OS
        version, use the base OS version number in the
        <emphasis>main/version</emphasis> child element.</para>
      </note></para>

    <para>Now that you've identified the package repositories for the OS, you
    need to include the RPMs for the applications, namely <application
    class="software">Samba</application>.</para>
  </section>

  <section>
    <title>Including package groups in the appliance repository</title>

    <para>Once you have defined your repositories, you specify the software
    packages and groups to include. Use the <emphasis>packages</emphasis>
    top-level element in the <filename class="extension">.appliance</filename>
    file to accomplish this.</para>

    <para>The example below includes package groups for the <application
    class="software">Samba</application> application and related tools plus an
    X Window System.</para>

    <para><important>
        <para>The <emphasis>packages</emphasis> top-level element is required
        for an <filename class="extension">.appliance</filename> file.</para>
      </important></para>

    <para><informalexample>
        <programlisting>&lt;packages&gt;
  &lt;group&gt;core&lt;/group&gt;
  &lt;group&gt;base&lt;/group&gt;
  &lt;group&gt;base-x&lt;/group&gt;
  &lt;group&gt;gnome-desktop&lt;/group&gt;
  &lt;group&gt;admin-tools&lt;/group&gt;
  &lt;group&gt;web-server&lt;/group&gt;
  &lt;group&gt;smb-server&lt;/group&gt;
  &lt;group&gt;printing&lt;/group&gt;

&lt;/packages&gt;  </programlisting>
      </informalexample></para>

    <para>The appliance will include the <application
    class="software">GNOME</application> graphical user interface (GUI) and
    printing capabilities. Print administration for CUPS printers can be done
    using a web interface, hence the inclusion of the web-server package.
    SystemBuilder's default settings will include only the "name" and "description" for
    the groups in English.</para>
  </section>

  <section>
    <title>Configuring the appliance</title>

    <para>The final step is to include appliance-specific configuration
    information, such as your own appliance configuration files and required
    packages outside the standard groups you have identified in
    <emphasis>packages</emphasis>, above. Without this step, SystemBuilder will build a
    generic OS appliance as defined by the <emphasis>packages/group</emphasis>
    child elements.</para>

    <para><application class="software">To enable you to install an appliance
    on a client system, SystemBuilder uses RPMs just like other Linux-based OS and
    applications. When you install your appliance on the client system, the
    install process will retrieve all the packages and other files that you
    specify from one or more repositories. SystemBuilder</application> gives you two
    options for the repository locations. It can create your appliance
    repositories on your internal download server or it can direct the client
    installation process to the remote download repository servers sponsored
    by outside organizations, such as the mirror sites that <ulink
    url="http://mirror.centos.org">CentOS.org</ulink> or <ulink
    url="http://mirror.samba.org">Samba.org</ulink> host. The parameters of
    the <emphasis>config-rpm</emphasis> TLE determine how SystemBuilder configures this
    process.</para>

    <para>In this instance, SystemBuilder will rely on its default settings plus the
    <emphasis>/file</emphasis> and <emphasis>/requires</emphasis> child
    element parameters to construct the <filename>config.rpm</filename> file.
    That file will construct a <application class="software">YUM</application>
    <filename>samba-server.repo</filename> file at the default path <filename
    class="directory">/etc/yum.repos.d/</filename>. The <filename
    class="extension">REPO</filename> file will not include the remote
    repositories that other organizations have hosted; however, it will
    include a repository definition pointing to your download server location
    for this appliance.</para>

    <para><informalexample>
        <programlisting>&lt;config-rpm&gt;
  &lt;!-- install configuration files on the client system --&gt;
  &lt;files destdir="/etc/samba" mode="644" content="filename"&gt;smb.conf&lt;/files&gt;

  &lt;!-- required packages for samba in addition to the default smb-server group--&gt;
  &lt;requires&gt;samba&lt;/requires&gt;
  &lt;requires&gt;samba-common&lt;/requires&gt;

&lt;/config-rpm&gt;</programlisting>
      </informalexample></para>

    <para>In the example above, the client system will receive your
    <application class="software">Samba</application> configuration file,
    <filename>smb.conf</filename>, in the <filename
    class="directory">/etc/samba</filename> directory. The appliance will also
    include two key <application>Samba</application>-related packages.
    <application class="software">SystemBuilder</application> will resolve the
    dependencies to prepare the appliance for client installation.</para>

    <para>For more information on the advanced child elements of
    <emphasis>config-rpm</emphasis> (implementing scripts and triggers,
    obsoleting packages and customizing the <filename
    class="extension">REPO</filename> file), see the
    <emphasis>config-rpm</emphasis> TLE in the SDFR.</para>

    <para>After you have saved your <filename
    class="extension">.appliance</filename> file, you are ready to build your
    appliance.</para>
  </section>
</section>
