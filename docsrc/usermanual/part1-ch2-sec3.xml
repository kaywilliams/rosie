<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section>
  <title>Defining a Distribution</title>

  <para>To define your Samba distribution, you will need to do the following:</para>

  <para><itemizedlist>
      <listitem>
        <para>Define some basic system information;</para>
      </listitem>

      <listitem>
        <para>Select the repositories from which to download the operating
        system, the Samba RPMs and any dependency files;</para>
      </listitem>

      <listitem>
        <para>Define the application groups and packages to include with the
        operating system; and</para>
      </listitem>

      <listitem>
        <para>Provide configuration information.</para>
      </listitem>
    </itemizedlist></para>

  <section>
    <title>Creating a distribution file</title>

    <para>The first step to creating a distribution is creating the
    definition file. The definition file is a text file in XML format. It can
    be created using any text editor - vi, emacs, nano, or gedit - or 
    a dedicated XML editor, if you prefer. The tags &lt;distribution&gt; and 
    &lt;/distribution&gt; encapsulate all additional elements and attributes.
    </para>

    <para><informalexample>
        <programlisting>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;distribution xmlns:xi="http://www.w3.org/2001/XInclude"&gt;

&lt;!-- Additional elements and attributes --&gt;

&lt;/distribution&gt;</programlisting>
      </informalexample></para>

    <para>The first line, beginning in "&lt;?xml", identifies the file
    as an XML file. This line is not required, but is a good practice for
    compatibility with future XML format changes.</para>

    <para>Likewise, the "xmlns:xi..." attribute is not required on the 
    distribution element. It allows the use of xinclude statements within the
    document. XIncludes, a convenient mechanism for reusing content across 
    multiple definitions, are discussed in Chapter 4, 
    "Creating a Production Environment".</para>   

  </section>

  <section>
    <title>Naming the distribution</title>

    <para>The first required element of the definition, 
    <emphasis>main</emphasis>, includes the name of the distribution, the system
    architecture and the version. These three items make up the default
    distribution id (<varname>$ID</varname>), which SystemBuilder uses to create
    folders for storing the completed distribution (under 
    <filename type="directory">/var/www/html/distributions</filename>, by
    default) and for caching distribution content (under 
    <filename type="directory">/var/cache/systembuilder</filename>, by default).
    </para>

    <para><note>
        <para>The elements can be in any order within a distribution definition
        file.</para>
      </note></para>

    <para>In the example below, the distribution version will be 5, the system
    architecture will be i386, and the <varname>$ID</varname> will
    be <filename>samba-server-5-i386</filename>. </para>

    <para><informalexample>
        <programlisting>  &lt;main&gt;
    &lt;name&gt;samba-server&lt;/name&gt;
    &lt;version&gt;5&lt;/version&gt;
    &lt;arch&gt;i386&lt;/arch&gt;
  &lt;/main&gt;</programlisting>
      </informalexample></para>

    <para>You can override the default distribution id using an
    <emphasis>id</emphasis> element. See the DDFR for more details about the
    <emphasis>main</emphasis> element.</para>

    <para>Save the file as <filename>samba-server.distribution</filename> before
    preceding.</para>

    <para><note>
        <para>Each time you change a distribution's id, either implicitly by
        changing the <emphasis>name</emphasis>, <emphasis>version</emphasis> or 
        <emphasis>arch</emphasis> elements, or explicitly by changing the
        <emphasis>id</emphasis> element, SystemBuilder creates new folders for
        it in the publish and cache folders 
        (<emphasis>/var/www/html/distributions</emphasis> and 
        <emphasis>/var/cache/systembuilder</emphasis>, by default,
        respectively). To preserve hard drive space, you may wish to review 
        the publish and cache folders on occasion. Folders for obsolete
        distributions can be deleted using standard file system methods (e.g. 
        <command>rm -rf <emphasis>obsolete_folder</emphasis></command>).</para>
      </note></para>

  </section>

  <section>
    <title>Specifying repositories</title>

    <para>SystemBuilder obtains software from RPM package repositories. 
    Repositories are collections of RPMs with associated metadata files. 
    Metadata files allow applications, like 
    <application>SystemBuilder</application>, to learn about packages in the
    repository, without having to download and inspect each package
    individually. Access to package repositories may be either public or
    restricted. Common public repositories include CentOS 5 Base, CentOS 5 
    Updates, and Extra Packages for Enterprise Linux (EPEL). Access to Red Hat
    Enterprise Linux 5 repositories is restricted. Administrators can create
    custom package repositories using the <application>createrepo</application>
    utility.</para>

    <para>In this section, you will define the repositories to be used for your
    distribution.</para>

    <itemizedlist>

      <listitem><para>Operating System Base Repository. For CentOS, this will be
      a public or local mirror. For Red Hat Enterprise Linux, an install tree
      created using an ISO image file. This repository is unique in that it also
      contains <filename class="directory">isolinux</filename> and 
      <filename class="directory">images</filename> folders. Your definition
      must include an operating system base repository.</para></listitem>

      <listitem><para>Operating System Update Repositories. For CentOS, again
      this will be a public or local mirror. For Red Hat Enterprise Network, a
      channel within Red Hat Network. Typically, your definition will include
      both base and updates repositories.</para></listitem>

      <listitem><para>Additional Repositories. Your distribution may include any
      number of additional public or private repositories.</para></listitem>

    </itemizedlist>
 
    <para><important>
        <para>You must include a repository definition for the base operating
        system. This repository must contain 
        <filename class="directory">isolinux</filename> and 
        <filename class="directory">images</filename> folders.</para>
      </important></para>

  	<section>
		  <title>CentOS repositories</title>

	    <para>This example directs SystemBuilder to use public mirrors to access
	    the CentOS 5 base and updates repositories for the i386 architecture.
      </para>

	    <para><informalexample>
	        <programlisting>
  &lt;repos&gt;

    &lt;repo id="base"&gt;
      &lt;name&gt;CentOS-5-Base&lt;/name&gt;
      &lt;baseurl&gt;http://mirror.centos.org/centos/5/os/i386/&lt;/baseurl&gt;
    &lt;/repo&gt;

    &lt;repo id="updates"&gt;
      &lt;name&gt;CentOS-5-Updates&lt;/name&gt;
      &lt;baseurl&gt;http://mirror.centos.org/centos/5/updates/i386/&lt;/baseurl&gt;
    &lt;/repo&gt;

  &lt;/repos&gt;</programlisting>
	      </informalexample></para>

	  </section>

	  <section>
	  <title>Red Hat Enterprise Linux repositories</title>
	    <para>
      Prior to using SystemBuilder to access Red Hat Enterprise Linux
      repositories, you will need to complete the following steps:</para>

      <itemizedlist>

        <listitem><para>Create a Red Hat Enterprise Linux 5 install tree. This
        can be accomplished by downloading an ISO image (a single DVD image is
        recommended for easier mounting) from Red Hat Network and using the 
        <command>mount -o loop</command> command to mount the 
        <filename>.iso</filename> to a folder location. See the <emphasis>Red
        Hat Enterprise Linux 5 Installation Guide</emphasis>, under the topic
        <emphasis>Preparing for a Network Installation</emphasis>, for more
        information.</para></listitem>

        <listitem><para>Create a systemid for accessing updates from RHN. This
        step requires an available subscription to Red Hat Enterprise Linux. See
        the Red Hat web site for purchase information. Once you have an 
        available subscription, install Red Hat Enterprise Linux 5 in the
        desired architecture version (i386 or x86_64) onto a client system.
        Register the system to Red Hat Network during installation, or first
        boot, or later using the <command>rhn_register</command> command. Once
        the system has successfully registered with RHN, a systemid file will
        be created in the <filename type="directory">/etc/sysconfig/</filename>
        folder of the machine. This is the file you will use to configure
        SystemBuilder to access software from RHN. You may copy this file to the
        SystemBuilder build machine if necessary. Note, to ensure the systemid
        has access to the software desired for your distribution, you can use
        the Red Hat Network web user interface to locate the system, and view
        and alter it's channel subscriptions.</para></listitem>
      </itemizedlist>

	    <para>After the above steps are completed, you are ready to specify base
      and updates repositories for Red Hat Enterprise Linux.</para>

      <para>The base repository will point to the Red Hat Enterprise Linux
      install tree, created in the first step above.  In the example below, this
      is located at <filename type="directory">http://www.examplecompany.com/
      install_server/redhat/enterprise/5/en/os/i386/</filename>. This location
      must contain <filename class="directory">isolinux</filename> and 
      <filename class="directory">images</filename> folders.</para>

      <para>The update repository will point to the subscribed channel in RHN
      using a custom <filename>rhn://</filename> protocol in the following
      format:</para>

      <para><command>rhn://[$rhnhost]/$rhnchannel/</command></para>
      

      <para>where $rhnhost is the hostname of the server to contact and
      $rhnchannel is the name of the RHN channel from which to obtain packages.
      If not specified, $rhnhost defaults to a public Red Hat Network server at
      xmlrpc.rhn.redhat.com. Valid $rhnchannel values include:

        <itemizedlist>
          <listitem>rhel-i386-server-5</listitem>
          <listitem>rhel-x86_64-server-5</listitem>
        </itemizedlist>
      </para>

      <para>In the following example, SystemBuilder will contact the RHN server
      located at <filename type="directory">xmlrpc.rhn.examplecompany.com
      </filename> and request packages from the 
      <filename>rhel-i386-server-5</filename> software channel.</para>

      <para>
	    <informalexample>
	    <programlisting>
  &lt;repos&gt;

    &lt;repo id="base"&gt;
      &lt;name&gt;Red Hat Enterprise Linux - Base&lt;/name&gt;
      &lt;baseurl&gt;http://www.examplecompany.com/install_server/redhat/enterprise/
	            5/en/os/i386&lt;/baseurl&gt;
    &lt;/repo&gt;

    &lt;repo id="updates"&gt;
      &lt;name&gt;Red Hat Enterprise Linux - Updates&lt;/name&gt;
      &lt;baseurl&gt;rhn://xmlrpc.rhn.examplecompany.com/rhel-i386-server-5&lt;/baseurl&gt;
      &lt;systemid&gt;systemid-5Server-i386&lt;/systemid&gt;
    &lt;/repo&gt;

  &lt;/repos&gt; 
	    </programlisting>
	    </informalexample>
      </para>

	  </section>

	    <para>Now that you've identified package repositories, you are ready
      to start including packages.</para>

	  </section>

  <section>
    <title>Specifying packages</title>

    <para>Once you have defined your repositories, you specify the software
    packages and groups to include. Use the <emphasis>packages</emphasis>
    top-level element to accomplish this.</para>

    <para>The example below includes package groups for the <application
    class="software">Samba</application> application and related tools plus an
    X Window System.</para>

    <para><informalexample>
        <programlisting>
  &lt;packages&gt;
    &lt;group&gt;core&lt;/group&gt;
    &lt;group&gt;base&lt;/group&gt;
    &lt;group&gt;base-x&lt;/group&gt;
    &lt;group&gt;gnome-desktop&lt;/group&gt;
    &lt;group&gt;admin-tools&lt;/group&gt;
    &lt;group&gt;web-server&lt;/group&gt;
    &lt;group&gt;smb-server&lt;/group&gt;
    &lt;group&gt;printing&lt;/group&gt;
  &lt;/packages&gt;  </programlisting>
      </informalexample></para>

    <para>The distribution will include the <application
    class="software">GNOME</application> graphical user interface (GUI) and
    printing capabilities. Print administration for CUPS printers can be done
    using a web interface, hence the inclusion of the web-server package.
    </para>
  </section>

  <section>
    <title>Configuring the system</title>

    <para>The final step is to define system-specific configuration including
    update configuration, configuration files and configuration scripts.</para>

    <para>SystemBuilder uses the information you provide in element allows you to specify </para>

    <para>In this instance, SystemBuilder will rely on its default settings plus
    the <emphasis>/file</emphasis> and <emphasis>/requires</emphasis> child
    element parameters to construct the <filename>config.rpm</filename> file.
    That file will construct a <application class="software">YUM</application>
    <filename>samba-server.repo</filename> file at the default path <filename
    class="directory">/etc/yum.repos.d/</filename>. The <filename
    class="extension">REPO</filename> file will not include the remote
    repositories that other organizations have hosted; however, it will
    include a repository definition pointing to your download server location
    for this distribution.</para>

    <para>
    <informalexample>
      <programlisting>
  &lt;config-rpm&gt;
    &lt;!-- install configuration files on the client machine --&gt;
    &lt;files destdir="/etc/samba" mode="644" content="filename"&gt;smb.conf&lt;/files&gt;

    &lt;!-- required packages for samba in addition to the smb-server group--&gt;
    &lt;requires&gt;samba&lt;/requires&gt;
    &lt;requires&gt;samba-common&lt;/requires&gt;

  &lt;/config-rpm&gt;
      </programlisting>
    </informalexample>
    </para>

    <para>In the example above, the client machine will receive your
    <application class="software">Samba</application> configuration file,
    <filename>smb.conf</filename>, in the <filename
    class="directory">/etc/samba</filename> directory. The distribution will also
    include two key <application>Samba</application>-related packages.
    <application class="software">SystemBuilder</application> will resolve the
    dependencies to create the distribution.</para>

    <para>For more information on the advanced child elements of
    <emphasis>config-rpm</emphasis> (implementing scripts and triggers,
    obsoleting packages and customizing the <filename
    class="extension">REPO</filename> file), see the
    <emphasis>config-rpm</emphasis> element in the DDFR.</para>

    <para>The variable
    <varname>$DEFINITION</varname> is the name of your distribution definition
    file without the file extension, e.g. 
    <filename class="extension">.distribution</filename>.</para>

    <para>
    <informalexample>
      <programlisting><varname>$DEFINITION</varname>.dat</programlisting>
    </informalexample>
    </para>

    <para>Distribution data file. Used by SystemBuilder to manage the
    distribution's RPM release numbers. This file should be version
    controlled.</para>

    <para>After you have saved your definition file, you are ready to build
    your distribution.</para>
  </section>

  <section>
    <title>Validating your definition</title>

    <para>Once your definition is complete, you can use 
    <application class="software">SystemBuilder</application> to validate
    it's syntax.</para>

    <para>
    <informalexample>
      <programlisting>#systembuilder --validate-only samba-server.distribution</programlisting>
    </informalexample>
    </para>

    <para>If your definition is valid, 
    <application class="software">SystemBuilder</application> will display the 
    complete definition and exit. Otherwise, it will display error information,
    allowing you to locate and correct issues.</para>

  </section>

</section>
