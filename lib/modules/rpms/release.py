from dims.osutils import basename, dirname, mkdir
from event import EVENT_TYPE_MDLR, EVENT_TYPE_PROC
from interface import EventInterface, LocalsMixin
from lib import RpmHandler, RpmsInterface, addHandler, getHandler
from os.path import exists, join
from output import MorphStructMixin, tree

EVENTS = [
  {
    'id': 'release',
    'interface': 'RpmsInterface',
    'properties': EVENT_TYPE_PROC|EVENT_TYPE_MDLR,
    'provides': ['release-rpm'],
    'parent': 'RPMS',
  },    
]

#-------------- METADATA STRUCTS ---------#
RELEASE_MD_STRUCT = {
  'config': [
    '//main/fullname/text()',
    '//main/version/text()',
    '//release-rpm',    
    '//stores/*/store/gpgkey/text()',
    '//main/signing/publickey/text()',
  ],
  'input': [
    '//release-rpm/yum-repo/path/text()',
    '//stores/*/store/gpgkey/text()',
    '//main/signing/publickey/text()',
    '//release-rpm/eula/text()',
    '//release-rpm/other/text()',
  ],
  'output': [
    'os/release-rpm/',
  ],   
}

#------ HOOK FUNCTIONS ------#
def prerelease_hook(interface):
  handler = ReleaseRpmHandler(interface, RELEASE_MD_STRUCT)
  addHandler(handler, 'release')
  interface.disableEvent('release')
  if interface.pre(handler) or (interface.eventForceStatus('release') or False):
    interface.enableEvent('release')
        
def release_hook(interface):
  interface.log(0, "processing release")
  handler = getHandler('release')
  interface.modify(handler)

def postrelease_hook(interface):
  handler = getHandler('release')
  if handler.create:
    # add rpms to the included-packages control var, so that
    # they are added to the comps.xml
    interface.append_cvar('included-packages', [handler.rpmname])    
    # add rpms to the excluded-packages control var, so that
    # they are removed from the comps.xml
    interface.append_cvar('excluded-packages', handler.obsoletes.split())

#---------- HANDLERS -------------#
class ReleaseRpmHandler(RpmHandler, MorphStructMixin):
  def __init__(self, interface, data):
    # expand the xpath queries in the data struct
    MorphStructMixin.__init__(self, interface.config)
    
    RpmHandler.__init__(self, interface, data,
                        elementname='release-rpm',
                        rpmname='%s-release' %(interface.product,),
                        provides_test='redhat-release',
                        provides='redhat-release',
                        obsoletes = 'fedora-release redhat-release '
                                    'centos-release redhat-release-notes '
                                    'fedora-release-notes '
                                    'centos-release-notes',
                        description='distribution release files',
                        long_description='distribution release files; '
                          'autogenerated by dimsbuild')
    
    if self.data.has_key('input'):
      self.expandInput(self.data)
    if self.data.has_key('output'):      
      self.expandOutput(self.data, dirname(self.software_store)) # the 'output' element has entries
                                                                 # relative to dirname(software_store)
    
    self.prefix = dirname(self.software_store) # prefix to the directories in data['output']
    
    if not exists(self.software_store):
      mkdir(self.software_store, parent=True)    
    
  def _get_data_files(self):
    manifest = join(self.output_location, 'MANIFEST')
    f = open(manifest, 'w')
    f.write('setup.py\n')
    f.write('setup.cfg\n')
    files = tree(self.output_location, type='f|l', prefix=False)
    for file in files:
      f.write('%s\n' %(file,))
    f.close()
    config_option = '/usr/share/%s-release-notes-%s :'
    value = ', '.join(files)
    return ''.join([config_option, value])

    
