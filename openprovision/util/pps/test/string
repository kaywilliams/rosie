Ensure that Path objects can still be used (mostly) transparently as strings

Set up the environment
  >>> from systemstudio.util import pps
  >>> P = pps.path

Path.__add__ performs normal string addition without any Path-related
modifications
  >>> s1 = '/a/b'; s2 = '/c/d'; p1 = P(s1); p2 = P(s2)
  >>> s1 + s2 == p1 + p2
  True
  >>> s2 + s1 == p2 + p1
  True
  >>> s1.strip('/') + s2.strip('/') == p1.strip('/') + p2.strip('/')
  True
  >>> isinstance(p1 + p2, pps.path.BasePath)
  True

Path indexing should behave exactly like string indexing, and should return
a Path.
  >>> s = '/a/b/c/d'; p = P(s)
  >>> p[0] == s[0]
  True
  >>> p[1:3] == s[1:3]
  True
  >>> p[-2] == s[-2]
  True
  >>> isinstance(p[1:3], pps.path.BasePath)
  True
  >>> isinstance(p[2], pps.path.BasePath)
  True

Path.replace behaves exactly as str.replace, except it returns a Path instead
of a string.
  >>> p = P('/a/b/c/d')
  >>> p.replace('b', 'e')
  Path('/a/e/c/d')
  >>> p.replace('e', 'f')
  Path('/a/b/c/d')
  >>> P('/a/a/a/a').replace('a', 'b', 2)
  Path('/b/b/a/a')
  >>> isinstance(p.replace('b', 'e'), pps.path.BasePath)
  True

Path case modifiers return Paths instead of strings; otherwise have identical
behavior.
  >>> p = P('aBcD')
  >>> p.upper()
  Path('ABCD')
  >>> p.lower()
  Path('abcd')
  >>> p.swapcase()
  Path('AbCd')

Path strips return Paths instead of strings; otherwise have identical
behavior.
  >>> p = P('  /a/b/c/d  ')
  >>> p.strip()
  Path('/a/b/c/d')
  >>> p.lstrip()
  Path('/a/b/c/d  ')
  >>> p.rstrip()
  Path('  /a/b/c/d')
