<?xml version="1.0" encoding="utf-8"?>
<root xmlns:xi="http://www.w3.org/2001/XInclude">

<!-- scripts for installing and updating a local virtual machine -->
<config-rpm>
  <requires>openssh</requires>
  <files destdir='/root/.ssh/' destname="id_rsa.pub">%{ssh-pubfile}</files>
  <script type='post'>
  # set some convenience variables
  sshdir=/root/.ssh
  pubkey=$sshdir/id_rsa.pub
  authkeys=$sshdir/authorized_keys

  # make sshdir if it doesn't exist
  [[ -d $sshdir ]] || mkdir $sshdir 

  # create authorized_keys file if it doesn't exist
  [[ -f $authkeys ]] || touch $authkeys

  # copy id_rsa into authorized keys if it's not there arleady
  [[ `cat $authkeys` == *`cat $pubkey`* ]] || cat $pubkey &gt;&gt; $authkeys
    
  # set permissions
  chmod 700 $sshdir
  chmod 600 $authkeys
  </script>
</config-rpm>

<kickstart>
  <xi:include href='ks.cfg' parse='text'/>
</kickstart>

<trigger-script>
#!/bin/bash
TRIGGER_INFO=%{trigger-file}

FAIL=0

# create function to handle trigger failures
fail () {
FAIL=1
echo "$1 changed" &gt;&amp;2
}

# get last trigger variables
if [[ -f $TRIGGER_INFO ]]; then
  source $TRIGGER_INFO
fi

# set current trigger variables
curr_triggers='%{triggers}'
curr_release_rpm='%{release_rpm}'
curr_config_rpm='%{config_rpm}'
curr_kickstart='%{kickstart}'
curr_treeinfo='%{treeinfo}'
curr_install_script='%{install_script}'
curr_post_install_script='%{post_install_script}'

# test for changes in trigger list
[[ $curr_triggers == $last_triggers ]] || fail 'trigger list'

# test for changes in individual triggers
for trigger in $curr_triggers; do
  curr="echo \$curr_$trigger"
  last="echo \$last_$trigger"
  [[ `eval $curr` == `eval $last` ]] || fail $trigger
done

exit $FAIL
</trigger-script>

<activate-script>
#!/usr/bin/python
import libvirt
import sys
connection = libvirt.open('qemu:///system')
try: #vm exists?
  vm = connection.lookupByName('%{hostname}')
except libvirt.libvirtError:
  print "vm does not exist"
  sys.exit(1)
state = vm.state(0)[0]
if state == 1: # vm is active
  sys.exit(0) 
elif state == 3: # vm is paused 
  if vm.resume() == 0: 
    sys.exit(0) #resume succeded
  else:
    print "vm is paused and failed to resume"
    sys.exit(1)
elif vm.create() == 0: # vm is inactive
  sys.exit(0)
else:
  print "vm is inactive and failed to start"
  sys.exit(1)
</activate-script>

<delete-script>
#!/bin/bash
set -e
if [[ `virsh list` = *\ %{hostname}\ * ]]; then virsh destroy %{hostname}; fi
if [[ `virsh list --all` = *\ %{hostname}\ * ]]; then virsh undefine %{hostname}; fi
</delete-script>

<install-script>
#!/bin/bash
virt-install --name %{hostname} --ram 1000 \
             --file /var/lib/libvirt/images/%{hostname}.img \
             --file-size 30 \
             --location %{url} \
             --extra-args "%{boot-options} ks=%{url}/ks.cfg"\
             --noreboot
</install-script>

<post-install-script>
#!/bin/bash
TRIGGER_INFO=%{trigger-file}

#check install.log for errors
if grep "scriptlet failed" /root/install.log 1>/dev/null ; then
  grep -v "NOKEY" /root/install.log | \
  grep -v "*** FINISHED INSTALLING PACKAGES ***" | \
  grep -v "^Installing "
  exit 1
fi

# create TRIGGER_INFO file
echo "
last_triggers='%{triggers}'
last_release_rpm='%{release_rpm}'
last_config_rpm='%{config_rpm}'
last_kickstart='%{kickstart}'
last_treeinfo='%{treeinfo}'
last_install_script='%{install_script}'
last_post_install_script='%{post_install_script}'
" &gt; $TRIGGER_INFO
</post-install-script>

<post-script>
#!/bin/bash
set -e
yum sync -y
if [[ `uname -r` != `rpm -q kernel | sed s/kernel-//` ]] ; then
  echo "running kernel differs from installed - restarting machine"
  shutdown -r now
fi
</post-script>

</root>
