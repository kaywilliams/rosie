<?xml version="1.0" encoding="UTF-8"?>
<config-rpm id='drupal-pgsql-config' xmlns:xi="http://www.w3.org/2001/XInclude">
<requires>postgresql</requires>
<requires>postgresql-server</requires>
<requires>php-pgsql</requires>
<script type='post'>
# start pgsql service
hbafile="/var/lib/pgsql/data/pg_hba.conf"
chkconfig postgresql on
if ! [ -e $hbafile ]; then
  service postgresql initdb > /dev/null
  sed -r -i  "/local.*all.*all[[:space:]]+/s/ident/trust/" $hbafile
  sed -r -i  "/host.*all.*all.*127.0.0.1\/32[[:space:]]+/s/ident/trust/" $hbafile
  sed -r -i  "/host.*all.*all.*::1\/128[[:space:]]+/s/ident/trust/" $hbafile
fi
pidof postmaster > /dev/null || service postgresql start > /dev/null

# create drupal database
<!-- To populate the database with existing data, include this config-rpm
     within another, and have the outer config-rpm first copy a pgsql backup
     file to the /var/lib/pgsql/backups folder with the filename 'drupal'.
     Backup files can be created using the pg_dump utility.

     The outer config-rpm can copy data to the backups folder using one of two
     methods. The easiest is to use a files element such as the following:
     <files destdir='/var/lib/pgsql/backups
     destname='drupal'>/path/to/backup/file</files>. This method distributes
     initial data to the system by including it directly in the rpm. 
     
     The second method is to use a script element, e.g. <script
     type='post'>your script here</script>, to copy data directly to the
     installed machine. The script should be specified prior to
     including this config-rpm.
-->
if ! su postgres -c "psql -l" | grep %{sitename} >/dev/null; then
  su postgres -c "createdb %{sitename} -E UTF8 -T template0"
  if [[ -f "/var/lib/pgsql/backups/%{sitename}" ]]; then 
    su postgres -c "psql %{sitename} &lt; /var/lib/pgsql/backups/%{sitename}"
  fi
fi
</script>
</config-rpm>
