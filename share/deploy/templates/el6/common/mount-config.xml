<?xml version="1.0" encoding="utf-8"?>
<config-rpm id='mount-config'>
<description>configuration for formatting and mounting partitions</description>
<requires>pyparted</requires>

<files destdir='/usr/sbin' destname='partition-and-mount' content='text'
       mode='700'>
#!/usr/bin/python

import ConfigParser
import subprocess
import sys

import _ped
import parted

def mount():
  partname = "%s1" % device
  
  # partition disk
  d = parted.getDevice(device)
  try:
    disk = parted.disk.Disk(device=d)
  except _ped.DiskLabelException:
    disk = parted.freshDisk(d, 'msdos')
    disk.commitToDevice()
 
  if not disk.partitions:
    partition = parted.Partition(disk, 
                                 type=parted.PARTITION_NORMAL, 
                                 geometry=disk.getFreeSpaceRegions()[0])
    constraint = parted.Constraint(exactGeom=partition.geometry)
    disk.addPartition(partition, constraint)
    disk.commit()
    r = subprocess.call('mkfs -q -t %s %s' % (format, partname), shell=True)
    if r != 0:
      sys.stderr.write("\nError formatting partition '%s' for '%s' storage "
                       "volume." % (partname, s))
      sys.exit(r)
  
  # mount partition
  with open("/proc/mounts") as mounts:
    found = False
    for line in mounts.readlines():
      if partname in line and mountpoint in line: found = True
    if not found:
      # create mount dir
      r = subprocess.call('mkdir -p %s' % mountpoint, shell=True)
      if r != 0:
        sys.stderr.write("\nError creating mountpoint '%s' for '%s' storage "
                         "volume." % (mountpoint, s))
        sys.exit(r)

      # mount partition
      r = subprocess.call('mount %s %s' % (partname, mountpoint), shell=True)
      if r != 0:
        sys.stderr.write("\nError mounting '%s' at '%s' for '%s' storage "
                         "volume." % (partname, mountpoint, s))
        sys.exit(r)
  
  # update fstab
  with open("/etc/fstab") as fstab:
    found = False
    for line in fstab.readlines():
      if partname in line and mountpoint in line: found = True
    if not found:
      r = subprocess.call('echo -e "%s %s %s defaults,noatime,_netdev,nofail 0 2" >> /etc/fstab' % (partname, mountpoint, format), shell=True)
      if r != 0:
        sys.stderr.write("\nError adding mountpoint '%s' to fstab for '%s' "
                         "storage volume." % (mountpoint, s))
        sys.exit(r)

if __name__ == '__main__':
  for pair in sys.argv[1:]:
    k,v = pair.split('=')
    exec '%s = "%s"' % (k,v) in globals()
  mount()
</files>
</config-rpm>
