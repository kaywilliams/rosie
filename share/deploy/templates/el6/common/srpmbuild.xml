<?xml version="1.0" encoding="utf-8"?>
<definition schema-version="1.0" xmlns:xi="http://www.w3.org/2001/XInclude">

<macro id="name">srpmbuild</macro>
<macro id="fullname">RPM Build Virtual Machine</macro>
<macro id="os">centos</macro>
<macro id="edition">server</macro>
<macro id="version">6</macro>
<macro id="arch">x86_64</macro>
<macro id="id">%{name}-%{os}-%{version}-%{arch}</macro>

<main>
<name>%{name}</name>
<fullname>%{fullname}</fullname>
<os>%{os}</os>
<version>%{version}</version>
<arch>%{arch}</arch>
<id>%{id}</id>
</main>

<repos>
<xi:include href="%{templates-dir}/%{norm-os}/common/repos.xml"
            xpointer="xpointer(./repo[@id='%{os}-%{edition}-base' or 
                                      @id='%{os}-%{edition}-updates'])"/>
</repos>

<packages>
<xi:include href="%{templates-dir}/%{norm-os}/common/packages.xml"
            xpointer="xpointer(./packages[@id='core']/*)"/>
<package>bash</package>
<package>bzip2</package>
<package>coreutils</package>
<package>cpio</package>
<package>diffutils</package>
<package>findutils</package>
<package>gawk</package>
<package>gcc</package>
<package>gcc-c++</package>
<package>grep</package>
<package>gzip</package>
<package>info</package>
<package>make</package>
<package>patch</package>
<package>rpm-build</package>
<package>rpmlint</package>
<package>sed</package>
<package>shadow-utils</package>
<package>tar</package>
<package>unzip</package>
<package>which</package>
<package>xz</package>
</packages>

<publish>
<kickstart>
skipx
<xi:include href='%{templates-dir}/%{norm-os}/common/ks.xml' xpointer="xpointer(./node())"/>
</kickstart>

<triggers>
kickstart install_scripts post_install_scripts
</triggers>

<script id='rpmbuild' type='update' comes-after='update'>
#!/bin/bash
### build and verify rpm packages ###

# install packages required to build the rpm
yum sync -y -q || (echo 'yum sync failed' >&amp;2; exit 1)

# start clean
(set -e
 for d in BUILD SRPMS SPECS SOURCES RPMS; do 
   rm -rf %{build-dir}/$d
   mkdir %{build-dir}/$d
 done)
if [[ $? != 0 ]]; then echo 'setup failed' >&amp;2; exit 1 ; fi

# install srpm
rpm --quiet -Uvh --nodeps %{srpm} 2>&amp;1
if [[ $? != 0 ]]; then echo 'srpm install failed: %{srpm}' >&amp;2; exit 1 ; fi

# rebuild srpm
rpmbuild --quiet -bs --target %{arch} --define='dist el%{version}' %{spec} 2>&amp;1 
if [[ $? != 0 ]]; then echo 'srpm build failed: %{spec}' >&amp;2; exit 1; fi

# build rpm
rpmbuild --quiet -ba --target %{arch} --define='dist .el%{version}' %{spec} 2>&amp;1
if [[ $? != 0 ]]; then echo 'rpm build failed: %{spec}' >&amp;2; exit 1; fi

# validate rpm
for f in `find %{build-dir}/RPMS -type f -name "*.rpm"`; do 
  rpmlint $f 2>&amp;1
  if [[ $? == 66 ]]; then 
    echo 'rpmlint badness threshold exceeded: $f' >&amp;2; exit 1; 
  fi
done
</script>

<script id="copy" type='update' hostname="localhost" comes-after='rpmbuild'>
#!/bin/sh
set -e

opts="
-o StrictHostKeyChecking=no
-o UserKnownHostsFile=/dev/null
"

rpms=$(ssh %{ssh-host} $opts find %{build-dir}/RPMS -name "*.rpm")

for rpm in $rpms; do
  copy=true
  for exclude in %{exclude-rpms}; do 
    if [[ $(echo $(basename $rpm) | sed 's/-[^-]*-[^-]*$//') == $exclude ]] 
    then
      copy=false
      break
    fi
  done
  if [[ $copy == true ]]; then
    echo "get $rpm %{rpms-dir}" | sftp -b - $opts %{ssh-host}
  fi
done
</script>

<macro id='file-size'>10</macro>
<xi:include href="%{templates-dir}/%{norm-os}/libvirt/deploy.xml" 
            xpointer="xpointer(./*[name()!='kickstart'])"/>
</publish>

</definition>
