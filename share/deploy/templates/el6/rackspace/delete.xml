<?xml version="1.0" encoding="utf-8"?>
<script id='delete' type='delete' verbose='true'
        xmlns:xi="http://www.w3.org/2001/XInclude">
#!/usr/bin/python

<xi:include href="%{templates-dir}/%{norm-os}/rackspace/attach-storage-volumes-lib.py" parse="text"/>

# check if server exists
try:
  server =  nova.servers.find(name=fqdn)
except novaclient.exceptions.NotFound:
  sys.exit(0) # nothing to delete

# read config
config = ConfigParser.SafeConfigParser()
config.read(volume_data_file)

# unmount volumes
# Note - unmounting volumes from a script that runs on localhost
# since delete scripts can run before the ssh-host address is known
#
if server.status == 'ACTIVE':
  opts = ("-o StrictHostKeyChecking=no")

  for s in config.sections(): 
    devname = config.get(s, 'device')
    partname = "%s1" % devname
  
    # check if volume mounted
    cmd = "mount | grep -q '^%s '" % partname 
    r = subprocess.call('ssh %s %s %s' % (opts, ssh_host, cmd), shell='true')
    if r == 0:
      # unmount it
      cmd = "umount %s" % partname 
      r = subprocess.call('ssh %s %s %s' % (opts, ssh_host, cmd), shell='true')
      if r != 0: # umount failed
        sys.stderr.write("\nError unmounting '%s' for '%s' storage volume." %
                        (partname, s))
        sys.exit(1)

# delete server
server.delete()

# poll until server deleted
seconds = 0
retry = 0
while True:
  try:
    nova.servers.get(server.id)
    print "deleting server... %s seconds" % seconds

    # retry delete every 30 seconds
    if retry >= 30:
      server.delete()
      retry = 0

    seconds += 5 
    retry += 5
    time.sleep(5)
  except novaclient.exceptions.NotFound:
    sys.exit(0)
</script>
