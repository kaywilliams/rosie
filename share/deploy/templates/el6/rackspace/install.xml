<?xml version="1.0" encoding="utf-8"?>
<script id='install' type='install' verbose='true'
        xmlns:xi="http://www.w3.org/2001/XInclude">
<macro id='rackspace-instance-flavor'>performance1-1</macro>
<macro id='rackspace-centos-image'>a84b1592-6817-42da-a57c-3c13f3cfc1da</macro>
<macro id='rackspace-rhel-image'>3a6e29eb-3e17-40ed-9f1e-c6c0fb8fcb76</macro>

<!--
<macro id='rackspace-mount-data'>
volumeid-1 xvdb /mnt/point/1 ext3
volumeid-2 xvdc /mnt/point/2 ext3
</macro>
-->

source /root/rackspace/rackspace_admin

# ensure hostname doesn't already exist
nova list | grep -q "[[:space:]]%{fqdn}[[:space:]]" &amp;&amp; \
{ echo "Error: %{fqdn} already exists"; exit 1; }

# add build-host-pubkey to rackspace profile
keyname=`echo "%{build-host}" | sed "s/\./-/g"`
info=`nova keypair-show $keyname 2> /dev/null`
if [[ $? == 0 ]]; then
  # validate
  if [[ $info != *`echo "%{build-host-pubkey}" | tr -d '\r'`* ]] ; then
    echo -e "ERROR: The rackspace stored key for '$keyname' does not match the key for this machine. If the stored key is obsolete, delete it using 'nova keypair-delete $keyname' and run deploy again."
    exit 1
  fi
else
  # add
  file="/tmp/`echo $RANDOM`"
  echo "%{build-host-pubkey}" > $file
  nova keypair-add --pub-key $file $keyname
  rm -f $file
fi

# calculate block device mappings
block_device_mappings=`while read -r id dev mnt format; do
if [[ $id ]]; then
  echo "--block-device-mapping $dev=$id "
fi
done &lt;&lt;&lt; "%{rackspace-volume-data}"`

# install server
#
# NOTE: Use %{fqdn) as the rackspace server name to ensure that /etc/hosts and
# /etc/sysconfig/network are configured, which in turn makes life easier for
# network services, e.g. httpd, sendmail
#
nova boot \
--flavor %{rackspace-instance-flavor} \
--image %{rackspace-%{os}-image} \
--key-name $keyname \
$block_device_mappings \
%{fqdn} > /dev/null || exit 1

# activate server
%{wait}

# get public ipaddress
ipaddress=`nova show %{fqdn} | grep -o "accessIPv4[^|]*|[^|]*" | python -c "import sys; x=sys.stdin.readline().split()[2]; print x"`

# store ipaddress for future use
echo $ipaddress > %{ssh-host-file}

# mount storage volumes
cmd=""
while read -r id dev mnt format; do
  if [[ $id ]]; then
    cmd="$cmd mkdir -p $mnt; mount /dev/${dev}1 $mnt; echo -e \"/dev/${dev}1 $mnt $format defaults,noatime,_netdev,nofail 0 2\" >> /etc/fstab; "
  fi
done &lt;&lt;&lt; "%{rackspace-volume-data}" || exit 1

# execute ssh outside while loop to avoid stdin issues
ssh -o StrictHostKeyChecking=no $ipaddress $cmd || exit 1
</script>
