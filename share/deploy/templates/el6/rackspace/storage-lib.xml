<xml>

<include href="%{templates-dir}/%{norm-os}/rackspace/rackspace-lib.xml"
         xpath="./node()"/>

def create_volume():
  volumes = nova_volume.volumes.findall(display_name=name)

  if len(volumes) == 0: # create volume
    volume = nova_volume.volumes.create(size=size, 
                                        display_name = name,
                                        volume_type=type)

  elif len(volumes) == 1: # use existing volume
    volume = volumes[0]

  elif len(volumes) > 1: # multiple volumes - raise error
    sys.stderr.write("Multiple volumes found with the name '%s'. Delete or "                         "rename unwanted volumes and try again.\n" % name)
    sys.exit(1)

  return volume.id

def attach_volume(server_id, volume_id):
  # note - create_server_volume fails without error on device names q and above,
  # e.g. /dev/xvdp works, /dev/xvdq does not
  attach = False

  try:
    curr_device = nova.volumes.get_server_volume(server_id, volume_id).device
    if curr_device != device:
      detach_volume(server_id, volume_id)
      attach = True
  except novaclient.exceptions.NotFound:
    attach = True

  if attach:
    nova.volumes.create_server_volume(server_id, volume_id, device)

    # poll until attachment complete
    seconds = 0
    while True:
      status =  nova_volume.volumes.get(volume_id).status
      if status == "attaching": 
        print ("attaching '%s' volume at '%s'... %s seconds" % 
              (name, device, seconds))
        seconds += 2
        time.sleep(2)
      elif status == "in-use" and \
           device == nova.volumes.get_server_volume(
                          server_id, volume_id).device:
        break # attached
      else:
        sys.stderr.write("The '%s' volume did not attach to '%s'. The "
                         "current status is '%s'.\n" % (name, '%{fqdn}', status))
        sys.exit(1)

def detach_volume(server_id, volume_id):
  try:
    nova.volumes.delete_server_volume(server_id, volume_id)
  except novaclient.exceptions.NotFound:
    return

  # poll until volume is detached
  seconds = 0
  while True:
    if nova_volume.volumes.get(volume_id).status == 'available':
      break
    else:
      print ("detaching '%s' volume from '%s'... %s seconds" %
            (name, device, seconds))
      seconds += 2
      time.sleep(2)

def delete_volume(volume_id):
  nova_volume.volumes.delete(v)

  # poll until volume is deleted
  seconds = 0
  retry = 0
  while True:
    try:
      nova_volume.volumes.get(volume_id)
      print "deleting server... %s seconds" % seconds
  
      # retry delete every 30 seconds
      if retry >= 30:
        nova_volume.volumes.delete()
        retry = 0
  
      seconds += 5 
      retry += 5
      time.sleep(5)
    except novaclient.exceptions.NotFound:
      break

def attach():
  validate()
  server_id = get_server_id()
  curr_volumes = get_curr_volumes(server_id)
  volume_id = create_volume()
  attach_volume(server_id, volume_id)
</xml>
