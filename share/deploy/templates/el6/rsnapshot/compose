#!/usr/bin/python

import json
import optparse
import os
import shutil

ETC_DIR = '/etc'
JSON_EXT = '.json'

CONF_FILE        = 'rsnapshot.conf'
SCRIPT_DIR       = 'rsnapshot.d/scripts'
KNOWN_HOSTS_FILE = 'rsnapshot.d/known_hosts'

def configure(dataroot):
  dataroot = os.path.abspath(dataroot)

  # read data files
  data = []
  for dir,_,files in os.walk(dataroot):
    for file in [ f for f in files if f .endswith(JSON_EXT) ]:
      with open(os.path.join(dir,file)) as fo:
        data.append(json.load(fo))

  # write conf
  includes = []
  for i in [ x.get('conf', []) for x in data ]:
    includes.extend(i)
  with open(os.path.join(dataroot, CONF_FILE)) as fo:
    txt = fo.read()
  txt = txt + '\n'.join(includes).rstrip() + '\n'
  with open(os.path.join(ETC_DIR, CONF_FILE), 'wb') as fo:
    fo.write(txt)
  
  # write known_hosts
  txt = ''
  hosts = []
  for i in [ x.get('hosts', []) for x in data ]:
    hosts.extend(i)
  txt = txt + '\n'.join(hosts).rstrip() + '\n'
  if txt:
    file = os.path.join(ETC_DIR, KNOWN_HOSTS_FILE)
    if not os.path.exists(os.path.dirname(file)):
      os.makedirs(os.path.dirname(file))
    with open(file, 'wb') as fo:
      fo.write(txt)

  # write script files
  scripts = {} 
  for i in [ x.get('scripts', {}) for x in data ]:
    scripts.update(i)
  if scripts:
    scriptdir = os.path.join(ETC_DIR, SCRIPT_DIR)
    if os.path.exists(scriptdir):
      shutil.rmtree(scriptdir)
    os.makedirs(scriptdir)
    for f,t in scripts.items():
      fn = os.path.join(scriptdir,f)
      with open(os.path.join(fn), 'wb') as fo:
        fo.write(t)
      os.chmod(fn, 0755)

if __name__ == '__main__':
  description = """\
Searches for files in the current directory, or specified directory, for a 
base rsnapshot.conf file and '.json' files. Uses these files to configure 
rsnapshot backup and restore."""
  parser = optparse.OptionParser(description=description)
  parser.add_option("-d", "--dir", dest="dataroot", default='./',
                    help="directory to search for rsnapshot data files")

  opts, args = parser.parse_args()

  configure(dataroot=opts.dataroot)
