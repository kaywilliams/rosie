<?xml version="1.0" encoding="utf-8"?>
<config-rpm id='mount-utils'>
<description>provides mount-partition and mount-bind utilities</description>

<requires>/bin/mount</requires>
<requires>pyparted</requires>

<macro id='python-version-el6'>2.6</macro>
<macro id='python-version-el7'>2.7</macro>

<files destdir='/usr/lib/python%{python-version-%{norm-os}}/site-packages'
       destname='mount_utils.py' content='text' mode='755'>
#!/usr/bin/python

import subprocess
import sys

import _ped
import parted

def partition(device, format):
  partname = "%s1" % device
  
  # get device 
  try:
    d = parted.getDevice(device)
  except _ped.IOException as e:
    sys.stderr.write("\nError creating partition '%s' for device '%s':\n"
                     "%s\n\n" % (partname, device, e))
    sys.exit(1)

  # get disk 
  try:
    disk = parted.disk.Disk(device=d)
  except _ped.DiskLabelException:
    disk = parted.freshDisk(d, 'msdos')
    disk.commitToDevice()

  # partition
  if not disk.partitions:
    partition = parted.Partition(disk, 
                                 type=parted.PARTITION_NORMAL, 
                                 geometry=disk.getFreeSpaceRegions()[0])
    constraint = parted.Constraint(exactGeom=partition.geometry)
    disk.addPartition(partition, constraint)
    disk.commit()
    r = subprocess.call('mkfs -q -t %s %s' % (format, partname), shell=True)
    if r != 0:
      sys.stderr.write("\nError formatting partition '%s' for device '%s'"
                        % (partname, device))
      sys.exit(r)

  return partname
  
def mount(name, mountpoint, format=None, bind=False, opts=None,
          dump=0, check=None):
  if bind:
    check = check or 0
  else:
    check = check or 2 

  # get list of current mount points
  proc = subprocess.Popen('mount', shell=True,
                                   stdin=subprocess.PIPE,
                                   stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE)
  stdout, stderr = proc.communicate()
  if proc.returncode != 0:
    sys.stderr.write(stderr)
    sys.exit(proc.returncode)

  mounts = stdout.split('\n')

  # process mounts
  found = False
  for line in mounts:
    if name in line and mountpoint in line: found = True
  if not found:
    # create mount dir
    r = subprocess.call('mkdir -p %s' % mountpoint, shell=True)
    if r != 0:
      sys.stderr.write("\nError creating mountpoint '%s' for '%s'."
                       % (mountpoint, name))
      sys.exit(r)

    # mount partition
    if bind:
      txt = "--bind %s %s" % (name, mountpoint)
    else:
      txt = "%s %s %s %s" % ('-t %s' % format if format else '',
                             '-o %s' % opts if opts else '', 
                             name, mountpoint)
    r = subprocess.call('mount %s' % txt, shell=True)

    if r != 0:
      sys.stderr.write("\nError mounting '%s' at '%s'." % (name, mountpoint))
      sys.exit(r)
  
  # update fstab
  with open("/etc/fstab") as fstab:
    found = False
    for line in fstab.readlines():
      if name in line and mountpoint in line: found = True
    if not found:
      if bind:
        txt = "%s %s %s bind %s %s" % (name, mountpoint, format, dump, check)
      else:
        txt = ("%s %s %s %s %s %s"
               % (name, mountpoint, format, 
                  opts or 'defaults,noatime,_netdev,nofail',
                  dump, check))
      r = subprocess.call('echo -e "%s" >> /etc/fstab' % txt, shell=True)
      if r != 0:
        sys.stderr.write("\nError adding mountpoint '%s' to fstab for '%s'."
                          % (mountpoint, name))
        sys.exit(r)
</files>

<files destdir='/usr/sbin' destname='mount-partition' content='text'
       mode='755'>
#!/usr/bin/python

import sys
import optparse

from mount_utils import *
from optparse import OptionParser

if __name__ == '__main__':
  usage = """usage: %prog DEVICE FORMAT MOUNTPOINT [OPTS]

Creates a single partition on DEVICE in the specified FORMAT, as needed. Then
creates or updates the mount and fstab entry as specified by MOUNTPOINT.

device        name of the device, e.g. 'dev/xvdb'
format        format of the file system, e.g. 'ext3'
mountpoint    dir to mount file system, e.g. '/my/dir'
opts          mount options"""

  parser = optparse.OptionParser(usage=usage)

  _, args = parser.parse_args()

  if len(args) != 3:
    parser.error('incorrect number of arguments')

  device = args[0]
  format = args[1]
  mountpoint = args[2]
  if len(args) == 4:
    opts = args[3]
  else:
    opts = None

  partname = partition(device, format)
  mount(partname, mountpoint, format=format, opts=opts)
</files>

<files destdir='/usr/sbin' destname='mount-bind' content='text'
       mode='755'>
#!/usr/bin/python

import sys
import optparse

from mount_utils import *
from optparse import OptionParser

if __name__ == '__main__':
  usage = """usage: %prog DIR MOUNTPOINT

Binds a DIR to the specified MOUNTPOINT and creates a related fstab entry.

dir           name of an existing dir, e.g. '/orig/dir'
mountpoint    name of the mounted dir, e.g. '/mounted/as/dir'"""

  parser = optparse.OptionParser(usage=usage)

  _, args = parser.parse_args()

  if len(args) != 2:
    parser.error('incorrect number of arguments')

  dir = args[0]
  mountpoint = args[1]

  mount(dir, mountpoint, bind=True)
</files>
</config-rpm>
