<?xml version="1.0" encoding="utf-8"?>
<deploy schema-version="1.0" xmlns:xi="http://www.w3.org/2001/XInclude">

<macro id="name">srpmbuild</macro>
<macro id="fullname">RPM Build Virtual Machine</macro>
<macro id="version">6</macro>
<macro id="arch">x86_64</macro>

<main>
<name>%{name}</name>
<fullname>%{fullname}</fullname>
<version>%{version}</version>
<arch>%{arch}</arch>
</main>

<repos>
<!-- epel repo provides rpmlint package-->
<!-- epel repo defines the buildsys-build group for el6-->
<xi:include href="repos.xml"
            xpointer="xpointer(/*/repo[@id='base'] | 
                               /*/repo[@id='updates'] |
                               /*/repo[@id='epel'] )"/>
<xi:include xpointer="xpointer(/*/xml[@id='repos-%{version}']/node())"/>
</repos>
<xml id="repos-5">
<!--centos-buildsys-5 repo provides buildsys-build package-->
<xi:include href="repos.xml"
            xpointer="xpointer(/*/repo[@id='centos-buildsys-5'])"/>
</xml>
<xml id="repos-6"> </xml>

<packages>
<group>core</group>
<package>rpmlint</package>
<xi:include xpointer="xpointer(/*/xml[@id='packages-%{version}']/node())"/>
</packages>
<xml id="packages-5"><package>buildsys-build</package></xml>
<xml id="packages-6"><group>buildsys-build</group></xml>

<publish>
<password>srpmbuild</password>
<local-dir>/var/www/html/repos/.srpmbuild</local-dir>
<remote-url interface='virbrdpl'>http://%{build-host}/repos/.srpmbuild</remote-url>

<kickstart>
<xi:include href="deploy/ks.cfg" parse="text"/>
skipx
</kickstart>

<triggers>
kickstart install_scripts post_install_scripts
</triggers>

<script id='rpmbuild' type='post' ssh='true' comes-after='update' comes-before='check-kernel, poweroff'>
#!/bin/bash
### build and verify rpm packages ###

# install packages required to build the rpm
yum sync -y -q || (echo 'yum sync failed' >&amp;2; exit 1)

# start clean
(set -e
 for d in BUILD SRPMS SPECS SOURCES RPMS; do 
   rm -rf %{build-dir}/$d
   mkdir %{build-dir}/$d
 done)
if [[ $? != 0 ]]; then echo 'setup failed' >&amp;2; exit 1 ; fi

# install srpm
rpm -Uvh --nodeps %{srpm}
if [[ $? != 0 ]]; then echo 'srpm install failed: %{srpm}' >&amp;2; exit 1 ; fi

# rebuild srpm
rpmbuild -bs --target %{arch} --define='dist el%{version}' %{spec} 
if [[ $? != 0 ]]; then echo 'srpm build failed: %{spec}' >&amp;2; exit 1; fi

# build rpm
rpmbuild -ba --target %{arch} --define='dist .el%{version}' %{spec}
if [[ $? != 0 ]]; then echo 'rpm build failed: %{spec}' >&amp;2; exit 1; fi

# validate rpm
for f in `find %{build-dir}/RPMS -type f -name "*.rpm"`; do 
  rpmlint $f
  if [[ $? == 66 ]]; then 
    echo 'rpmlint badness threshold exceeded: $f' >&amp;2; exit 1; 
  fi
done
</script>

<script id="copy" type='post' ssh="false" comes-after='rpmbuild' comes-before='check-kernel, poweroff'>
#!/usr/bin/python
import os 
import paramiko
import signal

signal.signal(signal.SIGINT, signal.default_int_handler) #enable ctrl+C
try:
  client = paramiko.SSHClient()
  client.set_missing_host_key_policy(paramiko.MissingHostKeyPolicy())
  client.connect(hostname='%{fqdn}', username='root', port=22,
                 key_filename='/root/.ssh/id_rsa')
  client.get_transport().set_keepalive(1) #stop processing if ssh terminates

  try:
    sftp = paramiko.SFTPClient.from_transport(client.get_transport())
    rpms = set()
    for dir in sftp.listdir('%{build-dir}/RPMS'):
      for file in sftp.listdir('%{build-dir}/RPMS/%s' % dir):
        if file.endswith('.rpm'):
          rpms.add('%{build-dir}/RPMS/%s/%s' % (dir,file))
  
    for rpm in rpms:
      sftp.get(rpm, '%{rpms-dir}/%s' % os.path.basename(rpm))
  
  finally:
    # close connection
    if 'sftp' in locals(): sftp.close()

finally:
  if 'client' in locals(): client.close()
</script>

<macro id='file-size'>10</macro>
<xi:include href="virt-deploy.xml" 
            xpointer="xpointer(/*/*[name()!='kickstart'])"/>
</publish>

</deploy>
