<?xml version="1.0" encoding="UTF-8"?>
<config-rpm id='virt-config'>
<!--configure libvirt default network for local dns resolution-->
<requires>NetworkManager</requires>
<!--el6.4 fixed a security issue that breaks us, requiring an update to
     dnsmasq. see
     http://lists.thekelleys.org.uk/pipermail/dnsmasq-discuss/2013q1/006761.html--> 
<requires>dnsmasq >= 2.66.13</requires>
<requires>libvirt</requires>
<requires>python-virtinst</requires>
<requires>qemu-kvm</requires>
<requires>sudo</requires>
<requires>virt-manager</requires>
<requires>virt-viewer</requires>
<requires>/usr/bin/virsh</requires>

<files destdir="/etc/NetworkManager/dispatcher.d" destname="99-deploy-virt-config" mode="755" content="text">
#!/bin/bash
#Create/update deploy virtual network
domain=deploy

# Assign IP address for virtual network
xml=`virsh net-dumpxml deploy 2>/dev/null`
ipaddr=`echo $xml | sed -n "s/.*&lt;ip address='\([0-9.]\+\).*/\1/p"`
ipstart=`echo $xml | sed -n "s/.*&lt;range start='\([0-9.]\+\).*/\1/p"`
ipend=`echo $xml | sed -n "s/.*&lt;range.* end='\([0-9.]\+\).*/\1/p"`

if [[ "$ipaddr" = "" || "$ipstart" = "" || "$ipend" = "" ]]; then 
  start=123
  end=255
  success=false
  for i in `seq $start $end`; do 
    ipaddr="192.168.$i.1"
    ipstart="192.168.$i.2"
    ipend="192.168.$i.254"
    if ! (ifconfig | grep $ipaddr) >/dev/null ; then
      success=true
      break
    fi
  done
  if [[ $success = false ]]; then
    logger -t "deploy-virt-config" -s "ERROR: Unable to assign IP address for virtual network in the range '192.168.$start.1' to '192.168.$end.1'. Please change the IP address of an existing virtual network and try again."
    exit 1
  fi
fi

# Create/update deploy.xml
working="%{installdir}"
libvirt="/etc/libvirt/qemu/networks"

/bin/cp -f $working/deploy.tmpl $working/deploy.xml
sed -i "s/%domain/$domain/g" $working/deploy.xml
sed -i "s/%brname/$brname/g" $working/deploy.xml
sed -i "s/%ipaddr/$ipaddr/g" $working/deploy.xml
sed -i "s/%ipstart/$ipstart/g" $working/deploy.xml
sed -i "s/%ipend/$ipend/g" $working/deploy.xml

if ! ([ -e $working/deploy.last ] &amp;&amp; \
      diff $working/deploy.xml $working/deploy.last>/dev/null); then
  if [[ ! `ps aux | grep "[/]usr/bin/anaconda"` ]]; then
    if virsh net-info deploy >/dev/null 2>&amp;1; then
      virsh net-destroy deploy >/dev/null 2>&amp;1 || true
      virsh net-undefine deploy >/dev/null
    fi
  fi
  /bin/cp -f $working/deploy.xml $libvirt/deploy.xml
  if [[ ! `ps aux | grep "[/]usr/bin/anaconda"` ]]; then
    virsh net-define $libvirt/deploy.xml >/dev/null
    virsh net-start deploy >/dev/null
    virsh net-autostart deploy >/dev/null
  else
    /bin/ln -sf $libvirt/deploy.xml $libvirt/autostart
  fi
fi
/bin/mv -f $working/deploy.xml $working/deploy.last

# make dnssmasq the first nameserver in resolv.conf
[[ `grep "$ipaddr" /etc/resolv.conf` ]] || \
sed -i "1,/^nameserver/ {/^nameserver/i\
nameserver $ipaddr
}" /etc/resolv.conf

# add search statement to resolv.conf if it doesn't exist
[[ `grep "^search" /etc/resolv.conf` ]] || \
sed -i "1,/^nameserver $ipaddr/ {/^nameserver/i\
search $domain
}" /etc/resolv.conf

# add virtual network to search statement if it doesn't exist
[[ `grep -P "^search .* $domain( |$)" /etc/resolv.conf` ]] || \
sed -i "/search /s/$/ $domain/" /etc/resolv.conf

# save ipaddr for use during uninstall
echo -e "ipaddr=$ipaddr\ndomain=$domain" > %{installdir}/uninstall.info
</files>

<files destdir="%{installdir}" destname="deploy.tmpl" content="text">
&lt;network>
  &lt;name>deploy&lt;/name>
  &lt;domain name="%domain"/>
  &lt;bridge name="virbrdpl" />
  &lt;forward/>
  &lt;ip address="%ipaddr" netmask="255.255.255.0">
    &lt;dhcp>
      &lt;range start="%ipstart" end="%ipend" />
    &lt;/dhcp>
  &lt;/ip>
&lt;/network>
</files>

<!-- libvirt configuration-->
<script type="post">
# start libvirtd if not running
if [[ ! `ps aux | grep "[/]usr/bin/anaconda"` ]]; then
  ( pidof libvirtd || service libvirtd start ) >/dev/null
fi

# run dispatcher.d script if it has changed
file=/etc/NetworkManager/dispatcher.d/99-deploy-virt-config
if [[ $changed = *$file* ]] ; then
  $file
fi

# ensure consistent ip forwarding
# wish we could do this using a sysctl.d script, but NetworkManager seems to
# overwrite the value each time it is restarted, without calling sysctl.d
# scripts.
text="net.ipv4.ip_forward"
file="/etc/sysctl.conf"
if [[ `grep "$text" $file` = *0* ]] ; then
  sed -i "s/^$text.*/$text = 1/" $file # modify file 
  /bin/cp -r $file %{installdir}       # backup file for use during cleanup
  if [[ ! `ps aux | grep "[/]usr/bin/anaconda"` ]]; then
    sysctl -q -p                       # update sysctl
  fi
fi
</script>

<script type='postun'>
if [[ $1 = 0 ]]; then
  # revert /etc/sysctl.conf if necessary 
  text="net.ipv4.ip_forward"
  file="/etc/sysctl.conf"
  if [ -f %{installdir}/sysctl.conf ] ; then
    if diff $file %{installdir}/sysctl.conf ; then 
      /bin/cp -f %{installdir}/sysctl.conf $file
      sed -i "s/^$text.*/$text = 0/" $file # modify file 
      sysctl -q -p                         # update sysctl
      /bin/rm -f %{installdir}/sysctl.conf # remove backup file 
    fi
  fi
  if virsh net-info deploy >/dev/null 2>&amp;1; then
    virsh net-destroy deploy >/dev/null 2>&amp;1 || true
    virsh net-undefine deploy >/dev/null
  fi

  # resolv.conf cleanup
  source %{installdir}/uninstall.info #provides $ipaddr and $domain
  sed -i "/nameserver $ipaddr/d" /etc/resolv.conf
  sed -i "s/\(^search .*\) $domain/\1/g" /etc/resolv.conf

  # force removal of NetworkManager script
  rm -f /etc/NetworkManager/dispatcher.d/99-deploy-virt-config
fi
</script>
</config-rpm>
