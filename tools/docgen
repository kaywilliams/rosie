#!/usr/bin/python
#
# Copyright (c) 2007, 2008
# Rendition Software, Inc. All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>
#

__author__  = "Uday Prakash <uprakash@renditionsoftware.com>"
__date__    = "July 11, 2007"
__version__ = "1.0"

import sys

from optparse import OptionParser

from rendition import xmllib

from rendition.CleanHelpFormatter import CleanHelpFormatter
from rendition.docbook            import (GENERATORS, ManualGenerator,
                                          filterCmdArgs, getGenerator)

class SpinManualGenerator(ManualGenerator):
  def __init__(self):
    ManualGenerator.__init__(self)

  def check(self):
    ManualGenerator.check(self)
    refentry = self.master_xml.get('/docbook/refentry', None)
    if refentry is not None:
      config = xmllib.tree.Element('refsect1', parent=refentry)
      title = xmllib.tree.Element('title', parent=config, text='CONFIG ELEMENTS')
      xmllib.tree.Element('para', parent=config,
        text='Detailed below is a comprehensive list of XML elements available '
             'in the spin config file.')
      refsect2s = refentry.xpath('/docbook/refentry/refsect2', [])
      refsect2s.sort(lambda x,y: cmp(x.get('title/text()'), y.get('title/text()')))
      for refsect2 in refsect2s:
        refsect2.parent = config
        config.append(refsect2)

def main():
  # TODO: add support for generators besides manpages
  parser = OptionParser("%prog [OPTIONS]", formatter=CleanHelpFormatter(),
                        version=__version__)

  parser.add_option('-w', '--what',
                    dest='what',
                    help="the type of output, defaults to 'manpage'",
                    metavar='OUTPUTTYPE',
                    default='manpage',
                    choices=GENERATORS)

  args = sys.argv[1:]

  try:
    preargs = filterCmdArgs(args, [], ['-w', '--what'])
  except ValueError:
    parser.print_help()
    sys.exit(1)

  opts,_ = parser.parse_args(args=preargs)
  g = getGenerator(opts.what, newgenerators={'manpage': SpinManualGenerator})()

  # add the generator-specific options
  g.addOptions(parser)
  options, args = parser.parse_args()
  g.applyOptions(options)

  g.generate()

if __name__ == '__main__':
  main()
